
WaterGunProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c20  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08001e04  08001e04  00011e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800245c  0800245c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800245c  0800245c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800245c  0800245c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800245c  0800245c  0001245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002470  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058ea  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001500  00000000  00000000  0002591f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00026e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  00027428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cc6  00000000  00000000  00027978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006853  00000000  00000000  0002a63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dae9  00000000  00000000  00030e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be97a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000168c  00000000  00000000  000be9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001dec 	.word	0x08001dec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001dec 	.word	0x08001dec

08000224 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f001 f86f 	bl	8001360 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f001 f867 	bl	8001360 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f001 f850 	bl	8001360 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f001 f849 	bl	8001360 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawLine>:
}



void LCD_DrawLine ( uint16_t usC1, uint16_t usP1, uint16_t usC2, uint16_t usP2, uint16_t usColor )
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b08d      	sub	sp, #52	; 0x34
 8000684:	af00      	add	r7, sp, #0
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4623      	mov	r3, r4
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
 800069a:	4613      	mov	r3, r2
 800069c:	803b      	strh	r3, [r7, #0]
	uint16_t us; 
	uint16_t usC_Current, usP_Current;
	
	int32_t lError_C = 0, lError_P = 0, lDelta_C, lDelta_P, lDistance; 
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
	int32_t lIncrease_C, lIncrease_P; 	
	
	
	lDelta_C = usC2 - usC1;
 80006a6:	887a      	ldrh	r2, [r7, #2]
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	61fb      	str	r3, [r7, #28]
	lDelta_P = usP2 - usP1; 
 80006ae:	883a      	ldrh	r2, [r7, #0]
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	61bb      	str	r3, [r7, #24]
	
	usC_Current = usC1; 
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	usP_Current = usP1; 
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	
	if ( lDelta_C > 0 ) 
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dd02      	ble.n	80006ca <LCD_DrawLine+0x4a>
		lIncrease_C = 1;  
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	e00b      	b.n	80006e2 <LCD_DrawLine+0x62>
	
	else if ( lDelta_C == 0 ) 
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <LCD_DrawLine+0x56>
		lIncrease_C = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	e005      	b.n	80006e2 <LCD_DrawLine+0x62>
	
	else 
  	{ 
    		lIncrease_C = -1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	613b      	str	r3, [r7, #16]
    		lDelta_C = - lDelta_C;
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	425b      	negs	r3, r3
 80006e0:	61fb      	str	r3, [r7, #28]
  	} 

	
	if ( lDelta_P > 0 )
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dd02      	ble.n	80006ee <LCD_DrawLine+0x6e>
		lIncrease_P = 1; 
 80006e8:	2301      	movs	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	e00b      	b.n	8000706 <LCD_DrawLine+0x86>
	
	else if ( lDelta_P == 0 )
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <LCD_DrawLine+0x7a>
		lIncrease_P = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e005      	b.n	8000706 <LCD_DrawLine+0x86>
	else 
	{
  		lIncrease_P = -1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	60fb      	str	r3, [r7, #12]
    		lDelta_P = - lDelta_P;
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	425b      	negs	r3, r3
 8000704:	61bb      	str	r3, [r7, #24]
 	} 

	if (  lDelta_C > lDelta_P )
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	429a      	cmp	r2, r3
 800070c:	dd02      	ble.n	8000714 <LCD_DrawLine+0x94>
		lDistance = lDelta_C; 
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	e001      	b.n	8000718 <LCD_DrawLine+0x98>
	
	else 
		lDistance = lDelta_P; 
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	617b      	str	r3, [r7, #20]
	
	
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 8000718:	2300      	movs	r3, #0
 800071a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800071c:	e02b      	b.n	8000776 <LCD_DrawLine+0xf6>
	{  
		LCD_DrawDot ( usC_Current, usP_Current, usColor );
 800071e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000722:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000724:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f89d 	bl	8000866 <LCD_DrawDot>
		
		lError_C += lDelta_C ; 
 800072c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	4413      	add	r3, r2
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
		lError_P += lDelta_P ; 
 8000734:	6a3a      	ldr	r2, [r7, #32]
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	4413      	add	r3, r2
 800073a:	623b      	str	r3, [r7, #32]
		
		if ( lError_C > lDistance ) 
 800073c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	429a      	cmp	r2, r3
 8000742:	dd08      	ble.n	8000756 <LCD_DrawLine+0xd6>
		{ 
			lError_C -= lDistance; 
 8000744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
			usC_Current += lIncrease_C; 
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	b29a      	uxth	r2, r3
 8000750:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000752:	4413      	add	r3, r2
 8000754:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}  
		
		if ( lError_P > lDistance ) 
 8000756:	6a3a      	ldr	r2, [r7, #32]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	429a      	cmp	r2, r3
 800075c:	dd08      	ble.n	8000770 <LCD_DrawLine+0xf0>
		{ 
			lError_P -= lDistance; 
 800075e:	6a3a      	ldr	r2, [r7, #32]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	623b      	str	r3, [r7, #32]
			usP_Current += lIncrease_P; 
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	b29a      	uxth	r2, r3
 800076a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800076c:	4413      	add	r3, r2
 800076e:	857b      	strh	r3, [r7, #42]	; 0x2a
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 8000770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000772:	3301      	adds	r3, #1
 8000774:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000776:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3301      	adds	r3, #1
 800077c:	429a      	cmp	r2, r3
 800077e:	ddce      	ble.n	800071e <LCD_DrawLine+0x9e>
		} 
		
	}  
	
	
}   
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3734      	adds	r7, #52	; 0x34
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}
	...

0800078c <LCD_DrawChar>:


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
 8000796:	460b      	mov	r3, r1
 8000798:	80bb      	strh	r3, [r7, #4]
 800079a:	4613      	mov	r3, r2
 800079c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucRelativePositon = cChar - ' ';
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	3b20      	subs	r3, #32
 80007a2:	727b      	strb	r3, [r7, #9]
	
	
	for (uint16_t ucColumn = usC; ucColumn < usC + HEIGHT_EN_CHAR; ucColumn++){
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	81fb      	strh	r3, [r7, #14]
 80007a8:	e025      	b.n	80007f6 <LCD_DrawChar+0x6a>

		uint8_t colInfo = ucAscii_1608[ucRelativePositon][ucColumn-usC];
 80007aa:	7a7a      	ldrb	r2, [r7, #9]
 80007ac:	89f9      	ldrh	r1, [r7, #14]
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	1acb      	subs	r3, r1, r3
 80007b2:	4916      	ldr	r1, [pc, #88]	; (800080c <LCD_DrawChar+0x80>)
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	440a      	add	r2, r1
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	737b      	strb	r3, [r7, #13]

		for (uint16_t ucPage = usP; ucPage > usP - WIDTH_EN_CHAR; ucPage--){
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	817b      	strh	r3, [r7, #10]
 80007c2:	e010      	b.n	80007e6 <LCD_DrawChar+0x5a>
			if (colInfo & 0x01){
 80007c4:	7b7b      	ldrb	r3, [r7, #13]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d005      	beq.n	80007da <LCD_DrawChar+0x4e>
				LCD_DrawDot(ucColumn,ucPage,0x001F);
 80007ce:	8979      	ldrh	r1, [r7, #10]
 80007d0:	89fb      	ldrh	r3, [r7, #14]
 80007d2:	221f      	movs	r2, #31
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f846 	bl	8000866 <LCD_DrawDot>
			}
			colInfo >>= 1;
 80007da:	7b7b      	ldrb	r3, [r7, #13]
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	737b      	strb	r3, [r7, #13]
		for (uint16_t ucPage = usP; ucPage > usP - WIDTH_EN_CHAR; ucPage--){
 80007e0:	897b      	ldrh	r3, [r7, #10]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	817b      	strh	r3, [r7, #10]
 80007e6:	88bb      	ldrh	r3, [r7, #4]
 80007e8:	1fda      	subs	r2, r3, #7
 80007ea:	897b      	ldrh	r3, [r7, #10]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dde9      	ble.n	80007c4 <LCD_DrawChar+0x38>
	for (uint16_t ucColumn = usC; ucColumn < usC + HEIGHT_EN_CHAR; ucColumn++){
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	3301      	adds	r3, #1
 80007f4:	81fb      	strh	r3, [r7, #14]
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	f103 020f 	add.w	r2, r3, #15
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dad3      	bge.n	80007aa <LCD_DrawChar+0x1e>
		}
	}
	
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08001e48 	.word	0x08001e48

08000810 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	603a      	str	r2, [r7, #0]
 800081a:	80fb      	strh	r3, [r7, #6]
 800081c:	460b      	mov	r3, r1
 800081e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000820:	e016      	b.n	8000850 <LCD_DrawString+0x40>
	{
		if ((usC < 0) || (usC + HEIGHT_EN_CHAR >= LCD_Default_Max_COLUMN))
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	2bdf      	cmp	r3, #223	; 0xdf
 8000826:	d818      	bhi.n	800085a <LCD_DrawString+0x4a>
		{
			return;
		}
		
		if ((usP >= LCD_Default_Max_PAGE) || (usP - WIDTH_EN_CHAR < LCD_DispWindow_Start_PAGE))
 8000828:	88bb      	ldrh	r3, [r7, #4]
 800082a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800082e:	d216      	bcs.n	800085e <LCD_DrawString+0x4e>
 8000830:	88bb      	ldrh	r3, [r7, #4]
 8000832:	2b07      	cmp	r3, #7
 8000834:	d913      	bls.n	800085e <LCD_DrawString+0x4e>
		{
			return;
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	88b9      	ldrh	r1, [r7, #4]
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffa4 	bl	800078c <LCD_DrawChar>
		
		pStr ++;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	603b      	str	r3, [r7, #0]
		
		usP -= WIDTH_EN_CHAR;
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	3b08      	subs	r3, #8
 800084e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1e4      	bne.n	8000822 <LCD_DrawString+0x12>
 8000858:	e002      	b.n	8000860 <LCD_DrawString+0x50>
			return;
 800085a:	bf00      	nop
 800085c:	e000      	b.n	8000860 <LCD_DrawString+0x50>
			return;
 800085e:	bf00      	nop
		
	}
	
}
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColour)
{	
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	80fb      	strh	r3, [r7, #6]
 8000870:	460b      	mov	r3, r1
 8000872:	80bb      	strh	r3, [r7, #4]
 8000874:	4613      	mov	r3, r2
 8000876:	807b      	strh	r3, [r7, #2]
	/*
	 *  Task 2 : Implement the LCD_DrawDot to turn on a particular dot on the LCD.
	 */
	LCD_OpenWindow(usCOLUMN,usPAGE,1,1);
 8000878:	88b9      	ldrh	r1, [r7, #4]
 800087a:	88f8      	ldrh	r0, [r7, #6]
 800087c:	2301      	movs	r3, #1
 800087e:	2201      	movs	r2, #1
 8000880:	f7ff fe64 	bl	800054c <LCD_OpenWindow>
	LCD_Write_Cmd(CMD_SetPixel);
 8000884:	202c      	movs	r0, #44	; 0x2c
 8000886:	f7ff fd29 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data(usColour);
 800088a:	887b      	ldrh	r3, [r7, #2]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fd33 	bl	80002f8 <LCD_Write_Data>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a2:	f000 fa83 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a6:	f000 f883 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f000 f8cf 	bl	8000a4c <MX_GPIO_Init>
  MX_FSMC_Init();
 80008ae:	f000 f939 	bl	8000b24 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80008b2:	f7ff fcc8 	bl	8000246 <LCD_INIT>

  DEBUG_DELAY();
  LCD_Write_Cmd(0x36);
 80008b6:	2036      	movs	r0, #54	; 0x36
 80008b8:	f7ff fd10 	bl	80002dc <LCD_Write_Cmd>
  LCD_Write_Cmd(0xC8);
 80008bc:	20c8      	movs	r0, #200	; 0xc8
 80008be:	f7ff fd0d 	bl	80002dc <LCD_Write_Cmd>
  DEBUG_DELAY();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_DrawString(0,318,"Water");
 80008c2:	4a33      	ldr	r2, [pc, #204]	; (8000990 <main+0xf4>)
 80008c4:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff ffa1 	bl	8000810 <LCD_DrawString>
  LCD_DrawString(17,318,"Level");
 80008ce:	4a31      	ldr	r2, [pc, #196]	; (8000994 <main+0xf8>)
 80008d0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80008d4:	2011      	movs	r0, #17
 80008d6:	f7ff ff9b 	bl	8000810 <LCD_DrawString>

  LCD_DrawString(0,262,"STATUS");
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <main+0xfc>)
 80008dc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ff95 	bl	8000810 <LCD_DrawString>

  LCD_DrawString( 0,198,"Current");
 80008e6:	4a2d      	ldr	r2, [pc, #180]	; (800099c <main+0x100>)
 80008e8:	21c6      	movs	r1, #198	; 0xc6
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ff90 	bl	8000810 <LCD_DrawString>
  LCD_DrawString(17,198,"Bearing");
 80008f0:	4a2b      	ldr	r2, [pc, #172]	; (80009a0 <main+0x104>)
 80008f2:	21c6      	movs	r1, #198	; 0xc6
 80008f4:	2011      	movs	r0, #17
 80008f6:	f7ff ff8b 	bl	8000810 <LCD_DrawString>

  LCD_DrawString( 0,126," Target");
 80008fa:	4a2a      	ldr	r2, [pc, #168]	; (80009a4 <main+0x108>)
 80008fc:	217e      	movs	r1, #126	; 0x7e
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff ff86 	bl	8000810 <LCD_DrawString>
  LCD_DrawString(17,126,"Bearing");
 8000904:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <main+0x104>)
 8000906:	217e      	movs	r1, #126	; 0x7e
 8000908:	2011      	movs	r0, #17
 800090a:	f7ff ff81 	bl	8000810 <LCD_DrawString>

  LCD_DrawString(0,54,"DISTANCE");
 800090e:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <main+0x10c>)
 8000910:	2136      	movs	r1, #54	; 0x36
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff ff7c 	bl	8000810 <LCD_DrawString>

  LCD_DrawLine(34,319,34,0,0x0000);
 8000918:	2300      	movs	r3, #0
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	2222      	movs	r2, #34	; 0x22
 8000920:	f240 113f 	movw	r1, #319	; 0x13f
 8000924:	2022      	movs	r0, #34	; 0x22
 8000926:	f7ff feab 	bl	8000680 <LCD_DrawLine>

  LCD_DrawLine(52,319,52,0,0x0000);
 800092a:	2300      	movs	r3, #0
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	2234      	movs	r2, #52	; 0x34
 8000932:	f240 113f 	movw	r1, #319	; 0x13f
 8000936:	2034      	movs	r0, #52	; 0x34
 8000938:	f7ff fea2 	bl	8000680 <LCD_DrawLine>

  LCD_DrawLine(0,270,52,270,0x0000);
 800093c:	2300      	movs	r3, #0
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000944:	2234      	movs	r2, #52	; 0x34
 8000946:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fe98 	bl	8000680 <LCD_DrawLine>
  LCD_DrawLine(0,206,52,206,0x0000);
 8000950:	2300      	movs	r3, #0
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	23ce      	movs	r3, #206	; 0xce
 8000956:	2234      	movs	r2, #52	; 0x34
 8000958:	21ce      	movs	r1, #206	; 0xce
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fe90 	bl	8000680 <LCD_DrawLine>
  LCD_DrawLine(0,134,52,134,0x0000);
 8000960:	2300      	movs	r3, #0
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2386      	movs	r3, #134	; 0x86
 8000966:	2234      	movs	r2, #52	; 0x34
 8000968:	2186      	movs	r1, #134	; 0x86
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fe88 	bl	8000680 <LCD_DrawLine>
  LCD_DrawLine(0,62,52,62,0x0000);
 8000970:	2300      	movs	r3, #0
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	233e      	movs	r3, #62	; 0x3e
 8000976:	2234      	movs	r2, #52	; 0x34
 8000978:	213e      	movs	r1, #62	; 0x3e
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fe80 	bl	8000680 <LCD_DrawLine>
  while (1)
  {
	  const char* Name = "Gupta";
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <main+0x110>)
 8000982:	607b      	str	r3, [r7, #4]
	  LCD_DrawString(100,100,Name);
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	2164      	movs	r1, #100	; 0x64
 8000988:	2064      	movs	r0, #100	; 0x64
 800098a:	f7ff ff41 	bl	8000810 <LCD_DrawString>
//	  LCD_DrawEllipse(120,160,75,25,BLACK);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800098e:	e7f7      	b.n	8000980 <main+0xe4>
 8000990:	08001e04 	.word	0x08001e04
 8000994:	08001e0c 	.word	0x08001e0c
 8000998:	08001e14 	.word	0x08001e14
 800099c:	08001e1c 	.word	0x08001e1c
 80009a0:	08001e24 	.word	0x08001e24
 80009a4:	08001e2c 	.word	0x08001e2c
 80009a8:	08001e34 	.word	0x08001e34
 80009ac:	08001e40 	.word	0x08001e40

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b090      	sub	sp, #64	; 0x40
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	2228      	movs	r2, #40	; 0x28
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fa0c 	bl	8001ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fcc9 	bl	8001390 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bf14      	ite	ne
 8000a04:	2301      	movne	r3, #1
 8000a06:	2300      	moveq	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000a0e:	f000 f8f3 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	230f      	movs	r3, #15
 8000a14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	2302      	movs	r3, #2
 8000a18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 ff32 	bl	8001894 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a40:	f000 f8da 	bl	8000bf8 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3740      	adds	r7, #64	; 0x40
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a78:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0320 	and.w	r3, r3, #32
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_GPIO_Init+0xcc>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac6:	4815      	ldr	r0, [pc, #84]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000ac8:	f000 fc4a 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000ad2:	f000 fc45 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000af0:	f000 faa2 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000b0c:	f000 fa94 	bl	8001038 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40011400 	.word	0x40011400
 8000b20:	40011800 	.word	0x40011800

08000b24 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000b3c:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b3e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000b42:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b46:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <MX_FSMC_Init+0xcc>)
 8000b48:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b5e:	2210      	movs	r2, #16
 8000b60:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ba2:	23ff      	movs	r3, #255	; 0xff
 8000ba4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000baa:	2310      	movs	r3, #16
 8000bac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000bae:	2311      	movs	r3, #17
 8000bb0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_FSMC_Init+0xc8>)
 8000bbe:	f000 ffc5 	bl	8001b4c <HAL_SRAM_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bf14      	ite	ne
 8000bc8:	2301      	movne	r3, #1
 8000bca:	2300      	moveq	r3, #0
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8000bd2:	f000 f811 	bl	8000bf8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_FSMC_Init+0xd0>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <MX_FSMC_Init+0xd0>)
 8000bdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be0:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000028 	.word	0x20000028
 8000bf0:	a0000104 	.word	0xa0000104
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_MspInit+0x60>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_MspInit+0x60>)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010000 	.word	0x40010000

08000c68 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_FSMC_MspInit+0x78>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d129      	bne.n	8000cd8 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_FSMC_MspInit+0x78>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_FSMC_MspInit+0x7c>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <HAL_FSMC_MspInit+0x7c>)
 8000c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_FSMC_MspInit+0x7c>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ca2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000ca6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <HAL_FSMC_MspInit+0x80>)
 8000cb8:	f000 f9be 	bl	8001038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cbc:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000cc0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <HAL_FSMC_MspInit+0x84>)
 8000cd2:	f000 f9b1 	bl	8001038 <HAL_GPIO_Init>
 8000cd6:	e000      	b.n	8000cda <HAL_FSMC_MspInit+0x72>
    return;
 8000cd8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000070 	.word	0x20000070
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40011800 	.word	0x40011800
 8000cec:	40011400 	.word	0x40011400

08000cf0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000cf8:	f7ff ffb6 	bl	8000c68 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f875 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
	...

08000d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d60:	f7ff fff7 	bl	8000d52 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480b      	ldr	r0, [pc, #44]	; (8000d94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d66:	490c      	ldr	r1, [pc, #48]	; (8000d98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d7c:	4c09      	ldr	r4, [pc, #36]	; (8000da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f001 f803 	bl	8001d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8e:	f7ff fd85 	bl	800089c <main>
  bx lr
 8000d92:	4770      	bx	lr
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d9c:	08002464 	.word	0x08002464
  ldr r2, =_sbss
 8000da0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000da4:	20000078 	.word	0x20000078

08000da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_2_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_Init+0x28>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_Init+0x28>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f907 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff ff1c 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f911 	bl	800101e <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 f8e7 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000074 	.word	0x20000074

08000e5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	20000074 	.word	0x20000074

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff90 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff49 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff5e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff90 	bl	8000f28 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5f 	bl	8000ed4 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffb0 	bl	8000f8c <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b08b      	sub	sp, #44	; 0x2c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	e179      	b.n	8001340 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800104c:	2201      	movs	r2, #1
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8168 	bne.w	800133a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4a96      	ldr	r2, [pc, #600]	; (80012c8 <HAL_GPIO_Init+0x290>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d05e      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 8001074:	4a94      	ldr	r2, [pc, #592]	; (80012c8 <HAL_GPIO_Init+0x290>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d875      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 800107a:	4a94      	ldr	r2, [pc, #592]	; (80012cc <HAL_GPIO_Init+0x294>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d058      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 8001080:	4a92      	ldr	r2, [pc, #584]	; (80012cc <HAL_GPIO_Init+0x294>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d86f      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 8001086:	4a92      	ldr	r2, [pc, #584]	; (80012d0 <HAL_GPIO_Init+0x298>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d052      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 800108c:	4a90      	ldr	r2, [pc, #576]	; (80012d0 <HAL_GPIO_Init+0x298>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d869      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 8001092:	4a90      	ldr	r2, [pc, #576]	; (80012d4 <HAL_GPIO_Init+0x29c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d04c      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 8001098:	4a8e      	ldr	r2, [pc, #568]	; (80012d4 <HAL_GPIO_Init+0x29c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d863      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 800109e:	4a8e      	ldr	r2, [pc, #568]	; (80012d8 <HAL_GPIO_Init+0x2a0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d046      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 80010a4:	4a8c      	ldr	r2, [pc, #560]	; (80012d8 <HAL_GPIO_Init+0x2a0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d85d      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d82a      	bhi.n	8001104 <HAL_GPIO_Init+0xcc>
 80010ae:	2b12      	cmp	r3, #18
 80010b0:	d859      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <HAL_GPIO_Init+0x80>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	08001133 	.word	0x08001133
 80010bc:	0800110d 	.word	0x0800110d
 80010c0:	0800111f 	.word	0x0800111f
 80010c4:	08001161 	.word	0x08001161
 80010c8:	08001167 	.word	0x08001167
 80010cc:	08001167 	.word	0x08001167
 80010d0:	08001167 	.word	0x08001167
 80010d4:	08001167 	.word	0x08001167
 80010d8:	08001167 	.word	0x08001167
 80010dc:	08001167 	.word	0x08001167
 80010e0:	08001167 	.word	0x08001167
 80010e4:	08001167 	.word	0x08001167
 80010e8:	08001167 	.word	0x08001167
 80010ec:	08001167 	.word	0x08001167
 80010f0:	08001167 	.word	0x08001167
 80010f4:	08001167 	.word	0x08001167
 80010f8:	08001167 	.word	0x08001167
 80010fc:	08001115 	.word	0x08001115
 8001100:	08001129 	.word	0x08001129
 8001104:	4a75      	ldr	r2, [pc, #468]	; (80012dc <HAL_GPIO_Init+0x2a4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800110a:	e02c      	b.n	8001166 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e029      	b.n	8001168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	3304      	adds	r3, #4
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e024      	b.n	8001168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	3308      	adds	r3, #8
 8001124:	623b      	str	r3, [r7, #32]
          break;
 8001126:	e01f      	b.n	8001168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	330c      	adds	r3, #12
 800112e:	623b      	str	r3, [r7, #32]
          break;
 8001130:	e01a      	b.n	8001168 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800113a:	2304      	movs	r3, #4
 800113c:	623b      	str	r3, [r7, #32]
          break;
 800113e:	e013      	b.n	8001168 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d105      	bne.n	8001154 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001148:	2308      	movs	r3, #8
 800114a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	611a      	str	r2, [r3, #16]
          break;
 8001152:	e009      	b.n	8001168 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001154:	2308      	movs	r3, #8
 8001156:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	615a      	str	r2, [r3, #20]
          break;
 800115e:	e003      	b.n	8001168 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
          break;
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x130>
          break;
 8001166:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2bff      	cmp	r3, #255	; 0xff
 800116c:	d801      	bhi.n	8001172 <HAL_GPIO_Init+0x13a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	e001      	b.n	8001176 <HAL_GPIO_Init+0x13e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3304      	adds	r3, #4
 8001176:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d802      	bhi.n	8001184 <HAL_GPIO_Init+0x14c>
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	e002      	b.n	800118a <HAL_GPIO_Init+0x152>
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	3b08      	subs	r3, #8
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	210f      	movs	r1, #15
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	6a39      	ldr	r1, [r7, #32]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	431a      	orrs	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 80c1 	beq.w	800133a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b8:	4b49      	ldr	r3, [pc, #292]	; (80012e0 <HAL_GPIO_Init+0x2a8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a48      	ldr	r2, [pc, #288]	; (80012e0 <HAL_GPIO_Init+0x2a8>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x2a8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011d0:	4a44      	ldr	r2, [pc, #272]	; (80012e4 <HAL_GPIO_Init+0x2ac>)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3c      	ldr	r2, [pc, #240]	; (80012e8 <HAL_GPIO_Init+0x2b0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d01f      	beq.n	800123c <HAL_GPIO_Init+0x204>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a3b      	ldr	r2, [pc, #236]	; (80012ec <HAL_GPIO_Init+0x2b4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d019      	beq.n	8001238 <HAL_GPIO_Init+0x200>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a3a      	ldr	r2, [pc, #232]	; (80012f0 <HAL_GPIO_Init+0x2b8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_GPIO_Init+0x1fc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a39      	ldr	r2, [pc, #228]	; (80012f4 <HAL_GPIO_Init+0x2bc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00d      	beq.n	8001230 <HAL_GPIO_Init+0x1f8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a38      	ldr	r2, [pc, #224]	; (80012f8 <HAL_GPIO_Init+0x2c0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x1f4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a37      	ldr	r2, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x2c4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_GPIO_Init+0x1f0>
 8001224:	2305      	movs	r3, #5
 8001226:	e00a      	b.n	800123e <HAL_GPIO_Init+0x206>
 8001228:	2306      	movs	r3, #6
 800122a:	e008      	b.n	800123e <HAL_GPIO_Init+0x206>
 800122c:	2304      	movs	r3, #4
 800122e:	e006      	b.n	800123e <HAL_GPIO_Init+0x206>
 8001230:	2303      	movs	r3, #3
 8001232:	e004      	b.n	800123e <HAL_GPIO_Init+0x206>
 8001234:	2302      	movs	r3, #2
 8001236:	e002      	b.n	800123e <HAL_GPIO_Init+0x206>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <HAL_GPIO_Init+0x206>
 800123c:	2300      	movs	r3, #0
 800123e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001240:	f002 0203 	and.w	r2, r2, #3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	4093      	lsls	r3, r2
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800124e:	4925      	ldr	r1, [pc, #148]	; (80012e4 <HAL_GPIO_Init+0x2ac>)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	4924      	ldr	r1, [pc, #144]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	43db      	mvns	r3, r3
 800127e:	4920      	ldr	r1, [pc, #128]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 8001280:	4013      	ands	r3, r2
 8001282:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	491a      	ldr	r1, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	60cb      	str	r3, [r1, #12]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4916      	ldr	r1, [pc, #88]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d025      	beq.n	8001304 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4910      	ldr	r1, [pc, #64]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
 80012c4:	e025      	b.n	8001312 <HAL_GPIO_Init+0x2da>
 80012c6:	bf00      	nop
 80012c8:	10320000 	.word	0x10320000
 80012cc:	10310000 	.word	0x10310000
 80012d0:	10220000 	.word	0x10220000
 80012d4:	10210000 	.word	0x10210000
 80012d8:	10120000 	.word	0x10120000
 80012dc:	10110000 	.word	0x10110000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40011000 	.word	0x40011000
 80012f4:	40011400 	.word	0x40011400
 80012f8:	40011800 	.word	0x40011800
 80012fc:	40011c00 	.word	0x40011c00
 8001300:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_GPIO_Init+0x324>)
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	43db      	mvns	r3, r3
 800130c:	4913      	ldr	r1, [pc, #76]	; (800135c <HAL_GPIO_Init+0x324>)
 800130e:	4013      	ands	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_GPIO_Init+0x324>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	490e      	ldr	r1, [pc, #56]	; (800135c <HAL_GPIO_Init+0x324>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_GPIO_Init+0x324>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	43db      	mvns	r3, r3
 8001334:	4909      	ldr	r1, [pc, #36]	; (800135c <HAL_GPIO_Init+0x324>)
 8001336:	4013      	ands	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	3301      	adds	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	f47f ae7e 	bne.w	800104c <HAL_GPIO_Init+0x14>
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	372c      	adds	r7, #44	; 0x2c
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	041a      	lsls	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e272      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8087 	beq.w	80014be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b0:	4b92      	ldr	r3, [pc, #584]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d00c      	beq.n	80013d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013bc:	4b8f      	ldr	r3, [pc, #572]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d112      	bne.n	80013ee <HAL_RCC_OscConfig+0x5e>
 80013c8:	4b8c      	ldr	r3, [pc, #560]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d4:	d10b      	bne.n	80013ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d6:	4b89      	ldr	r3, [pc, #548]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d06c      	beq.n	80014bc <HAL_RCC_OscConfig+0x12c>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d168      	bne.n	80014bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e24c      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x76>
 80013f8:	4b80      	ldr	r3, [pc, #512]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a7f      	ldr	r2, [pc, #508]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80013fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e02e      	b.n	8001464 <HAL_RCC_OscConfig+0xd4>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0x98>
 800140e:	4b7b      	ldr	r3, [pc, #492]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a7a      	ldr	r2, [pc, #488]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b78      	ldr	r3, [pc, #480]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a77      	ldr	r2, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0xd4>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0xbc>
 8001432:	4b72      	ldr	r3, [pc, #456]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a71      	ldr	r2, [pc, #452]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6e      	ldr	r2, [pc, #440]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0xd4>
 800144c:	4b6b      	ldr	r3, [pc, #428]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a6a      	ldr	r2, [pc, #424]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a67      	ldr	r2, [pc, #412]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001462:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fcf6 	bl	8000e5c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fcf2 	bl	8000e5c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e200      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0xe4>
 8001492:	e014      	b.n	80014be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fce2 	bl	8000e5c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fcde 	bl	8000e5c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1ec      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b53      	ldr	r3, [pc, #332]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x10c>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d063      	beq.n	8001592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ca:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d11c      	bne.n	800151c <HAL_RCC_OscConfig+0x18c>
 80014e2:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	4b43      	ldr	r3, [pc, #268]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x176>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1c0      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4939      	ldr	r1, [pc, #228]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	e03a      	b.n	8001592 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b36      	ldr	r3, [pc, #216]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fc97 	bl	8000e5c <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fc93 	bl	8000e5c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1a1      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4927      	ldr	r1, [pc, #156]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fc76 	bl	8000e5c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fc72 	bl	8000e5c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e180      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d03a      	beq.n	8001614 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d019      	beq.n	80015da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_RCC_OscConfig+0x274>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fc56 	bl	8000e5c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fc52 	bl	8000e5c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e160      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_RCC_OscConfig+0x26c>)
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f000 fa9c 	bl	8001b10 <RCC_Delay>
 80015d8:	e01c      	b.n	8001614 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_RCC_OscConfig+0x274>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fc3c 	bl	8000e5c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e6:	e00f      	b.n	8001608 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc38 	bl	8000e5c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d908      	bls.n	8001608 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e146      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	42420000 	.word	0x42420000
 8001604:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001608:	4b92      	ldr	r3, [pc, #584]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1e9      	bne.n	80015e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80a6 	beq.w	800176e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10d      	bne.n	800164e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a87      	ldr	r2, [pc, #540]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b85      	ldr	r3, [pc, #532]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_RCC_OscConfig+0x4c8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_RCC_OscConfig+0x4c8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <HAL_RCC_OscConfig+0x4c8>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001666:	f7ff fbf9 	bl	8000e5c <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166e:	f7ff fbf5 	bl	8000e5c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	; 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e103      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b75      	ldr	r3, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x4c8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x312>
 8001694:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	e02d      	b.n	80016fe <HAL_RCC_OscConfig+0x36e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x334>
 80016aa:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a69      	ldr	r2, [pc, #420]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	4b67      	ldr	r3, [pc, #412]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a66      	ldr	r2, [pc, #408]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	e01c      	b.n	80016fe <HAL_RCC_OscConfig+0x36e>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d10c      	bne.n	80016e6 <HAL_RCC_OscConfig+0x356>
 80016cc:	4b61      	ldr	r3, [pc, #388]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a60      	ldr	r2, [pc, #384]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a5d      	ldr	r2, [pc, #372]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	e00b      	b.n	80016fe <HAL_RCC_OscConfig+0x36e>
 80016e6:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a57      	ldr	r2, [pc, #348]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d015      	beq.n	8001732 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff fba9 	bl	8000e5c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7ff fba5 	bl	8000e5c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	; 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0b1      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001724:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ee      	beq.n	800170e <HAL_RCC_OscConfig+0x37e>
 8001730:	e014      	b.n	800175c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7ff fb93 	bl	8000e5c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff fb8f 	bl	8000e5c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	; 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e09b      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001750:	4b40      	ldr	r3, [pc, #256]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ee      	bne.n	800173a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d105      	bne.n	800176e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001762:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a3b      	ldr	r2, [pc, #236]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8087 	beq.w	8001886 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d061      	beq.n	8001848 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d146      	bne.n	800181a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_RCC_OscConfig+0x4cc>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fb63 	bl	8000e5c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff fb5f 	bl	8000e5c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e06d      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c0:	d108      	bne.n	80017d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4921      	ldr	r1, [pc, #132]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a19      	ldr	r1, [r3, #32]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	430b      	orrs	r3, r1
 80017e6:	491b      	ldr	r1, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x4cc>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fb33 	bl	8000e5c <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fa:	f7ff fb2f 	bl	8000e5c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e03d      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x46a>
 8001818:	e035      	b.n	8001886 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_RCC_OscConfig+0x4cc>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fb1c 	bl	8000e5c <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff fb18 	bl	8000e5c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e026      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x498>
 8001846:	e01e      	b.n	8001886 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d107      	bne.n	8001860 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e019      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
 8001854:	40021000 	.word	0x40021000
 8001858:	40007000 	.word	0x40007000
 800185c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_OscConfig+0x500>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	429a      	cmp	r2, r3
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0d0      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d910      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 0207 	bic.w	r2, r3, #7
 80018be:	4965      	ldr	r1, [pc, #404]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b8      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a58      	ldr	r2, [pc, #352]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001912:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	494d      	ldr	r1, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d040      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d115      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e07f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e073      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06b      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001972:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f023 0203 	bic.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4936      	ldr	r1, [pc, #216]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001984:	f7ff fa6a 	bl	8000e5c <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff fa66 	bl	8000e5c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e053      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 020c 	and.w	r2, r3, #12
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1eb      	bne.n	800198c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d210      	bcs.n	80019e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 0207 	bic.w	r2, r3, #7
 80019ca:	4922      	ldr	r1, [pc, #136]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e032      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4916      	ldr	r1, [pc, #88]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a22:	f000 f821 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a34:	5ccb      	ldrb	r3, [r1, r3]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1cc>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1d0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f9c8 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	08002438 	.word	0x08002438
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x30>
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x36>
 8001a96:	e027      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a9a:	613b      	str	r3, [r7, #16]
      break;
 8001a9c:	e027      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aa8:	5cd3      	ldrb	r3, [r2, r3]
 8001aaa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d010      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	0c5b      	lsrs	r3, r3, #17
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ac2:	5cd3      	ldrb	r3, [r2, r3]
 8001ac4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aca:	fb03 f202 	mul.w	r2, r3, r2
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e004      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	613b      	str	r3, [r7, #16]
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aea:	613b      	str	r3, [r7, #16]
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	693b      	ldr	r3, [r7, #16]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	007a1200 	.word	0x007a1200
 8001b04:	08002448 	.word	0x08002448
 8001b08:	08002458 	.word	0x08002458
 8001b0c:	003d0900 	.word	0x003d0900

08001b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <RCC_Delay+0x34>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <RCC_Delay+0x38>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0a5b      	lsrs	r3, r3, #9
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b2c:	bf00      	nop
  }
  while (Delay --);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	60fa      	str	r2, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f9      	bne.n	8001b2c <RCC_Delay+0x1c>
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	20000000 	.word	0x20000000
 8001b48:	10624dd3 	.word	0x10624dd3

08001b4c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_SRAM_Init+0x1c>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b66:	d101      	bne.n	8001b6c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e038      	b.n	8001bde <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f7ff f8b5 	bl	8000cf0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f000 f829 	bl	8001be8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	f000 f88b 	bl	8001cbc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6858      	ldr	r0, [r3, #4]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f000 f8b6 	bl	8001d24 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	6892      	ldr	r2, [r2, #8]
 8001bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	6892      	ldr	r2, [r2, #8]
 8001bcc:	f041 0101 	orr.w	r1, r1, #1
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	f023 0101 	bic.w	r1, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d102      	bne.n	8001c18 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8001c12:	2340      	movs	r3, #64	; 0x40
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e001      	b.n	8001c1c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8001c28:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8001c2e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8001c34:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8001c3a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8001c40:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8001c46:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8001c4c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8001c52:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8001c58:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <FSMC_NORSRAM_Init+0xd0>)
 8001c78:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c80:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001c88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	ea02 0103 	and.w	r1, r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4319      	orrs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	0008fb7f 	.word	0x0008fb7f

08001cbc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	041b      	lsls	r3, r3, #16
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	051b      	lsls	r3, r3, #20
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	3b02      	subs	r3, #2
 8001d02:	061b      	lsls	r3, r3, #24
 8001d04:	431a      	orrs	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	3201      	adds	r2, #1
 8001d10:	4319      	orrs	r1, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d38:	d11d      	bne.n	8001d76 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	6811      	ldr	r1, [r2, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	6852      	ldr	r2, [r2, #4]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	4311      	orrs	r1, r2
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	6892      	ldr	r2, [r2, #8]
 8001d56:	0212      	lsls	r2, r2, #8
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	6992      	ldr	r2, [r2, #24]
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	68d2      	ldr	r2, [r2, #12]
 8001d64:	0412      	lsls	r2, r2, #16
 8001d66:	430a      	orrs	r2, r1
 8001d68:	ea43 0102 	orr.w	r1, r3, r2
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001d74:	e005      	b.n	8001d82 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8001d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	cff00000 	.word	0xcff00000

08001d94 <__libc_init_array>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	2600      	movs	r6, #0
 8001d98:	4d0c      	ldr	r5, [pc, #48]	; (8001dcc <__libc_init_array+0x38>)
 8001d9a:	4c0d      	ldr	r4, [pc, #52]	; (8001dd0 <__libc_init_array+0x3c>)
 8001d9c:	1b64      	subs	r4, r4, r5
 8001d9e:	10a4      	asrs	r4, r4, #2
 8001da0:	42a6      	cmp	r6, r4
 8001da2:	d109      	bne.n	8001db8 <__libc_init_array+0x24>
 8001da4:	f000 f822 	bl	8001dec <_init>
 8001da8:	2600      	movs	r6, #0
 8001daa:	4d0a      	ldr	r5, [pc, #40]	; (8001dd4 <__libc_init_array+0x40>)
 8001dac:	4c0a      	ldr	r4, [pc, #40]	; (8001dd8 <__libc_init_array+0x44>)
 8001dae:	1b64      	subs	r4, r4, r5
 8001db0:	10a4      	asrs	r4, r4, #2
 8001db2:	42a6      	cmp	r6, r4
 8001db4:	d105      	bne.n	8001dc2 <__libc_init_array+0x2e>
 8001db6:	bd70      	pop	{r4, r5, r6, pc}
 8001db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dbc:	4798      	blx	r3
 8001dbe:	3601      	adds	r6, #1
 8001dc0:	e7ee      	b.n	8001da0 <__libc_init_array+0xc>
 8001dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc6:	4798      	blx	r3
 8001dc8:	3601      	adds	r6, #1
 8001dca:	e7f2      	b.n	8001db2 <__libc_init_array+0x1e>
 8001dcc:	0800245c 	.word	0x0800245c
 8001dd0:	0800245c 	.word	0x0800245c
 8001dd4:	0800245c 	.word	0x0800245c
 8001dd8:	08002460 	.word	0x08002460

08001ddc <memset>:
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4402      	add	r2, r0
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d100      	bne.n	8001de6 <memset+0xa>
 8001de4:	4770      	bx	lr
 8001de6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dea:	e7f9      	b.n	8001de0 <memset+0x4>

08001dec <_init>:
 8001dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dee:	bf00      	nop
 8001df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df2:	bc08      	pop	{r3}
 8001df4:	469e      	mov	lr, r3
 8001df6:	4770      	bx	lr

08001df8 <_fini>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	bf00      	nop
 8001dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfe:	bc08      	pop	{r3}
 8001e00:	469e      	mov	lr, r3
 8001e02:	4770      	bx	lr
