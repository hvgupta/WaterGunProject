
WaterGunProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c6c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005240  08005240  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005240  08005240  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005240  08005240  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000010  08005258  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  08005258  00020800  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7ab  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001edc  00000000  00000000  0002c7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004683  00000000  00000000  0002fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2ac  00000000  00000000  0003448b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9e6  00000000  00000000  00041737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd11d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  000dd170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	08004e38 	.word	0x08004e38

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	08004e38 	.word	0x08004e38

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_f2iz>:
 80007cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30f      	bcc.n	80007f6 <__aeabi_f2iz+0x2a>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d90d      	bls.n	80007fc <__aeabi_f2iz+0x30>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ec:	fa23 f002 	lsr.w	r0, r3, r2
 80007f0:	bf18      	it	ne
 80007f2:	4240      	negne	r0, r0
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr
 80007fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000800:	d101      	bne.n	8000806 <__aeabi_f2iz+0x3a>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	d105      	bne.n	8000812 <__aeabi_f2iz+0x46>
 8000806:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800080a:	bf08      	it	eq
 800080c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr

08000818 <__aeabi_f2uiz>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	d20e      	bcs.n	800083a <__aeabi_f2uiz+0x22>
 800081c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000820:	d30b      	bcc.n	800083a <__aeabi_f2uiz+0x22>
 8000822:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000826:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800082a:	d409      	bmi.n	8000840 <__aeabi_f2uiz+0x28>
 800082c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000834:	fa23 f002 	lsr.w	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr
 8000840:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000844:	d101      	bne.n	800084a <__aeabi_f2uiz+0x32>
 8000846:	0242      	lsls	r2, r0, #9
 8000848:	d102      	bne.n	8000850 <__aeabi_f2uiz+0x38>
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	e002      	b.n	8000868 <Delay+0x10>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3b01      	subs	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f9      	bne.n	8000862 <Delay+0xa>
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <LCD_INIT>:

void LCD_INIT ( void )
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000880:	2001      	movs	r0, #1
 8000882:	f000 f829 	bl	80008d8 <LCD_BackLed_Control>
	LCD_Rst();
 8000886:	f000 f80f 	bl	80008a8 <LCD_Rst>
	LCD_REG_Config();
 800088a:	f000 f85f 	bl	800094c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800088e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000898:	22f0      	movs	r2, #240	; 0xf0
 800089a:	2100      	movs	r1, #0
 800089c:	2000      	movs	r0, #0
 800089e:	f000 f9e6 	bl	8000c6e <LCD_Clear>
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <LCD_Rst>:



void LCD_Rst ( void )
{			
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2102      	movs	r1, #2
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <LCD_Rst+0x28>)
 80008b2:	f001 fe55 	bl	8002560 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <LCD_Rst+0x2c>)
 80008b8:	f7ff ffce 	bl	8000858 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2102      	movs	r1, #2
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <LCD_Rst+0x28>)
 80008c2:	f001 fe4d 	bl	8002560 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80008c6:	4803      	ldr	r0, [pc, #12]	; (80008d4 <LCD_Rst+0x2c>)
 80008c8:	f7ff ffc6 	bl	8000858 <Delay>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40011800 	.word	0x40011800
 80008d4:	0002bffc 	.word	0x0002bffc

080008d8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <LCD_BackLed_Control+0x34>)
 80008f0:	f001 fe36 	bl	8002560 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80008f4:	e005      	b.n	8000902 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <LCD_BackLed_Control+0x34>)
 80008fe:	f001 fe2f 	bl	8002560 <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40011400 	.word	0x40011400

08000910 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800091a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	8013      	strh	r3, [r2, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <LCD_Write_Data+0x1c>)
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	8013      	strh	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	60020000 	.word	0x60020000

0800094c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000950:	20cf      	movs	r0, #207	; 0xcf
 8000952:	f7ff ffdd 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff ffe8 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800095c:	2081      	movs	r0, #129	; 0x81
 800095e:	f7ff ffe5 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000962:	2030      	movs	r0, #48	; 0x30
 8000964:	f7ff ffe2 	bl	800092c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000968:	20ed      	movs	r0, #237	; 0xed
 800096a:	f7ff ffd1 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800096e:	2064      	movs	r0, #100	; 0x64
 8000970:	f7ff ffdc 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000974:	2003      	movs	r0, #3
 8000976:	f7ff ffd9 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800097a:	2012      	movs	r0, #18
 800097c:	f7ff ffd6 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000980:	2081      	movs	r0, #129	; 0x81
 8000982:	f7ff ffd3 	bl	800092c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000986:	20e8      	movs	r0, #232	; 0xe8
 8000988:	f7ff ffc2 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800098c:	2085      	movs	r0, #133	; 0x85
 800098e:	f7ff ffcd 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000992:	2010      	movs	r0, #16
 8000994:	f7ff ffca 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000998:	2078      	movs	r0, #120	; 0x78
 800099a:	f7ff ffc7 	bl	800092c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800099e:	20cb      	movs	r0, #203	; 0xcb
 80009a0:	f7ff ffb6 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80009a4:	2039      	movs	r0, #57	; 0x39
 80009a6:	f7ff ffc1 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80009aa:	202c      	movs	r0, #44	; 0x2c
 80009ac:	f7ff ffbe 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ffbb 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80009b6:	2034      	movs	r0, #52	; 0x34
 80009b8:	f7ff ffb8 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff ffb5 	bl	800092c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80009c2:	20f7      	movs	r0, #247	; 0xf7
 80009c4:	f7ff ffa4 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80009c8:	2020      	movs	r0, #32
 80009ca:	f7ff ffaf 	bl	800092c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80009ce:	20ea      	movs	r0, #234	; 0xea
 80009d0:	f7ff ff9e 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff ffa9 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ffa6 	bl	800092c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80009e0:	20b1      	movs	r0, #177	; 0xb1
 80009e2:	f7ff ff95 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff ffa0 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80009ec:	201b      	movs	r0, #27
 80009ee:	f7ff ff9d 	bl	800092c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80009f2:	20b6      	movs	r0, #182	; 0xb6
 80009f4:	f7ff ff8c 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80009f8:	200a      	movs	r0, #10
 80009fa:	f7ff ff97 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80009fe:	20a2      	movs	r0, #162	; 0xa2
 8000a00:	f7ff ff94 	bl	800092c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000a04:	20c0      	movs	r0, #192	; 0xc0
 8000a06:	f7ff ff83 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000a0a:	2035      	movs	r0, #53	; 0x35
 8000a0c:	f7ff ff8e 	bl	800092c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000a10:	20c1      	movs	r0, #193	; 0xc1
 8000a12:	f7ff ff7d 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000a16:	2011      	movs	r0, #17
 8000a18:	f7ff ff88 	bl	800092c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000a1c:	20c5      	movs	r0, #197	; 0xc5
 8000a1e:	f7ff ff77 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000a22:	2045      	movs	r0, #69	; 0x45
 8000a24:	f7ff ff82 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000a28:	2045      	movs	r0, #69	; 0x45
 8000a2a:	f7ff ff7f 	bl	800092c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000a2e:	20c7      	movs	r0, #199	; 0xc7
 8000a30:	f7ff ff6e 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000a34:	20a2      	movs	r0, #162	; 0xa2
 8000a36:	f7ff ff79 	bl	800092c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000a3a:	20f2      	movs	r0, #242	; 0xf2
 8000a3c:	f7ff ff68 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff ff73 	bl	800092c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000a46:	2026      	movs	r0, #38	; 0x26
 8000a48:	f7ff ff62 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ff6d 	bl	800092c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000a52:	20e0      	movs	r0, #224	; 0xe0
 8000a54:	f7ff ff5c 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000a58:	200f      	movs	r0, #15
 8000a5a:	f7ff ff67 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000a5e:	2026      	movs	r0, #38	; 0x26
 8000a60:	f7ff ff64 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000a64:	2024      	movs	r0, #36	; 0x24
 8000a66:	f7ff ff61 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000a6a:	200b      	movs	r0, #11
 8000a6c:	f7ff ff5e 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000a70:	200e      	movs	r0, #14
 8000a72:	f7ff ff5b 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000a76:	2009      	movs	r0, #9
 8000a78:	f7ff ff58 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000a7c:	2054      	movs	r0, #84	; 0x54
 8000a7e:	f7ff ff55 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000a82:	20a8      	movs	r0, #168	; 0xa8
 8000a84:	f7ff ff52 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000a88:	2046      	movs	r0, #70	; 0x46
 8000a8a:	f7ff ff4f 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000a8e:	200c      	movs	r0, #12
 8000a90:	f7ff ff4c 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000a94:	2017      	movs	r0, #23
 8000a96:	f7ff ff49 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000a9a:	2009      	movs	r0, #9
 8000a9c:	f7ff ff46 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f7ff ff43 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000aa6:	2007      	movs	r0, #7
 8000aa8:	f7ff ff40 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ff3d 	bl	800092c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000ab2:	20e1      	movs	r0, #225	; 0xe1
 8000ab4:	f7ff ff2c 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff ff37 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000abe:	2019      	movs	r0, #25
 8000ac0:	f7ff ff34 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000ac4:	201b      	movs	r0, #27
 8000ac6:	f7ff ff31 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000aca:	2004      	movs	r0, #4
 8000acc:	f7ff ff2e 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000ad0:	2010      	movs	r0, #16
 8000ad2:	f7ff ff2b 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff28 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000adc:	202a      	movs	r0, #42	; 0x2a
 8000ade:	f7ff ff25 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000ae2:	2047      	movs	r0, #71	; 0x47
 8000ae4:	f7ff ff22 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000ae8:	2039      	movs	r0, #57	; 0x39
 8000aea:	f7ff ff1f 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000aee:	2003      	movs	r0, #3
 8000af0:	f7ff ff1c 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000af4:	2006      	movs	r0, #6
 8000af6:	f7ff ff19 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000afa:	2006      	movs	r0, #6
 8000afc:	f7ff ff16 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000b00:	2030      	movs	r0, #48	; 0x30
 8000b02:	f7ff ff13 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000b06:	2038      	movs	r0, #56	; 0x38
 8000b08:	f7ff ff10 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000b0c:	200f      	movs	r0, #15
 8000b0e:	f7ff ff0d 	bl	800092c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000b12:	2036      	movs	r0, #54	; 0x36
 8000b14:	f7ff fefc 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000b18:	20c8      	movs	r0, #200	; 0xc8
 8000b1a:	f7ff ff07 	bl	800092c <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000b1e:	202a      	movs	r0, #42	; 0x2a
 8000b20:	f7ff fef6 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff ff01 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fefe 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fefb 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000b36:	20ef      	movs	r0, #239	; 0xef
 8000b38:	f7ff fef8 	bl	800092c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000b3c:	202b      	movs	r0, #43	; 0x2b
 8000b3e:	f7ff fee7 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff fef2 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff feef 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff feec 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000b54:	203f      	movs	r0, #63	; 0x3f
 8000b56:	f7ff fee9 	bl	800092c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000b5a:	203a      	movs	r0, #58	; 0x3a
 8000b5c:	f7ff fed8 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000b60:	2055      	movs	r0, #85	; 0x55
 8000b62:	f7ff fee3 	bl	800092c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000b66:	2011      	movs	r0, #17
 8000b68:	f7ff fed2 	bl	8000910 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <LCD_REG_Config+0x230>)
 8000b6e:	f7ff fe73 	bl	8000858 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000b72:	2029      	movs	r0, #41	; 0x29
 8000b74:	f7ff fecc 	bl	8000910 <LCD_Write_Cmd>
	
	
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	0002bffc 	.word	0x0002bffc

08000b80 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4604      	mov	r4, r0
 8000b88:	4608      	mov	r0, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4623      	mov	r3, r4
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	4603      	mov	r3, r0
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	807b      	strh	r3, [r7, #2]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000b9e:	202a      	movs	r0, #42	; 0x2a
 8000ba0:	f7ff feb6 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff febe 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff feb8 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	121b      	asrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff feaf 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000bce:	88fa      	ldrh	r2, [r7, #6]
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fea4 	bl	800092c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000be4:	202b      	movs	r0, #43	; 0x2b
 8000be6:	f7ff fe93 	bl	8000910 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000bea:	88bb      	ldrh	r3, [r7, #4]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe9b 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe95 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000c02:	88ba      	ldrh	r2, [r7, #4]
 8000c04:	883b      	ldrh	r3, [r7, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	121b      	asrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fe8c 	bl	800092c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000c14:	88ba      	ldrh	r2, [r7, #4]
 8000c16:	883b      	ldrh	r3, [r7, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fe81 	bl	800092c <LCD_Write_Data>
	
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}

08000c32 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000c42:	202c      	movs	r0, #44	; 0x2c
 8000c44:	f7ff fe64 	bl	8000910 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	e006      	b.n	8000c5c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fe6b 	bl	800092c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3f4      	bcc.n	8000c4e <LCD_FillColor+0x1c>
		
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4604      	mov	r4, r0
 8000c76:	4608      	mov	r0, r1
 8000c78:	4611      	mov	r1, r2
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4623      	mov	r3, r4
 8000c7e:	80fb      	strh	r3, [r7, #6]
 8000c80:	4603      	mov	r3, r0
 8000c82:	80bb      	strh	r3, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000c8c:	883b      	ldrh	r3, [r7, #0]
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	88b9      	ldrh	r1, [r7, #4]
 8000c92:	88f8      	ldrh	r0, [r7, #6]
 8000c94:	f7ff ff74 	bl	8000b80 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	883a      	ldrh	r2, [r7, #0]
 8000c9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	8b3b      	ldrh	r3, [r7, #24]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	f7ff ffc3 	bl	8000c32 <LCD_FillColor>
	
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}

08000cb4 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f003 fa99 	bl	80041f4 <tanf>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag = 0;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000cd8:	f002 fae8 	bl	80032ac <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000002c 	.word	0x2000002c
 8000cf0:	200001f0 	.word	0x200001f0

08000cf4 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	b2d9      	uxtb	r1, r3
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <Set_LED+0x54>)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	b2d9      	uxtb	r1, r3
 8000d12:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <Set_LED+0x54>)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	b2d9      	uxtb	r1, r3
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <Set_LED+0x54>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2d9      	uxtb	r1, r3
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <Set_LED+0x54>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	460a      	mov	r2, r1
 8000d3c:	70da      	strb	r2, [r3, #3]
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000100 	.word	0x20000100

08000d4c <Set_Brightness>:

int PI = 3.14159265;

void Set_Brightness (int brightness)  // 0-45
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	if (brightness > 45) brightness = 45;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b2d      	cmp	r3, #45	; 0x2d
 8000d58:	dd01      	ble.n	8000d5e <Set_Brightness+0x12>
 8000d5a:	232d      	movs	r3, #45	; 0x2d
 8000d5c:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b1d      	cmp	r3, #29
 8000d66:	dc4e      	bgt.n	8000e06 <Set_Brightness+0xba>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000d68:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <Set_Brightness+0xc4>)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000d70:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <Set_Brightness+0xc8>)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000d78:	2301      	movs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	dc3d      	bgt.n	8000dfe <Set_Brightness+0xb2>
		{
			float angle = 90-brightness;  // in degrees
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fb05 	bl	8000398 <__aeabi_i2f>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <Set_Brightness+0xcc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fafe 	bl	8000398 <__aeabi_i2f>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	68f9      	ldr	r1, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb4d 	bl	8000440 <__aeabi_fmul>
 8000da6:	4603      	mov	r3, r0
 8000da8:	491c      	ldr	r1, [pc, #112]	; (8000e1c <Set_Brightness+0xd0>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fbfc 	bl	80005a8 <__aeabi_fdiv>
 8000db0:	4603      	mov	r3, r0
 8000db2:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000db4:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <Set_Brightness+0xc4>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	441a      	add	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fae8 	bl	8000398 <__aeabi_i2f>
 8000dc8:	4604      	mov	r4, r0
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff ff72 	bl	8000cb4 <_ZSt3tanf>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff fbe7 	bl	80005a8 <__aeabi_fdiv>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fd1b 	bl	8000818 <__aeabi_f2uiz>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b2d9      	uxtb	r1, r3
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <Set_Brightness+0xc8>)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	441a      	add	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4413      	add	r3, r2
 8000df2:	460a      	mov	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e7be      	b.n	8000d7c <Set_Brightness+0x30>
	for (int i=0; i<MAX_LED; i++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e7ad      	b.n	8000d62 <Set_Brightness+0x16>
		}
	}
}
 8000e06:	bf00      	nop
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd90      	pop	{r4, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000100 	.word	0x20000100
 8000e14:	20000178 	.word	0x20000178
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	43340000 	.word	0x43340000

08000e20 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	2b1d      	cmp	r3, #29
 8000e32:	dc37      	bgt.n	8000ea4 <WS2812_Send+0x84>
	{
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000e34:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <WS2812_Send+0xcc>)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	041a      	lsls	r2, r3, #16
 8000e40:	492a      	ldr	r1, [pc, #168]	; (8000eec <WS2812_Send+0xcc>)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	4927      	ldr	r1, [pc, #156]	; (8000eec <WS2812_Send+0xcc>)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	78db      	ldrb	r3, [r3, #3]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	607b      	str	r3, [r7, #4]

		for (int i=23; i>=0; i--)
 8000e5c:	2317      	movs	r3, #23
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db1a      	blt.n	8000e9c <WS2812_Send+0x7c>
		{
			if (color&(1<<i))
 8000e66:	2201      	movs	r2, #1
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <WS2812_Send+0x64>
			{
				//pwmData[indx] = 58;  // 64% of 90
				pwmData[indx] = 60;  // 2/3 of 90
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <WS2812_Send+0xd0>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	213c      	movs	r1, #60	; 0x3c
 8000e7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e82:	e004      	b.n	8000e8e <WS2812_Send+0x6e>
			}

			else
			{
				//pwmData[indx] = 29;  // 32% of 90
				pwmData[indx] = 30;  // 1/3 of 90
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <WS2812_Send+0xd0>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	211e      	movs	r1, #30
 8000e8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	e7e1      	b.n	8000e60 <WS2812_Send+0x40>
	for (int i= 0; i<MAX_LED; i++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	e7c4      	b.n	8000e2e <WS2812_Send+0xe>
		}

	}

	for (int i=0; i<50; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2b31      	cmp	r3, #49	; 0x31
 8000eac:	dc0b      	bgt.n	8000ec6 <WS2812_Send+0xa6>
	{
		pwmData[indx] = 0;
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <WS2812_Send+0xd0>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	e7f0      	b.n	8000ea8 <WS2812_Send+0x88>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <WS2812_Send+0xd0>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <WS2812_Send+0xd4>)
 8000ed0:	f002 f83a 	bl	8002f48 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <WS2812_Send+0xd8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d100      	bne.n	8000ede <WS2812_Send+0xbe>
 8000edc:	e7fa      	b.n	8000ed4 <WS2812_Send+0xb4>
	datasentflag = 0;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <WS2812_Send+0xd8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000178 	.word	0x20000178
 8000ef0:	200001f4 	.word	0x200001f4
 8000ef4:	2000002c 	.word	0x2000002c
 8000ef8:	200001f0 	.word	0x200001f0

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f000 fbbd 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f834 	bl	8000f72 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 f95d 	bl	80011c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0e:	f000 f93d 	bl	800118c <MX_DMA_Init>
  MX_FSMC_Init();
 8000f12:	f000 f9e9 	bl	80012e8 <MX_FSMC_Init>
  MX_TIM1_Init();
 8000f16:	f000 f87b 	bl	8001010 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000f1a:	f7ff fcae 	bl	800087a <LCD_INIT>

  DEBUG_DELAY();
  LCD_Write_Cmd(0x36);
 8000f1e:	2036      	movs	r0, #54	; 0x36
 8000f20:	f7ff fcf6 	bl	8000910 <LCD_Write_Cmd>
  LCD_Write_Cmd(0xC8);
 8000f24:	20c8      	movs	r0, #200	; 0xc8
 8000f26:	f7ff fcf3 	bl	8000910 <LCD_Write_Cmd>
  {
//	  const char* Name = "Gupta";
//	  LCD_DrawString(100,100,Name);
//	  reloadingProcess::Reload testobj(750);
//	  testobj.gunReloading();
	  for (int i=0; i<30+4; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b21      	cmp	r3, #33	; 0x21
 8000f32:	dcfa      	bgt.n	8000f2a <main+0x2e>
	  {
		  if (i<30)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b1d      	cmp	r3, #29
 8000f38:	dc05      	bgt.n	8000f46 <main+0x4a>
			  Set_LED(i, 0, 0, 255);
 8000f3a:	23ff      	movs	r3, #255	; 0xff
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fed7 	bl	8000cf4 <Set_LED>
		  if ( (i-4) >= 0 )
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	dd06      	ble.n	8000f5a <main+0x5e>
			  Set_LED(i-4, 0, 0, 0);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1f18      	subs	r0, r3, #4
 8000f50:	2300      	movs	r3, #0
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	f7ff fecd 	bl	8000cf4 <Set_LED>
		  Set_Brightness(10);
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f7ff fef6 	bl	8000d4c <Set_Brightness>
		  WS2812_Send();
 8000f60:	f7ff ff5e 	bl	8000e20 <WS2812_Send>
		  HAL_Delay (50);
 8000f64:	2032      	movs	r0, #50	; 0x32
 8000f66:	f000 fbed 	bl	8001744 <HAL_Delay>
	  for (int i=0; i<30+4; i++)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	e7dd      	b.n	8000f2e <main+0x32>

08000f72 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b090      	sub	sp, #64	; 0x40
 8000f76:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	2228      	movs	r2, #40	; 0x28
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 ff51 	bl	8004e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fae8 	bl	8002590 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000fd0:	f000 f9f4 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2102      	movs	r1, #2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fd50 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf14      	ite	ne
 8000ffa:	2301      	movne	r3, #1
 8000ffc:	2300      	moveq	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001004:	f000 f9da 	bl	80013bc <Error_Handler>
  }
}
 8001008:	bf00      	nop
 800100a:	3740      	adds	r7, #64	; 0x40
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b096      	sub	sp, #88	; 0x58
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2220      	movs	r2, #32
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f003 feed 	bl	8004e28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800104e:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <MX_TIM1_Init+0x174>)
 8001050:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <MX_TIM1_Init+0x178>)
 8001052:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001054:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <MX_TIM1_Init+0x174>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <MX_TIM1_Init+0x174>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 8001060:	4b48      	ldr	r3, [pc, #288]	; (8001184 <MX_TIM1_Init+0x174>)
 8001062:	2259      	movs	r2, #89	; 0x59
 8001064:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b47      	ldr	r3, [pc, #284]	; (8001184 <MX_TIM1_Init+0x174>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800106c:	4b45      	ldr	r3, [pc, #276]	; (8001184 <MX_TIM1_Init+0x174>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <MX_TIM1_Init+0x174>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001078:	4842      	ldr	r0, [pc, #264]	; (8001184 <MX_TIM1_Init+0x174>)
 800107a:	f001 febe 	bl	8002dfa <HAL_TIM_Base_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800108e:	f000 f995 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800109c:	4619      	mov	r1, r3
 800109e:	4839      	ldr	r0, [pc, #228]	; (8001184 <MX_TIM1_Init+0x174>)
 80010a0:	f002 fa8c 	bl	80035bc <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf14      	ite	ne
 80010aa:	2301      	movne	r3, #1
 80010ac:	2300      	moveq	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010b4:	f000 f982 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b8:	4832      	ldr	r0, [pc, #200]	; (8001184 <MX_TIM1_Init+0x174>)
 80010ba:	f001 feed 	bl	8002e98 <HAL_TIM_PWM_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010ce:	f000 f975 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010de:	4619      	mov	r1, r3
 80010e0:	4828      	ldr	r0, [pc, #160]	; (8001184 <MX_TIM1_Init+0x174>)
 80010e2:	f002 fef3 	bl	8003ecc <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf14      	ite	ne
 80010ec:	2301      	movne	r3, #1
 80010ee:	2300      	moveq	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80010f6:	f000 f961 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fa:	2360      	movs	r3, #96	; 0x60
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	4819      	ldr	r0, [pc, #100]	; (8001184 <MX_TIM1_Init+0x174>)
 8001120:	f002 f98e 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf14      	ite	ne
 800112a:	2301      	movne	r3, #1
 800112c:	2300      	moveq	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001134:	f000 f942 	bl	80013bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800114c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001150:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	480a      	ldr	r0, [pc, #40]	; (8001184 <MX_TIM1_Init+0x174>)
 800115c:	f002 ff22 	bl	8003fa4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001170:	f000 f924 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <MX_TIM1_Init+0x174>)
 8001176:	f000 f9a3 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 800117a:	bf00      	nop
 800117c:	3758      	adds	r7, #88	; 0x58
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000002c 	.word	0x2000002c
 8001188:	40012c00 	.word	0x40012c00

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_DMA_Init+0x38>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <MX_DMA_Init+0x38>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_DMA_Init+0x38>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	200c      	movs	r0, #12
 80011b0:	f000 fbc3 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011b4:	200c      	movs	r0, #12
 80011b6:	f000 fbdc 	bl	8001972 <HAL_NVIC_EnableIRQ>

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <MX_GPIO_Init+0x110>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a3d      	ldr	r2, [pc, #244]	; (80012d8 <MX_GPIO_Init+0x110>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <MX_GPIO_Init+0x110>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f4:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <MX_GPIO_Init+0x110>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <MX_GPIO_Init+0x110>)
 80011fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <MX_GPIO_Init+0x110>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <MX_GPIO_Init+0x110>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <MX_GPIO_Init+0x110>)
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MX_GPIO_Init+0x110>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_GPIO_Init+0x110>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <MX_GPIO_Init+0x110>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_GPIO_Init+0x110>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0x110>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <MX_GPIO_Init+0x110>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_GPIO_Init+0x110>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	4820      	ldr	r0, [pc, #128]	; (80012dc <MX_GPIO_Init+0x114>)
 800125c:	f001 f980 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <MX_GPIO_Init+0x118>)
 8001268:	f001 f97a 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2102      	movs	r1, #2
 8001270:	481c      	ldr	r0, [pc, #112]	; (80012e4 <MX_GPIO_Init+0x11c>)
 8001272:	f001 f975 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	4619      	mov	r1, r3
 800128e:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_GPIO_Init+0x114>)
 8001290:	f000 ffd2 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001294:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_GPIO_Init+0x118>)
 80012ae:	f000 ffc3 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_GPIO_Init+0x11c>)
 80012ca:	f000 ffb5 	bl	8002238 <HAL_GPIO_Init>

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40011400 	.word	0x40011400
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	40011800 	.word	0x40011800

080012e8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	615a      	str	r2, [r3, #20]
 80012fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001302:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001306:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <MX_FSMC_Init+0xc8>)
 800130a:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <MX_FSMC_Init+0xcc>)
 800130c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <MX_FSMC_Init+0xc8>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001322:	2210      	movs	r2, #16
 8001324:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_FSMC_Init+0xc8>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_FSMC_Init+0xc8>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001340:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001348:	2200      	movs	r2, #0
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_FSMC_Init+0xc8>)
 800134e:	2200      	movs	r2, #0
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001354:	2200      	movs	r2, #0
 8001356:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_FSMC_Init+0xc8>)
 800135a:	2200      	movs	r2, #0
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800135e:	230f      	movs	r3, #15
 8001360:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001362:	230f      	movs	r3, #15
 8001364:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001366:	23ff      	movs	r3, #255	; 0xff
 8001368:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800136a:	230f      	movs	r3, #15
 800136c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800136e:	2310      	movs	r3, #16
 8001370:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001372:	2311      	movs	r3, #17
 8001374:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <MX_FSMC_Init+0xc8>)
 8001382:	f001 fced 	bl	8002d60 <HAL_SRAM_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8001396:	f000 f811 	bl	80013bc <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_FSMC_Init+0xd0>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <MX_FSMC_Init+0xd0>)
 80013a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a4:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200000b8 	.word	0x200000b8
 80013b4:	a0000104 	.word	0xa0000104
 80013b8:	40010000 	.word	0x40010000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_MspInit+0x5c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_MspInit+0x5c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_MspInit+0x60>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_MspInit+0x60>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000

0800142c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_TIM_Base_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d133      	bne.n	80014a6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_TIM_Base_MspInit+0x88>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <HAL_TIM_Base_MspInit+0x88>)
 8001444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_TIM_Base_MspInit+0x88>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 8001458:	4a18      	ldr	r2, [pc, #96]	; (80014bc <HAL_TIM_Base_MspInit+0x90>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 800145e:	2210      	movs	r2, #16
 8001460:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 8001470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001474:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 8001478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800148a:	480b      	ldr	r0, [pc, #44]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 800148c:	f000 fa8c 	bl	80019a8 <HAL_DMA_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001496:	f7ff ff91 	bl	80013bc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_TIM_Base_MspInit+0x8c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40012c00 	.word	0x40012c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	20000074 	.word	0x20000074
 80014bc:	4002001c 	.word	0x4002001c

080014c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_TIM_MspPostInit+0x5c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d118      	bne.n	8001512 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_TIM_MspPostInit+0x60>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_TIM_MspPostInit+0x60>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_TIM_MspPostInit+0x60>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2302      	movs	r3, #2
 8001504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_TIM_MspPostInit+0x64>)
 800150e:	f000 fe93 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40012c00 	.word	0x40012c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40010800 	.word	0x40010800

08001528 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_FSMC_MspInit+0x78>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d129      	bne.n	8001598 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_FSMC_MspInit+0x78>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_FSMC_MspInit+0x7c>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <HAL_FSMC_MspInit+0x7c>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6153      	str	r3, [r2, #20]
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_FSMC_MspInit+0x7c>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001562:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001566:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4619      	mov	r1, r3
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <HAL_FSMC_MspInit+0x80>)
 8001578:	f000 fe5e 	bl	8002238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800157c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001580:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	4619      	mov	r1, r3
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_FSMC_MspInit+0x84>)
 8001592:	f000 fe51 	bl	8002238 <HAL_GPIO_Init>
 8001596:	e000      	b.n	800159a <HAL_FSMC_MspInit+0x72>
    return;
 8001598:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200007f8 	.word	0x200007f8
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40011800 	.word	0x40011800
 80015ac:	40011400 	.word	0x40011400

080015b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015b8:	f7ff ffb6 	bl	8001528 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f87f 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA1_Channel2_IRQHandler+0x10>)
 800161a:	f000 fba3 	bl	8001d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000074 	.word	0x20000074

08001628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001634:	f7ff fff8 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800163a:	490c      	ldr	r1, [pc, #48]	; (800166c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800163c:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001650:	4c09      	ldr	r4, [pc, #36]	; (8001678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165e:	f003 fbbf 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001662:	f7ff fc4b 	bl	8000efc <main>
  bx lr
 8001666:	4770      	bx	lr
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001670:	08005248 	.word	0x08005248
  ldr r2, =_sbss
 8001674:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001678:	20000800 	.word	0x20000800

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x28>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x28>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f947 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fe94 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f95f 	bl	800198e <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f927 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000004 	.word	0x20000004
 8001704:	2000000c 	.word	0x2000000c
 8001708:	20000008 	.word	0x20000008

0800170c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_IncTick+0x1c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_IncTick+0x20>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a03      	ldr	r2, [pc, #12]	; (800172c <HAL_IncTick+0x20>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	2000000c 	.word	0x2000000c
 800172c:	200007fc 	.word	0x200007fc

08001730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <HAL_GetTick+0x10>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	200007fc 	.word	0x200007fc

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff fff0 	bl	8001730 <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffe0 	bl	8001730 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000000c 	.word	0x2000000c

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4906      	ldr	r1, [pc, #24]	; (8001824 <__NVIC_EnableIRQ+0x34>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff90 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff2d 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff42 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff35 	bl	80017f0 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e059      	b.n	8001a72 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_DMA_Init+0xd4>)
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d80f      	bhi.n	80019ea <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_DMA_Init+0xd8>)
 80019d2:	4413      	add	r3, r2
 80019d4:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <HAL_DMA_Init+0xdc>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	009a      	lsls	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <HAL_DMA_Init+0xe0>)
 80019e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80019e8:	e00e      	b.n	8001a08 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_DMA_Init+0xe4>)
 80019f2:	4413      	add	r3, r2
 80019f4:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <HAL_DMA_Init+0xdc>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	009a      	lsls	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_DMA_Init+0xe8>)
 8001a06:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40020407 	.word	0x40020407
 8001a80:	bffdfff8 	.word	0xbffdfff8
 8001a84:	cccccccd 	.word	0xcccccccd
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	bffdfbf8 	.word	0xbffdfbf8
 8001a90:	40020400 	.word	0x40020400

08001a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Start_IT+0x20>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e04a      	b.n	8001b4a <HAL_DMA_Start_IT+0xb6>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d13a      	bne.n	8001b3c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fb76 	bl	80021dc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 020e 	orr.w	r2, r2, #14
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e00f      	b.n	8001b2a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0204 	bic.w	r2, r2, #4
 8001b18:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 020a 	orr.w	r2, r2, #10
 8001b28:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e005      	b.n	8001b48 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d005      	beq.n	8001b76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e0d6      	b.n	8001d24 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 020e 	bic.w	r2, r2, #14
 8001b84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <HAL_DMA_Abort_IT+0x1dc>)
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d958      	bls.n	8001c54 <HAL_DMA_Abort_IT+0x100>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <HAL_DMA_Abort_IT+0x1e0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04f      	beq.n	8001c4c <HAL_DMA_Abort_IT+0xf8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a61      	ldr	r2, [pc, #388]	; (8001d38 <HAL_DMA_Abort_IT+0x1e4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d048      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xf4>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_DMA_Abort_IT+0x1e8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d040      	beq.n	8001c42 <HAL_DMA_Abort_IT+0xee>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5e      	ldr	r2, [pc, #376]	; (8001d40 <HAL_DMA_Abort_IT+0x1ec>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d038      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xe8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5d      	ldr	r2, [pc, #372]	; (8001d44 <HAL_DMA_Abort_IT+0x1f0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d030      	beq.n	8001c36 <HAL_DMA_Abort_IT+0xe2>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5b      	ldr	r2, [pc, #364]	; (8001d48 <HAL_DMA_Abort_IT+0x1f4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d028      	beq.n	8001c30 <HAL_DMA_Abort_IT+0xdc>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a53      	ldr	r2, [pc, #332]	; (8001d30 <HAL_DMA_Abort_IT+0x1dc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d020      	beq.n	8001c2a <HAL_DMA_Abort_IT+0xd6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_DMA_Abort_IT+0x1f8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_DMA_Abort_IT+0xd2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_DMA_Abort_IT+0x1fc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d012      	beq.n	8001c22 <HAL_DMA_Abort_IT+0xce>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_DMA_Abort_IT+0x200>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00a      	beq.n	8001c1c <HAL_DMA_Abort_IT+0xc8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a53      	ldr	r2, [pc, #332]	; (8001d58 <HAL_DMA_Abort_IT+0x204>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d102      	bne.n	8001c16 <HAL_DMA_Abort_IT+0xc2>
 8001c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c14:	e01b      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c1a:	e018      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c20:	e015      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c22:	2310      	movs	r3, #16
 8001c24:	e013      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e011      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c2e:	e00e      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c34:	e00b      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c3a:	e008      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c40:	e005      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c46:	e002      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c48:	2310      	movs	r3, #16
 8001c4a:	e000      	b.n	8001c4e <HAL_DMA_Abort_IT+0xfa>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <HAL_DMA_Abort_IT+0x208>)
 8001c50:	6053      	str	r3, [r2, #4]
 8001c52:	e057      	b.n	8001d04 <HAL_DMA_Abort_IT+0x1b0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a36      	ldr	r2, [pc, #216]	; (8001d34 <HAL_DMA_Abort_IT+0x1e0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d04f      	beq.n	8001cfe <HAL_DMA_Abort_IT+0x1aa>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a35      	ldr	r2, [pc, #212]	; (8001d38 <HAL_DMA_Abort_IT+0x1e4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d048      	beq.n	8001cfa <HAL_DMA_Abort_IT+0x1a6>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a33      	ldr	r2, [pc, #204]	; (8001d3c <HAL_DMA_Abort_IT+0x1e8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d040      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x1a0>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <HAL_DMA_Abort_IT+0x1ec>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d038      	beq.n	8001cee <HAL_DMA_Abort_IT+0x19a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a30      	ldr	r2, [pc, #192]	; (8001d44 <HAL_DMA_Abort_IT+0x1f0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d030      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x194>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <HAL_DMA_Abort_IT+0x1f4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d028      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x18e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <HAL_DMA_Abort_IT+0x1dc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d020      	beq.n	8001cdc <HAL_DMA_Abort_IT+0x188>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <HAL_DMA_Abort_IT+0x1f8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d019      	beq.n	8001cd8 <HAL_DMA_Abort_IT+0x184>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <HAL_DMA_Abort_IT+0x1fc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d012      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x180>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_DMA_Abort_IT+0x200>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00a      	beq.n	8001cce <HAL_DMA_Abort_IT+0x17a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <HAL_DMA_Abort_IT+0x204>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d102      	bne.n	8001cc8 <HAL_DMA_Abort_IT+0x174>
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	e01b      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ccc:	e018      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd2:	e015      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	e013      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e011      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce0:	e00e      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001ce2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ce6:	e00b      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cec:	e008      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	e005      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf8:	e002      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	e000      	b.n	8001d00 <HAL_DMA_Abort_IT+0x1ac>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_DMA_Abort_IT+0x20c>)
 8001d02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
    } 
  }
  return status;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40020080 	.word	0x40020080
 8001d34:	40020008 	.word	0x40020008
 8001d38:	4002001c 	.word	0x4002001c
 8001d3c:	40020030 	.word	0x40020030
 8001d40:	40020044 	.word	0x40020044
 8001d44:	40020058 	.word	0x40020058
 8001d48:	4002006c 	.word	0x4002006c
 8001d4c:	40020408 	.word	0x40020408
 8001d50:	4002041c 	.word	0x4002041c
 8001d54:	40020430 	.word	0x40020430
 8001d58:	40020444 	.word	0x40020444
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2204      	movs	r2, #4
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80f1 	beq.w	8001f70 <HAL_DMA_IRQHandler+0x20c>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80eb 	beq.w	8001f70 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0204 	bic.w	r2, r2, #4
 8001db6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_DMA_IRQHandler+0x1d8>)
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d958      	bls.n	8001e76 <HAL_DMA_IRQHandler+0x112>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5d      	ldr	r2, [pc, #372]	; (8001f40 <HAL_DMA_IRQHandler+0x1dc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d04f      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x10a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5c      	ldr	r2, [pc, #368]	; (8001f44 <HAL_DMA_IRQHandler+0x1e0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d048      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x106>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <HAL_DMA_IRQHandler+0x1e4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d040      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x100>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a59      	ldr	r2, [pc, #356]	; (8001f4c <HAL_DMA_IRQHandler+0x1e8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d038      	beq.n	8001e5e <HAL_DMA_IRQHandler+0xfa>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <HAL_DMA_IRQHandler+0x1ec>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d030      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xf4>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a56      	ldr	r2, [pc, #344]	; (8001f54 <HAL_DMA_IRQHandler+0x1f0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d028      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xee>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <HAL_DMA_IRQHandler+0x1d8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d020      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xe8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_DMA_IRQHandler+0x1f4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d019      	beq.n	8001e48 <HAL_DMA_IRQHandler+0xe4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a50      	ldr	r2, [pc, #320]	; (8001f5c <HAL_DMA_IRQHandler+0x1f8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d012      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xe0>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a4f      	ldr	r2, [pc, #316]	; (8001f60 <HAL_DMA_IRQHandler+0x1fc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00a      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xda>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <HAL_DMA_IRQHandler+0x200>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d102      	bne.n	8001e38 <HAL_DMA_IRQHandler+0xd4>
 8001e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e36:	e01b      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e3c:	e018      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e42:	e015      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e44:	2340      	movs	r3, #64	; 0x40
 8001e46:	e013      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e48:	2304      	movs	r3, #4
 8001e4a:	e011      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e50:	e00e      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e56:	e00b      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e5c:	e008      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e62:	e005      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e68:	e002      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e6a:	2340      	movs	r3, #64	; 0x40
 8001e6c:	e000      	b.n	8001e70 <HAL_DMA_IRQHandler+0x10c>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	4a3d      	ldr	r2, [pc, #244]	; (8001f68 <HAL_DMA_IRQHandler+0x204>)
 8001e72:	6053      	str	r3, [r2, #4]
 8001e74:	e057      	b.n	8001f26 <HAL_DMA_IRQHandler+0x1c2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <HAL_DMA_IRQHandler+0x1dc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04f      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1bc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <HAL_DMA_IRQHandler+0x1e0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d048      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x1b8>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <HAL_DMA_IRQHandler+0x1e4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d040      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x1b2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_DMA_IRQHandler+0x1e8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d038      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x1ac>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2b      	ldr	r2, [pc, #172]	; (8001f50 <HAL_DMA_IRQHandler+0x1ec>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d030      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x1a6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <HAL_DMA_IRQHandler+0x1f0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d028      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x1a0>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_DMA_IRQHandler+0x1d8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d020      	beq.n	8001efe <HAL_DMA_IRQHandler+0x19a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_DMA_IRQHandler+0x1f4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d019      	beq.n	8001efa <HAL_DMA_IRQHandler+0x196>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <HAL_DMA_IRQHandler+0x1f8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d012      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x192>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <HAL_DMA_IRQHandler+0x1fc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x18c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <HAL_DMA_IRQHandler+0x200>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d102      	bne.n	8001eea <HAL_DMA_IRQHandler+0x186>
 8001ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ee8:	e01b      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001eea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001eee:	e018      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef4:	e015      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001ef6:	2340      	movs	r3, #64	; 0x40
 8001ef8:	e013      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001efa:	2304      	movs	r3, #4
 8001efc:	e011      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001efe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f02:	e00e      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001f04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f08:	e00b      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001f0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f0e:	e008      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f14:	e005      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1a:	e002      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001f1c:	2340      	movs	r3, #64	; 0x40
 8001f1e:	e000      	b.n	8001f22 <HAL_DMA_IRQHandler+0x1be>
 8001f20:	2304      	movs	r3, #4
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_DMA_IRQHandler+0x208>)
 8001f24:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8136 	beq.w	800219c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f38:	e130      	b.n	800219c <HAL_DMA_IRQHandler+0x438>
 8001f3a:	bf00      	nop
 8001f3c:	40020080 	.word	0x40020080
 8001f40:	40020008 	.word	0x40020008
 8001f44:	4002001c 	.word	0x4002001c
 8001f48:	40020030 	.word	0x40020030
 8001f4c:	40020044 	.word	0x40020044
 8001f50:	40020058 	.word	0x40020058
 8001f54:	4002006c 	.word	0x4002006c
 8001f58:	40020408 	.word	0x40020408
 8001f5c:	4002041c 	.word	0x4002041c
 8001f60:	40020430 	.word	0x40020430
 8001f64:	40020444 	.word	0x40020444
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2202      	movs	r2, #2
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80dd 	beq.w	800213c <HAL_DMA_IRQHandler+0x3d8>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80d7 	beq.w	800213c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 020a 	bic.w	r2, r2, #10
 8001faa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b7b      	ldr	r3, [pc, #492]	; (80021a8 <HAL_DMA_IRQHandler+0x444>)
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d958      	bls.n	8002072 <HAL_DMA_IRQHandler+0x30e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a79      	ldr	r2, [pc, #484]	; (80021ac <HAL_DMA_IRQHandler+0x448>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d04f      	beq.n	800206a <HAL_DMA_IRQHandler+0x306>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a78      	ldr	r2, [pc, #480]	; (80021b0 <HAL_DMA_IRQHandler+0x44c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d048      	beq.n	8002066 <HAL_DMA_IRQHandler+0x302>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a76      	ldr	r2, [pc, #472]	; (80021b4 <HAL_DMA_IRQHandler+0x450>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d040      	beq.n	8002060 <HAL_DMA_IRQHandler+0x2fc>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_DMA_IRQHandler+0x454>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d038      	beq.n	800205a <HAL_DMA_IRQHandler+0x2f6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a73      	ldr	r2, [pc, #460]	; (80021bc <HAL_DMA_IRQHandler+0x458>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d030      	beq.n	8002054 <HAL_DMA_IRQHandler+0x2f0>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a72      	ldr	r2, [pc, #456]	; (80021c0 <HAL_DMA_IRQHandler+0x45c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d028      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ea>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a69      	ldr	r2, [pc, #420]	; (80021a8 <HAL_DMA_IRQHandler+0x444>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d020      	beq.n	8002048 <HAL_DMA_IRQHandler+0x2e4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6e      	ldr	r2, [pc, #440]	; (80021c4 <HAL_DMA_IRQHandler+0x460>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d019      	beq.n	8002044 <HAL_DMA_IRQHandler+0x2e0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6c      	ldr	r2, [pc, #432]	; (80021c8 <HAL_DMA_IRQHandler+0x464>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d012      	beq.n	8002040 <HAL_DMA_IRQHandler+0x2dc>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6b      	ldr	r2, [pc, #428]	; (80021cc <HAL_DMA_IRQHandler+0x468>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00a      	beq.n	800203a <HAL_DMA_IRQHandler+0x2d6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a69      	ldr	r2, [pc, #420]	; (80021d0 <HAL_DMA_IRQHandler+0x46c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d102      	bne.n	8002034 <HAL_DMA_IRQHandler+0x2d0>
 800202e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002032:	e01b      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 8002034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002038:	e018      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 800203a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203e:	e015      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 8002040:	2320      	movs	r3, #32
 8002042:	e013      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 8002044:	2302      	movs	r3, #2
 8002046:	e011      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 8002048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204c:	e00e      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 800204e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002052:	e00b      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	e008      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 800205a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205e:	e005      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	e002      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 8002066:	2320      	movs	r3, #32
 8002068:	e000      	b.n	800206c <HAL_DMA_IRQHandler+0x308>
 800206a:	2302      	movs	r3, #2
 800206c:	4a59      	ldr	r2, [pc, #356]	; (80021d4 <HAL_DMA_IRQHandler+0x470>)
 800206e:	6053      	str	r3, [r2, #4]
 8002070:	e057      	b.n	8002122 <HAL_DMA_IRQHandler+0x3be>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a4d      	ldr	r2, [pc, #308]	; (80021ac <HAL_DMA_IRQHandler+0x448>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04f      	beq.n	800211c <HAL_DMA_IRQHandler+0x3b8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a4b      	ldr	r2, [pc, #300]	; (80021b0 <HAL_DMA_IRQHandler+0x44c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d048      	beq.n	8002118 <HAL_DMA_IRQHandler+0x3b4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a4a      	ldr	r2, [pc, #296]	; (80021b4 <HAL_DMA_IRQHandler+0x450>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d040      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3ae>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <HAL_DMA_IRQHandler+0x454>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d038      	beq.n	800210c <HAL_DMA_IRQHandler+0x3a8>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a47      	ldr	r2, [pc, #284]	; (80021bc <HAL_DMA_IRQHandler+0x458>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d030      	beq.n	8002106 <HAL_DMA_IRQHandler+0x3a2>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a45      	ldr	r2, [pc, #276]	; (80021c0 <HAL_DMA_IRQHandler+0x45c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d028      	beq.n	8002100 <HAL_DMA_IRQHandler+0x39c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <HAL_DMA_IRQHandler+0x444>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d020      	beq.n	80020fa <HAL_DMA_IRQHandler+0x396>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a41      	ldr	r2, [pc, #260]	; (80021c4 <HAL_DMA_IRQHandler+0x460>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x392>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HAL_DMA_IRQHandler+0x464>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d012      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x38e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <HAL_DMA_IRQHandler+0x468>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00a      	beq.n	80020ec <HAL_DMA_IRQHandler+0x388>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <HAL_DMA_IRQHandler+0x46c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d102      	bne.n	80020e6 <HAL_DMA_IRQHandler+0x382>
 80020e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e4:	e01b      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 80020e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ea:	e018      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 80020ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f0:	e015      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 80020f2:	2320      	movs	r3, #32
 80020f4:	e013      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e011      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	e00e      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 8002100:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002104:	e00b      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 8002106:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800210a:	e008      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 800210c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002110:	e005      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 8002112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002116:	e002      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 8002118:	2320      	movs	r3, #32
 800211a:	e000      	b.n	800211e <HAL_DMA_IRQHandler+0x3ba>
 800211c:	2302      	movs	r3, #2
 800211e:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_DMA_IRQHandler+0x474>)
 8002120:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	2b00      	cmp	r3, #0
 8002130:	d034      	beq.n	800219c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800213a:	e02f      	b.n	800219c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2208      	movs	r2, #8
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d028      	beq.n	800219e <HAL_DMA_IRQHandler+0x43a>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d023      	beq.n	800219e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 020e 	bic.w	r2, r2, #14
 8002164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
    }
  }
  return;
 800219c:	bf00      	nop
 800219e:	bf00      	nop
}
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40020080 	.word	0x40020080
 80021ac:	40020008 	.word	0x40020008
 80021b0:	4002001c 	.word	0x4002001c
 80021b4:	40020030 	.word	0x40020030
 80021b8:	40020044 	.word	0x40020044
 80021bc:	40020058 	.word	0x40020058
 80021c0:	4002006c 	.word	0x4002006c
 80021c4:	40020408 	.word	0x40020408
 80021c8:	4002041c 	.word	0x4002041c
 80021cc:	40020430 	.word	0x40020430
 80021d0:	40020444 	.word	0x40020444
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020000 	.word	0x40020000

080021dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d108      	bne.n	800221c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800221a:	e007      	b.n	800222c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
	...

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b08b      	sub	sp, #44	; 0x2c
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	e179      	b.n	8002540 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800224c:	2201      	movs	r2, #1
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8168 	bne.w	800253a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a96      	ldr	r2, [pc, #600]	; (80024c8 <HAL_GPIO_Init+0x290>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d05e      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002274:	4a94      	ldr	r2, [pc, #592]	; (80024c8 <HAL_GPIO_Init+0x290>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d875      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 800227a:	4a94      	ldr	r2, [pc, #592]	; (80024cc <HAL_GPIO_Init+0x294>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d058      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002280:	4a92      	ldr	r2, [pc, #584]	; (80024cc <HAL_GPIO_Init+0x294>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d86f      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 8002286:	4a92      	ldr	r2, [pc, #584]	; (80024d0 <HAL_GPIO_Init+0x298>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d052      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 800228c:	4a90      	ldr	r2, [pc, #576]	; (80024d0 <HAL_GPIO_Init+0x298>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d869      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 8002292:	4a90      	ldr	r2, [pc, #576]	; (80024d4 <HAL_GPIO_Init+0x29c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d04c      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002298:	4a8e      	ldr	r2, [pc, #568]	; (80024d4 <HAL_GPIO_Init+0x29c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d863      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 800229e:	4a8e      	ldr	r2, [pc, #568]	; (80024d8 <HAL_GPIO_Init+0x2a0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d046      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 80022a4:	4a8c      	ldr	r2, [pc, #560]	; (80024d8 <HAL_GPIO_Init+0x2a0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d85d      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 80022aa:	2b12      	cmp	r3, #18
 80022ac:	d82a      	bhi.n	8002304 <HAL_GPIO_Init+0xcc>
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d859      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 80022b2:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <HAL_GPIO_Init+0x80>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	08002333 	.word	0x08002333
 80022bc:	0800230d 	.word	0x0800230d
 80022c0:	0800231f 	.word	0x0800231f
 80022c4:	08002361 	.word	0x08002361
 80022c8:	08002367 	.word	0x08002367
 80022cc:	08002367 	.word	0x08002367
 80022d0:	08002367 	.word	0x08002367
 80022d4:	08002367 	.word	0x08002367
 80022d8:	08002367 	.word	0x08002367
 80022dc:	08002367 	.word	0x08002367
 80022e0:	08002367 	.word	0x08002367
 80022e4:	08002367 	.word	0x08002367
 80022e8:	08002367 	.word	0x08002367
 80022ec:	08002367 	.word	0x08002367
 80022f0:	08002367 	.word	0x08002367
 80022f4:	08002367 	.word	0x08002367
 80022f8:	08002367 	.word	0x08002367
 80022fc:	08002315 	.word	0x08002315
 8002300:	08002329 	.word	0x08002329
 8002304:	4a75      	ldr	r2, [pc, #468]	; (80024dc <HAL_GPIO_Init+0x2a4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800230a:	e02c      	b.n	8002366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	623b      	str	r3, [r7, #32]
          break;
 8002312:	e029      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	3304      	adds	r3, #4
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e024      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	3308      	adds	r3, #8
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e01f      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	330c      	adds	r3, #12
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e01a      	b.n	8002368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800233a:	2304      	movs	r3, #4
 800233c:	623b      	str	r3, [r7, #32]
          break;
 800233e:	e013      	b.n	8002368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002348:	2308      	movs	r3, #8
 800234a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	611a      	str	r2, [r3, #16]
          break;
 8002352:	e009      	b.n	8002368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002354:	2308      	movs	r3, #8
 8002356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	615a      	str	r2, [r3, #20]
          break;
 800235e:	e003      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x130>
          break;
 8002366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d801      	bhi.n	8002372 <HAL_GPIO_Init+0x13a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	e001      	b.n	8002376 <HAL_GPIO_Init+0x13e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d802      	bhi.n	8002384 <HAL_GPIO_Init+0x14c>
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	e002      	b.n	800238a <HAL_GPIO_Init+0x152>
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	3b08      	subs	r3, #8
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	210f      	movs	r1, #15
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80c1 	beq.w	800253a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_GPIO_Init+0x2a8>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a48      	ldr	r2, [pc, #288]	; (80024e0 <HAL_GPIO_Init+0x2a8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_GPIO_Init+0x2a8>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d0:	4a44      	ldr	r2, [pc, #272]	; (80024e4 <HAL_GPIO_Init+0x2ac>)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3c      	ldr	r2, [pc, #240]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01f      	beq.n	800243c <HAL_GPIO_Init+0x204>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_GPIO_Init+0x2b4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d019      	beq.n	8002438 <HAL_GPIO_Init+0x200>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <HAL_GPIO_Init+0x2b8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x1fc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <HAL_GPIO_Init+0x2bc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x1f8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <HAL_GPIO_Init+0x2c0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x1f4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a37      	ldr	r2, [pc, #220]	; (80024fc <HAL_GPIO_Init+0x2c4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x1f0>
 8002424:	2305      	movs	r3, #5
 8002426:	e00a      	b.n	800243e <HAL_GPIO_Init+0x206>
 8002428:	2306      	movs	r3, #6
 800242a:	e008      	b.n	800243e <HAL_GPIO_Init+0x206>
 800242c:	2304      	movs	r3, #4
 800242e:	e006      	b.n	800243e <HAL_GPIO_Init+0x206>
 8002430:	2303      	movs	r3, #3
 8002432:	e004      	b.n	800243e <HAL_GPIO_Init+0x206>
 8002434:	2302      	movs	r3, #2
 8002436:	e002      	b.n	800243e <HAL_GPIO_Init+0x206>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_GPIO_Init+0x206>
 800243c:	2300      	movs	r3, #0
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	f002 0203 	and.w	r2, r2, #3
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	4093      	lsls	r3, r2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244e:	4925      	ldr	r1, [pc, #148]	; (80024e4 <HAL_GPIO_Init+0x2ac>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4924      	ldr	r1, [pc, #144]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	43db      	mvns	r3, r3
 800247e:	4920      	ldr	r1, [pc, #128]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 8002480:	4013      	ands	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	491a      	ldr	r1, [pc, #104]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d025      	beq.n	8002504 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4910      	ldr	r1, [pc, #64]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
 80024c4:	e025      	b.n	8002512 <HAL_GPIO_Init+0x2da>
 80024c6:	bf00      	nop
 80024c8:	10320000 	.word	0x10320000
 80024cc:	10310000 	.word	0x10310000
 80024d0:	10220000 	.word	0x10220000
 80024d4:	10210000 	.word	0x10210000
 80024d8:	10120000 	.word	0x10120000
 80024dc:	10110000 	.word	0x10110000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40010800 	.word	0x40010800
 80024ec:	40010c00 	.word	0x40010c00
 80024f0:	40011000 	.word	0x40011000
 80024f4:	40011400 	.word	0x40011400
 80024f8:	40011800 	.word	0x40011800
 80024fc:	40011c00 	.word	0x40011c00
 8002500:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_GPIO_Init+0x324>)
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	43db      	mvns	r3, r3
 800250c:	4913      	ldr	r1, [pc, #76]	; (800255c <HAL_GPIO_Init+0x324>)
 800250e:	4013      	ands	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_GPIO_Init+0x324>)
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_GPIO_Init+0x324>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	60cb      	str	r3, [r1, #12]
 800252a:	e006      	b.n	800253a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_GPIO_Init+0x324>)
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	43db      	mvns	r3, r3
 8002534:	4909      	ldr	r1, [pc, #36]	; (800255c <HAL_GPIO_Init+0x324>)
 8002536:	4013      	ands	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	3301      	adds	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f ae7e 	bne.w	800224c <HAL_GPIO_Init+0x14>
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	372c      	adds	r7, #44	; 0x2c
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	611a      	str	r2, [r3, #16]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e272      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8087 	beq.w	80026be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b0:	4b92      	ldr	r3, [pc, #584]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d00c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025bc:	4b8f      	ldr	r3, [pc, #572]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d112      	bne.n	80025ee <HAL_RCC_OscConfig+0x5e>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d10b      	bne.n	80025ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	4b89      	ldr	r3, [pc, #548]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d06c      	beq.n	80026bc <HAL_RCC_OscConfig+0x12c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d168      	bne.n	80026bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e24c      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x76>
 80025f8:	4b80      	ldr	r3, [pc, #512]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a7f      	ldr	r2, [pc, #508]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b78      	ldr	r3, [pc, #480]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a77      	ldr	r2, [pc, #476]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01d      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0xbc>
 8002632:	4b72      	ldr	r3, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a71      	ldr	r2, [pc, #452]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a6e      	ldr	r2, [pc, #440]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 800264c:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6a      	ldr	r2, [pc, #424]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a67      	ldr	r2, [pc, #412]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff f860 	bl	8001730 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7ff f85c 	bl	8001730 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e200      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xe4>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f84c 	bl	8001730 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff f848 	bl	8001730 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e1ec      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x10c>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d063      	beq.n	8002792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ca:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026d6:	4b49      	ldr	r3, [pc, #292]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d11c      	bne.n	800271c <HAL_RCC_OscConfig+0x18c>
 80026e2:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x176>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e1c0      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4939      	ldr	r1, [pc, #228]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	e03a      	b.n	8002792 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <HAL_RCC_OscConfig+0x270>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff f801 	bl	8001730 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002732:	f7fe fffd 	bl	8001730 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1a1      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4927      	ldr	r1, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_RCC_OscConfig+0x270>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe ffe0 	bl	8001730 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe ffdc 	bl	8001730 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e180      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03a      	beq.n	8002814 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_RCC_OscConfig+0x274>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7fe ffc0 	bl	8001730 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7fe ffbc 	bl	8001730 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e160      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f000 faa6 	bl	8002d24 <RCC_Delay>
 80027d8:	e01c      	b.n	8002814 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_OscConfig+0x274>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7fe ffa6 	bl	8001730 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e6:	e00f      	b.n	8002808 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe ffa2 	bl	8001730 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d908      	bls.n	8002808 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e146      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	42420000 	.word	0x42420000
 8002804:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	4b92      	ldr	r3, [pc, #584]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e9      	bne.n	80027e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a6 	beq.w	800296e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002826:	4b8b      	ldr	r3, [pc, #556]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4a87      	ldr	r2, [pc, #540]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	61d3      	str	r3, [r2, #28]
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_RCC_OscConfig+0x4c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d118      	bne.n	800288c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_RCC_OscConfig+0x4c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7e      	ldr	r2, [pc, #504]	; (8002a58 <HAL_RCC_OscConfig+0x4c8>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7fe ff63 	bl	8001730 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286e:	f7fe ff5f 	bl	8001730 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b64      	cmp	r3, #100	; 0x64
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e103      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <HAL_RCC_OscConfig+0x4c8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x312>
 8002894:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	e02d      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x334>
 80028aa:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a69      	ldr	r2, [pc, #420]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a66      	ldr	r2, [pc, #408]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	e01c      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d10c      	bne.n	80028e6 <HAL_RCC_OscConfig+0x356>
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a60      	ldr	r2, [pc, #384]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	4b5e      	ldr	r3, [pc, #376]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	e00b      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a5a      	ldr	r2, [pc, #360]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a57      	ldr	r2, [pc, #348]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d015      	beq.n	8002932 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7fe ff13 	bl	8001730 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe ff0f 	bl	8001730 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0b1      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ee      	beq.n	800290e <HAL_RCC_OscConfig+0x37e>
 8002930:	e014      	b.n	800295c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7fe fefd 	bl	8001730 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7fe fef9 	bl	8001730 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	; 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e09b      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ee      	bne.n	800293a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d105      	bne.n	800296e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002962:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8087 	beq.w	8002a86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002978:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d061      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d146      	bne.n	8002a1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_RCC_OscConfig+0x4cc>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fe fecd 	bl	8001730 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299a:	f7fe fec9 	bl	8001730 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e06d      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d108      	bne.n	80029d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4921      	ldr	r1, [pc, #132]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a19      	ldr	r1, [r3, #32]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	430b      	orrs	r3, r1
 80029e6:	491b      	ldr	r1, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x4cc>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe fe9d 	bl	8001730 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fa:	f7fe fe99 	bl	8001730 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e03d      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x46a>
 8002a18:	e035      	b.n	8002a86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_RCC_OscConfig+0x4cc>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fe86 	bl	8001730 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe fe82 	bl	8001730 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e026      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x498>
 8002a46:	e01e      	b.n	8002a86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e019      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_OscConfig+0x500>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000

08002a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0d0      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d910      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	4965      	ldr	r1, [pc, #404]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a58      	ldr	r2, [pc, #352]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002afa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	494d      	ldr	r1, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d040      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d115      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e073      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e06b      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4936      	ldr	r1, [pc, #216]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fdd4 	bl	8001730 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fdd0 	bl	8001730 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e053      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d210      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4922      	ldr	r1, [pc, #136]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4916      	ldr	r1, [pc, #88]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	490e      	ldr	r1, [pc, #56]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c22:	f000 f821 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	490a      	ldr	r1, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1cc>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1d0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fd32 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40022000 	.word	0x40022000
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08004e60 	.word	0x08004e60
 8002c60:	20000004 	.word	0x20000004
 8002c64:	20000008 	.word	0x20000008

08002c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	b490      	push	{r4, r7}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c6e:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c70:	1d3c      	adds	r4, r7, #4
 8002c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c78:	f240 2301 	movw	r3, #513	; 0x201
 8002c7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x46>
 8002ca6:	e02b      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002caa:	623b      	str	r3, [r7, #32]
      break;
 8002cac:	e02b      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	3328      	adds	r3, #40	; 0x28
 8002cb8:	443b      	add	r3, r7
 8002cba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cbe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d012      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0c5b      	lsrs	r3, r3, #17
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	3328      	adds	r3, #40	; 0x28
 8002cd6:	443b      	add	r3, r7
 8002cd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
 8002cee:	e004      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	623b      	str	r3, [r7, #32]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d02:	623b      	str	r3, [r7, #32]
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	6a3b      	ldr	r3, [r7, #32]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc90      	pop	{r4, r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	08004e50 	.word	0x08004e50
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	007a1200 	.word	0x007a1200
 8002d20:	003d0900 	.word	0x003d0900

08002d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <RCC_Delay+0x34>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <RCC_Delay+0x38>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0a5b      	lsrs	r3, r3, #9
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d40:	bf00      	nop
  }
  while (Delay --);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1e5a      	subs	r2, r3, #1
 8002d46:	60fa      	str	r2, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f9      	bne.n	8002d40 <RCC_Delay+0x1c>
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	20000004 	.word	0x20000004
 8002d5c:	10624dd3 	.word	0x10624dd3

08002d60 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_SRAM_Init+0x1c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d101      	bne.n	8002d80 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e038      	b.n	8002df2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7fe fc0b 	bl	80015b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3308      	adds	r3, #8
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f001 f94f 	bl	8004048 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	f001 f9b1 	bl	800411c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6858      	ldr	r0, [r3, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	f001 f9dc 	bl	8004184 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6892      	ldr	r2, [r2, #8]
 8002de0:	f041 0101 	orr.w	r1, r1, #1
 8002de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e041      	b.n	8002e90 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fe fb03 	bl	800142c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f000 fd67 	bl	800390c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e041      	b.n	8002f2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f839 	bl	8002f36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f000 fd18 	bl	800390c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_TIM_PWM_Start_DMA+0x28>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e022      	b.n	8002fb6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d109      	bne.n	8002f8a <HAL_TIM_PWM_Start_DMA+0x42>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e015      	b.n	8002fb6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d109      	bne.n	8002fa4 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e008      	b.n	8002fb6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e162      	b.n	8003284 <HAL_TIM_PWM_Start_DMA+0x33c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_TIM_PWM_Start_DMA+0x90>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e022      	b.n	800301e <HAL_TIM_PWM_Start_DMA+0xd6>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d109      	bne.n	8002ff2 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e015      	b.n	800301e <HAL_TIM_PWM_Start_DMA+0xd6>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d109      	bne.n	800300c <HAL_TIM_PWM_Start_DMA+0xc4>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e008      	b.n	800301e <HAL_TIM_PWM_Start_DMA+0xd6>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d024      	beq.n	800306c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d104      	bne.n	8003032 <HAL_TIM_PWM_Start_DMA+0xea>
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e128      	b.n	8003284 <HAL_TIM_PWM_Start_DMA+0x33c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <HAL_TIM_PWM_Start_DMA+0xfa>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003040:	e016      	b.n	8003070 <HAL_TIM_PWM_Start_DMA+0x128>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d104      	bne.n	8003052 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003050:	e00e      	b.n	8003070 <HAL_TIM_PWM_Start_DMA+0x128>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d104      	bne.n	8003062 <HAL_TIM_PWM_Start_DMA+0x11a>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003060:	e006      	b.n	8003070 <HAL_TIM_PWM_Start_DMA+0x128>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800306a:	e001      	b.n	8003070 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e109      	b.n	8003284 <HAL_TIM_PWM_Start_DMA+0x33c>
  }

  switch (Channel)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b0c      	cmp	r3, #12
 8003074:	f200 80ae 	bhi.w	80031d4 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <HAL_TIM_PWM_Start_DMA+0x138>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080031d5 	.word	0x080031d5
 8003088:	080031d5 	.word	0x080031d5
 800308c:	080031d5 	.word	0x080031d5
 8003090:	080030fd 	.word	0x080030fd
 8003094:	080031d5 	.word	0x080031d5
 8003098:	080031d5 	.word	0x080031d5
 800309c:	080031d5 	.word	0x080031d5
 80030a0:	08003145 	.word	0x08003145
 80030a4:	080031d5 	.word	0x080031d5
 80030a8:	080031d5 	.word	0x080031d5
 80030ac:	080031d5 	.word	0x080031d5
 80030b0:	0800318d 	.word	0x0800318d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	4a74      	ldr	r2, [pc, #464]	; (800328c <HAL_TIM_PWM_Start_DMA+0x344>)
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	4a73      	ldr	r2, [pc, #460]	; (8003290 <HAL_TIM_PWM_Start_DMA+0x348>)
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	4a72      	ldr	r2, [pc, #456]	; (8003294 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3334      	adds	r3, #52	; 0x34
 80030d8:	461a      	mov	r2, r3
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	f7fe fcda 	bl	8001a94 <HAL_DMA_Start_IT>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0cc      	b.n	8003284 <HAL_TIM_PWM_Start_DMA+0x33c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f8:	60da      	str	r2, [r3, #12]
      break;
 80030fa:	e06c      	b.n	80031d6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	4a62      	ldr	r2, [pc, #392]	; (800328c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_TIM_PWM_Start_DMA+0x348>)
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003112:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3338      	adds	r3, #56	; 0x38
 8003120:	461a      	mov	r2, r3
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	f7fe fcb6 	bl	8001a94 <HAL_DMA_Start_IT>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0a8      	b.n	8003284 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003140:	60da      	str	r2, [r3, #12]
      break;
 8003142:	e048      	b.n	80031d6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	4a50      	ldr	r2, [pc, #320]	; (800328c <HAL_TIM_PWM_Start_DMA+0x344>)
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	4a4f      	ldr	r2, [pc, #316]	; (8003290 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	4a4e      	ldr	r2, [pc, #312]	; (8003294 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800315a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	333c      	adds	r3, #60	; 0x3c
 8003168:	461a      	mov	r2, r3
 800316a:	887b      	ldrh	r3, [r7, #2]
 800316c:	f7fe fc92 	bl	8001a94 <HAL_DMA_Start_IT>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e084      	b.n	8003284 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003188:	60da      	str	r2, [r3, #12]
      break;
 800318a:	e024      	b.n	80031d6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a3e      	ldr	r2, [pc, #248]	; (800328c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <HAL_TIM_PWM_Start_DMA+0x348>)
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3340      	adds	r3, #64	; 0x40
 80031b0:	461a      	mov	r2, r3
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	f7fe fc6e 	bl	8001a94 <HAL_DMA_Start_IT>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e060      	b.n	8003284 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d0:	60da      	str	r2, [r3, #12]
      break;
 80031d2:	e000      	b.n	80031d6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80031d4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2201      	movs	r2, #1
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fe50 	bl	8003e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <HAL_TIM_PWM_Start_DMA+0x350>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2a      	ldr	r2, [pc, #168]	; (800329c <HAL_TIM_PWM_Start_DMA+0x354>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_PWM_Start_DMA+0x2b4>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_TIM_PWM_Start_DMA+0x2b6>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_TIM_PWM_Start_DMA+0x2ca>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a20      	ldr	r2, [pc, #128]	; (8003298 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_TIM_PWM_Start_DMA+0x306>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1e      	ldr	r2, [pc, #120]	; (800329c <HAL_TIM_PWM_Start_DMA+0x354>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_TIM_PWM_Start_DMA+0x306>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d00e      	beq.n	800324e <HAL_TIM_PWM_Start_DMA+0x306>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_TIM_PWM_Start_DMA+0x306>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_TIM_PWM_Start_DMA+0x306>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_TIM_PWM_Start_DMA+0x360>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d111      	bne.n	8003272 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b06      	cmp	r3, #6
 800325e:	d010      	beq.n	8003282 <HAL_TIM_PWM_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003270:	e007      	b.n	8003282 <HAL_TIM_PWM_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	080037fb 	.word	0x080037fb
 8003290:	080038a3 	.word	0x080038a3
 8003294:	08003769 	.word	0x08003769
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40013400 	.word	0x40013400
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800
 80032a8:	40000c00 	.word	0x40000c00

080032ac <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d855      	bhi.n	8003368 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	08003369 	.word	0x08003369
 80032cc:	08003369 	.word	0x08003369
 80032d0:	08003369 	.word	0x08003369
 80032d4:	08003315 	.word	0x08003315
 80032d8:	08003369 	.word	0x08003369
 80032dc:	08003369 	.word	0x08003369
 80032e0:	08003369 	.word	0x08003369
 80032e4:	08003331 	.word	0x08003331
 80032e8:	08003369 	.word	0x08003369
 80032ec:	08003369 	.word	0x08003369
 80032f0:	08003369 	.word	0x08003369
 80032f4:	0800334d 	.word	0x0800334d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003306:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fc21 	bl	8001b54 <HAL_DMA_Abort_IT>
      break;
 8003312:	e02a      	b.n	800336a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fc13 	bl	8001b54 <HAL_DMA_Abort_IT>
      break;
 800332e:	e01c      	b.n	800336a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fc05 	bl	8001b54 <HAL_DMA_Abort_IT>
      break;
 800334a:	e00e      	b.n	800336a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800335a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fbf7 	bl	8001b54 <HAL_DMA_Abort_IT>
      break;
 8003366:	e000      	b.n	800336a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003368:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	6839      	ldr	r1, [r7, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fd86 	bl	8003e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2e      	ldr	r2, [pc, #184]	; (8003438 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_TIM_PWM_Stop_DMA+0xe0>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2d      	ldr	r2, [pc, #180]	; (800343c <HAL_TIM_PWM_Stop_DMA+0x190>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_TIM_PWM_Stop_DMA+0xe4>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8003390:	2300      	movs	r3, #0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a1a      	ldr	r2, [r3, #32]
 800339c:	f241 1311 	movw	r3, #4369	; 0x1111
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <HAL_TIM_PWM_Stop_DMA+0x11a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a1a      	ldr	r2, [r3, #32]
 80033ac:	f240 4344 	movw	r3, #1092	; 0x444
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d107      	bne.n	80033c6 <HAL_TIM_PWM_Stop_DMA+0x11a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	f240 4344 	movw	r3, #1092	; 0x444
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d104      	bne.n	8003406 <HAL_TIM_PWM_Stop_DMA+0x15a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003404:	e013      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0x182>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b04      	cmp	r3, #4
 800340a:	d104      	bne.n	8003416 <HAL_TIM_PWM_Stop_DMA+0x16a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	e00b      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0x182>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d104      	bne.n	8003426 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003424:	e003      	b.n	800342e <HAL_TIM_PWM_Stop_DMA+0x182>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40013400 	.word	0x40013400

08003440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003456:	2302      	movs	r3, #2
 8003458:	e0ac      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	f200 809f 	bhi.w	80035a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	080034a5 	.word	0x080034a5
 8003474:	080035a9 	.word	0x080035a9
 8003478:	080035a9 	.word	0x080035a9
 800347c:	080035a9 	.word	0x080035a9
 8003480:	080034e5 	.word	0x080034e5
 8003484:	080035a9 	.word	0x080035a9
 8003488:	080035a9 	.word	0x080035a9
 800348c:	080035a9 	.word	0x080035a9
 8003490:	08003527 	.word	0x08003527
 8003494:	080035a9 	.word	0x080035a9
 8003498:	080035a9 	.word	0x080035a9
 800349c:	080035a9 	.word	0x080035a9
 80034a0:	08003567 	.word	0x08003567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 faa8 	bl	8003a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	619a      	str	r2, [r3, #24]
      break;
 80034e2:	e062      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 faf8 	bl	8003ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6999      	ldr	r1, [r3, #24]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	619a      	str	r2, [r3, #24]
      break;
 8003524:	e041      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fb4b 	bl	8003bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0208 	orr.w	r2, r2, #8
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0204 	bic.w	r2, r2, #4
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	61da      	str	r2, [r3, #28]
      break;
 8003564:	e021      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fb9f 	bl	8003cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	021a      	lsls	r2, r3, #8
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	61da      	str	r2, [r3, #28]
      break;
 80035a6:	e000      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80035a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_TIM_ConfigClockSource+0x18>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e0b3      	b.n	800373c <HAL_TIM_ConfigClockSource+0x180>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360c:	d03e      	beq.n	800368c <HAL_TIM_ConfigClockSource+0xd0>
 800360e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003612:	f200 8087 	bhi.w	8003724 <HAL_TIM_ConfigClockSource+0x168>
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	f000 8085 	beq.w	8003728 <HAL_TIM_ConfigClockSource+0x16c>
 800361e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003622:	d87f      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x168>
 8003624:	2b70      	cmp	r3, #112	; 0x70
 8003626:	d01a      	beq.n	800365e <HAL_TIM_ConfigClockSource+0xa2>
 8003628:	2b70      	cmp	r3, #112	; 0x70
 800362a:	d87b      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x168>
 800362c:	2b60      	cmp	r3, #96	; 0x60
 800362e:	d050      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x116>
 8003630:	2b60      	cmp	r3, #96	; 0x60
 8003632:	d877      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x168>
 8003634:	2b50      	cmp	r3, #80	; 0x50
 8003636:	d03c      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0xf6>
 8003638:	2b50      	cmp	r3, #80	; 0x50
 800363a:	d873      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x168>
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d058      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x136>
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d86f      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x168>
 8003644:	2b30      	cmp	r3, #48	; 0x30
 8003646:	d064      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x156>
 8003648:	2b30      	cmp	r3, #48	; 0x30
 800364a:	d86b      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x168>
 800364c:	2b20      	cmp	r3, #32
 800364e:	d060      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x156>
 8003650:	2b20      	cmp	r3, #32
 8003652:	d867      	bhi.n	8003724 <HAL_TIM_ConfigClockSource+0x168>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d05c      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x156>
 8003658:	2b10      	cmp	r3, #16
 800365a:	d05a      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800365c:	e062      	b.n	8003724 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f000 fbea 	bl	8003e46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003680:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	609a      	str	r2, [r3, #8]
      break;
 800368a:	e04e      	b.n	800372a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f000 fbd3 	bl	8003e46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ae:	609a      	str	r2, [r3, #8]
      break;
 80036b0:	e03b      	b.n	800372a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	461a      	mov	r2, r3
 80036c0:	f000 fb4a 	bl	8003d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2150      	movs	r1, #80	; 0x50
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fba1 	bl	8003e12 <TIM_ITRx_SetConfig>
      break;
 80036d0:	e02b      	b.n	800372a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 fb68 	bl	8003db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2160      	movs	r1, #96	; 0x60
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fb91 	bl	8003e12 <TIM_ITRx_SetConfig>
      break;
 80036f0:	e01b      	b.n	800372a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	461a      	mov	r2, r3
 8003700:	f000 fb2a 	bl	8003d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2140      	movs	r1, #64	; 0x40
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fb81 	bl	8003e12 <TIM_ITRx_SetConfig>
      break;
 8003710:	e00b      	b.n	800372a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	4610      	mov	r0, r2
 800371e:	f000 fb78 	bl	8003e12 <TIM_ITRx_SetConfig>
        break;
 8003722:	e002      	b.n	800372a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003728:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d107      	bne.n	8003790 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800378e:	e02a      	b.n	80037e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d107      	bne.n	80037aa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2202      	movs	r2, #2
 800379e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a8:	e01d      	b.n	80037e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d107      	bne.n	80037c4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2204      	movs	r2, #4
 80037b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c2:	e010      	b.n	80037e6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d107      	bne.n	80037de <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2208      	movs	r2, #8
 80037d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037dc:	e003      	b.n	80037e6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7ff ffb5 	bl	8003756 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	771a      	strb	r2, [r3, #28]
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	429a      	cmp	r2, r3
 8003810:	d10b      	bne.n	800382a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d136      	bne.n	800388e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003828:	e031      	b.n	800388e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d10b      	bne.n	800384c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2202      	movs	r2, #2
 8003838:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d125      	bne.n	800388e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384a:	e020      	b.n	800388e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d10b      	bne.n	800386e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2204      	movs	r2, #4
 800385a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d114      	bne.n	800388e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800386c:	e00f      	b.n	800388e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d10a      	bne.n	800388e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2208      	movs	r2, #8
 800387c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7fd fa1c 	bl	8000ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	771a      	strb	r2, [r3, #28]
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d103      	bne.n	80038c2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	771a      	strb	r2, [r3, #28]
 80038c0:	e019      	b.n	80038f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d103      	bne.n	80038d4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2202      	movs	r2, #2
 80038d0:	771a      	strb	r2, [r3, #28]
 80038d2:	e010      	b.n	80038f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d103      	bne.n	80038e6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2204      	movs	r2, #4
 80038e2:	771a      	strb	r2, [r3, #28]
 80038e4:	e007      	b.n	80038f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d102      	bne.n	80038f6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2208      	movs	r2, #8
 80038f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff ff24 	bl	8003744 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	771a      	strb	r2, [r3, #28]
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a33      	ldr	r2, [pc, #204]	; (80039ec <TIM_Base_SetConfig+0xe0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <TIM_Base_SetConfig+0xe4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00f      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d00b      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <TIM_Base_SetConfig+0xe8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a2e      	ldr	r2, [pc, #184]	; (80039f8 <TIM_Base_SetConfig+0xec>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a2d      	ldr	r2, [pc, #180]	; (80039fc <TIM_Base_SetConfig+0xf0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d108      	bne.n	800395e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <TIM_Base_SetConfig+0xe0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <TIM_Base_SetConfig+0x82>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a21      	ldr	r2, [pc, #132]	; (80039f0 <TIM_Base_SetConfig+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_Base_SetConfig+0x82>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0x82>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <TIM_Base_SetConfig+0xe8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0x82>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <TIM_Base_SetConfig+0xec>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0x82>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <TIM_Base_SetConfig+0xf0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <TIM_Base_SetConfig+0xe0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0xc8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <TIM_Base_SetConfig+0xe4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d103      	bne.n	80039dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	615a      	str	r2, [r3, #20]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40013400 	.word	0x40013400
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40000c00 	.word	0x40000c00

08003a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f023 0201 	bic.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 0302 	bic.w	r3, r3, #2
 8003a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <TIM_OC1_SetConfig+0xd8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_OC1_SetConfig+0x64>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <TIM_OC1_SetConfig+0xdc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d10c      	bne.n	8003a7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0308 	bic.w	r3, r3, #8
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <TIM_OC1_SetConfig+0xd8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_OC1_SetConfig+0x8e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <TIM_OC1_SetConfig+0xdc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d111      	bne.n	8003ab2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40013400 	.word	0x40013400

08003ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f023 0210 	bic.w	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0320 	bic.w	r3, r3, #32
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a21      	ldr	r2, [pc, #132]	; (8003bc0 <TIM_OC2_SetConfig+0xe0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC2_SetConfig+0x68>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a20      	ldr	r2, [pc, #128]	; (8003bc4 <TIM_OC2_SetConfig+0xe4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10d      	bne.n	8003b64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <TIM_OC2_SetConfig+0xe0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC2_SetConfig+0x94>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <TIM_OC2_SetConfig+0xe4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d113      	bne.n	8003b9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40013400 	.word	0x40013400

08003bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <TIM_OC3_SetConfig+0xe0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_OC3_SetConfig+0x66>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <TIM_OC3_SetConfig+0xe4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10d      	bne.n	8003c4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <TIM_OC3_SetConfig+0xe0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_OC3_SetConfig+0x92>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a15      	ldr	r2, [pc, #84]	; (8003cac <TIM_OC3_SetConfig+0xe4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d113      	bne.n	8003c82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	621a      	str	r2, [r3, #32]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40013400 	.word	0x40013400

08003cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	031b      	lsls	r3, r3, #12
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <TIM_OC4_SetConfig+0xa0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC4_SetConfig+0x68>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <TIM_OC4_SetConfig+0xa4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d109      	bne.n	8003d2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	019b      	lsls	r3, r3, #6
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40013400 	.word	0x40013400

08003d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f023 0201 	bic.w	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f023 030a 	bic.w	r3, r3, #10
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 0210 	bic.w	r2, r3, #16
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	031b      	lsls	r3, r3, #12
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003df0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f043 0307 	orr.w	r3, r3, #7
 8003e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	609a      	str	r2, [r3, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	021a      	lsls	r2, r3, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	609a      	str	r2, [r3, #8]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	2201      	movs	r2, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e050      	b.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d00e      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10c      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00

08003fa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e03d      	b.n	800403c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
	...

08004048 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	f023 0101 	bic.w	r1, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b08      	cmp	r3, #8
 8004070:	d102      	bne.n	8004078 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e001      	b.n	800407c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004088:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800408e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004094:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800409a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80040a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80040a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80040ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80040b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80040b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <FSMC_NORSRAM_Init+0xd0>)
 80040d8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040e0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80040e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	ea02 0103 	and.w	r1, r2, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4319      	orrs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	0008fb7f 	.word	0x0008fb7f

0800411c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004132:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	431a      	orrs	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	431a      	orrs	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	431a      	orrs	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	3b01      	subs	r3, #1
 8004158:	051b      	lsls	r3, r3, #20
 800415a:	431a      	orrs	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	3b02      	subs	r3, #2
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	431a      	orrs	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	3201      	adds	r2, #1
 8004170:	4319      	orrs	r1, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004198:	d11d      	bne.n	80041d6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041a2:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	6811      	ldr	r1, [r2, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	6852      	ldr	r2, [r2, #4]
 80041ae:	0112      	lsls	r2, r2, #4
 80041b0:	4311      	orrs	r1, r2
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	6892      	ldr	r2, [r2, #8]
 80041b6:	0212      	lsls	r2, r2, #8
 80041b8:	4311      	orrs	r1, r2
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	6992      	ldr	r2, [r2, #24]
 80041be:	4311      	orrs	r1, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	68d2      	ldr	r2, [r2, #12]
 80041c4:	0412      	lsls	r2, r2, #16
 80041c6:	430a      	orrs	r2, r1
 80041c8:	ea43 0102 	orr.w	r1, r3, r2
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80041d4:	e005      	b.n	80041e2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80041de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	cff00000 	.word	0xcff00000

080041f4 <tanf>:
 80041f4:	b507      	push	{r0, r1, r2, lr}
 80041f6:	4a11      	ldr	r2, [pc, #68]	; (800423c <tanf+0x48>)
 80041f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80041fc:	4293      	cmp	r3, r2
 80041fe:	4601      	mov	r1, r0
 8004200:	dc06      	bgt.n	8004210 <tanf+0x1c>
 8004202:	2201      	movs	r2, #1
 8004204:	2100      	movs	r1, #0
 8004206:	b003      	add	sp, #12
 8004208:	f85d eb04 	ldr.w	lr, [sp], #4
 800420c:	f000 bc28 	b.w	8004a60 <__kernel_tanf>
 8004210:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004214:	db04      	blt.n	8004220 <tanf+0x2c>
 8004216:	f7fc f809 	bl	800022c <__aeabi_fsub>
 800421a:	b003      	add	sp, #12
 800421c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004220:	4669      	mov	r1, sp
 8004222:	f000 f80d 	bl	8004240 <__ieee754_rem_pio2f>
 8004226:	0042      	lsls	r2, r0, #1
 8004228:	f002 0202 	and.w	r2, r2, #2
 800422c:	9901      	ldr	r1, [sp, #4]
 800422e:	9800      	ldr	r0, [sp, #0]
 8004230:	f1c2 0201 	rsb	r2, r2, #1
 8004234:	f000 fc14 	bl	8004a60 <__kernel_tanf>
 8004238:	e7ef      	b.n	800421a <tanf+0x26>
 800423a:	bf00      	nop
 800423c:	3f490fda 	.word	0x3f490fda

08004240 <__ieee754_rem_pio2f>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	4aa0      	ldr	r2, [pc, #640]	; (80044c8 <__ieee754_rem_pio2f+0x288>)
 8004246:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800424a:	4296      	cmp	r6, r2
 800424c:	460c      	mov	r4, r1
 800424e:	4682      	mov	sl, r0
 8004250:	b087      	sub	sp, #28
 8004252:	dc04      	bgt.n	800425e <__ieee754_rem_pio2f+0x1e>
 8004254:	2300      	movs	r3, #0
 8004256:	6008      	str	r0, [r1, #0]
 8004258:	604b      	str	r3, [r1, #4]
 800425a:	2500      	movs	r5, #0
 800425c:	e01a      	b.n	8004294 <__ieee754_rem_pio2f+0x54>
 800425e:	4a9b      	ldr	r2, [pc, #620]	; (80044cc <__ieee754_rem_pio2f+0x28c>)
 8004260:	4296      	cmp	r6, r2
 8004262:	dc4b      	bgt.n	80042fc <__ieee754_rem_pio2f+0xbc>
 8004264:	2800      	cmp	r0, #0
 8004266:	499a      	ldr	r1, [pc, #616]	; (80044d0 <__ieee754_rem_pio2f+0x290>)
 8004268:	4f9a      	ldr	r7, [pc, #616]	; (80044d4 <__ieee754_rem_pio2f+0x294>)
 800426a:	f026 060f 	bic.w	r6, r6, #15
 800426e:	dd23      	ble.n	80042b8 <__ieee754_rem_pio2f+0x78>
 8004270:	f7fb ffdc 	bl	800022c <__aeabi_fsub>
 8004274:	42be      	cmp	r6, r7
 8004276:	4605      	mov	r5, r0
 8004278:	d010      	beq.n	800429c <__ieee754_rem_pio2f+0x5c>
 800427a:	4997      	ldr	r1, [pc, #604]	; (80044d8 <__ieee754_rem_pio2f+0x298>)
 800427c:	f7fb ffd6 	bl	800022c <__aeabi_fsub>
 8004280:	4601      	mov	r1, r0
 8004282:	6020      	str	r0, [r4, #0]
 8004284:	4628      	mov	r0, r5
 8004286:	f7fb ffd1 	bl	800022c <__aeabi_fsub>
 800428a:	4993      	ldr	r1, [pc, #588]	; (80044d8 <__ieee754_rem_pio2f+0x298>)
 800428c:	f7fb ffce 	bl	800022c <__aeabi_fsub>
 8004290:	2501      	movs	r5, #1
 8004292:	6060      	str	r0, [r4, #4]
 8004294:	4628      	mov	r0, r5
 8004296:	b007      	add	sp, #28
 8004298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429c:	498f      	ldr	r1, [pc, #572]	; (80044dc <__ieee754_rem_pio2f+0x29c>)
 800429e:	f7fb ffc5 	bl	800022c <__aeabi_fsub>
 80042a2:	498f      	ldr	r1, [pc, #572]	; (80044e0 <__ieee754_rem_pio2f+0x2a0>)
 80042a4:	4605      	mov	r5, r0
 80042a6:	f7fb ffc1 	bl	800022c <__aeabi_fsub>
 80042aa:	4601      	mov	r1, r0
 80042ac:	6020      	str	r0, [r4, #0]
 80042ae:	4628      	mov	r0, r5
 80042b0:	f7fb ffbc 	bl	800022c <__aeabi_fsub>
 80042b4:	498a      	ldr	r1, [pc, #552]	; (80044e0 <__ieee754_rem_pio2f+0x2a0>)
 80042b6:	e7e9      	b.n	800428c <__ieee754_rem_pio2f+0x4c>
 80042b8:	f7fb ffba 	bl	8000230 <__addsf3>
 80042bc:	42be      	cmp	r6, r7
 80042be:	4605      	mov	r5, r0
 80042c0:	d00e      	beq.n	80042e0 <__ieee754_rem_pio2f+0xa0>
 80042c2:	4985      	ldr	r1, [pc, #532]	; (80044d8 <__ieee754_rem_pio2f+0x298>)
 80042c4:	f7fb ffb4 	bl	8000230 <__addsf3>
 80042c8:	4601      	mov	r1, r0
 80042ca:	6020      	str	r0, [r4, #0]
 80042cc:	4628      	mov	r0, r5
 80042ce:	f7fb ffad 	bl	800022c <__aeabi_fsub>
 80042d2:	4981      	ldr	r1, [pc, #516]	; (80044d8 <__ieee754_rem_pio2f+0x298>)
 80042d4:	f7fb ffac 	bl	8000230 <__addsf3>
 80042d8:	f04f 35ff 	mov.w	r5, #4294967295
 80042dc:	6060      	str	r0, [r4, #4]
 80042de:	e7d9      	b.n	8004294 <__ieee754_rem_pio2f+0x54>
 80042e0:	497e      	ldr	r1, [pc, #504]	; (80044dc <__ieee754_rem_pio2f+0x29c>)
 80042e2:	f7fb ffa5 	bl	8000230 <__addsf3>
 80042e6:	497e      	ldr	r1, [pc, #504]	; (80044e0 <__ieee754_rem_pio2f+0x2a0>)
 80042e8:	4605      	mov	r5, r0
 80042ea:	f7fb ffa1 	bl	8000230 <__addsf3>
 80042ee:	4601      	mov	r1, r0
 80042f0:	6020      	str	r0, [r4, #0]
 80042f2:	4628      	mov	r0, r5
 80042f4:	f7fb ff9a 	bl	800022c <__aeabi_fsub>
 80042f8:	4979      	ldr	r1, [pc, #484]	; (80044e0 <__ieee754_rem_pio2f+0x2a0>)
 80042fa:	e7eb      	b.n	80042d4 <__ieee754_rem_pio2f+0x94>
 80042fc:	4a79      	ldr	r2, [pc, #484]	; (80044e4 <__ieee754_rem_pio2f+0x2a4>)
 80042fe:	4296      	cmp	r6, r2
 8004300:	f300 8091 	bgt.w	8004426 <__ieee754_rem_pio2f+0x1e6>
 8004304:	f000 fcda 	bl	8004cbc <fabsf>
 8004308:	4977      	ldr	r1, [pc, #476]	; (80044e8 <__ieee754_rem_pio2f+0x2a8>)
 800430a:	4607      	mov	r7, r0
 800430c:	f7fc f898 	bl	8000440 <__aeabi_fmul>
 8004310:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004314:	f7fb ff8c 	bl	8000230 <__addsf3>
 8004318:	f7fc fa58 	bl	80007cc <__aeabi_f2iz>
 800431c:	4605      	mov	r5, r0
 800431e:	f7fc f83b 	bl	8000398 <__aeabi_i2f>
 8004322:	496b      	ldr	r1, [pc, #428]	; (80044d0 <__ieee754_rem_pio2f+0x290>)
 8004324:	4681      	mov	r9, r0
 8004326:	f7fc f88b 	bl	8000440 <__aeabi_fmul>
 800432a:	4601      	mov	r1, r0
 800432c:	4638      	mov	r0, r7
 800432e:	f7fb ff7d 	bl	800022c <__aeabi_fsub>
 8004332:	4969      	ldr	r1, [pc, #420]	; (80044d8 <__ieee754_rem_pio2f+0x298>)
 8004334:	4680      	mov	r8, r0
 8004336:	4648      	mov	r0, r9
 8004338:	f7fc f882 	bl	8000440 <__aeabi_fmul>
 800433c:	2d1f      	cmp	r5, #31
 800433e:	4607      	mov	r7, r0
 8004340:	dc0c      	bgt.n	800435c <__ieee754_rem_pio2f+0x11c>
 8004342:	4a6a      	ldr	r2, [pc, #424]	; (80044ec <__ieee754_rem_pio2f+0x2ac>)
 8004344:	1e69      	subs	r1, r5, #1
 8004346:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800434a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <__ieee754_rem_pio2f+0x11c>
 8004352:	4639      	mov	r1, r7
 8004354:	4640      	mov	r0, r8
 8004356:	f7fb ff69 	bl	800022c <__aeabi_fsub>
 800435a:	e00b      	b.n	8004374 <__ieee754_rem_pio2f+0x134>
 800435c:	4639      	mov	r1, r7
 800435e:	4640      	mov	r0, r8
 8004360:	f7fb ff64 	bl	800022c <__aeabi_fsub>
 8004364:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004368:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800436c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8004370:	2e08      	cmp	r6, #8
 8004372:	dc01      	bgt.n	8004378 <__ieee754_rem_pio2f+0x138>
 8004374:	6020      	str	r0, [r4, #0]
 8004376:	e026      	b.n	80043c6 <__ieee754_rem_pio2f+0x186>
 8004378:	4958      	ldr	r1, [pc, #352]	; (80044dc <__ieee754_rem_pio2f+0x29c>)
 800437a:	4648      	mov	r0, r9
 800437c:	f7fc f860 	bl	8000440 <__aeabi_fmul>
 8004380:	4607      	mov	r7, r0
 8004382:	4601      	mov	r1, r0
 8004384:	4640      	mov	r0, r8
 8004386:	f7fb ff51 	bl	800022c <__aeabi_fsub>
 800438a:	4601      	mov	r1, r0
 800438c:	4606      	mov	r6, r0
 800438e:	4640      	mov	r0, r8
 8004390:	f7fb ff4c 	bl	800022c <__aeabi_fsub>
 8004394:	4639      	mov	r1, r7
 8004396:	f7fb ff49 	bl	800022c <__aeabi_fsub>
 800439a:	4607      	mov	r7, r0
 800439c:	4950      	ldr	r1, [pc, #320]	; (80044e0 <__ieee754_rem_pio2f+0x2a0>)
 800439e:	4648      	mov	r0, r9
 80043a0:	f7fc f84e 	bl	8000440 <__aeabi_fmul>
 80043a4:	4639      	mov	r1, r7
 80043a6:	f7fb ff41 	bl	800022c <__aeabi_fsub>
 80043aa:	4601      	mov	r1, r0
 80043ac:	4607      	mov	r7, r0
 80043ae:	4630      	mov	r0, r6
 80043b0:	f7fb ff3c 	bl	800022c <__aeabi_fsub>
 80043b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80043b8:	ebab 0b03 	sub.w	fp, fp, r3
 80043bc:	f1bb 0f19 	cmp.w	fp, #25
 80043c0:	dc16      	bgt.n	80043f0 <__ieee754_rem_pio2f+0x1b0>
 80043c2:	46b0      	mov	r8, r6
 80043c4:	6020      	str	r0, [r4, #0]
 80043c6:	6826      	ldr	r6, [r4, #0]
 80043c8:	4640      	mov	r0, r8
 80043ca:	4631      	mov	r1, r6
 80043cc:	f7fb ff2e 	bl	800022c <__aeabi_fsub>
 80043d0:	4639      	mov	r1, r7
 80043d2:	f7fb ff2b 	bl	800022c <__aeabi_fsub>
 80043d6:	f1ba 0f00 	cmp.w	sl, #0
 80043da:	6060      	str	r0, [r4, #4]
 80043dc:	f6bf af5a 	bge.w	8004294 <__ieee754_rem_pio2f+0x54>
 80043e0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80043e4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80043e8:	6026      	str	r6, [r4, #0]
 80043ea:	6060      	str	r0, [r4, #4]
 80043ec:	426d      	negs	r5, r5
 80043ee:	e751      	b.n	8004294 <__ieee754_rem_pio2f+0x54>
 80043f0:	493f      	ldr	r1, [pc, #252]	; (80044f0 <__ieee754_rem_pio2f+0x2b0>)
 80043f2:	4648      	mov	r0, r9
 80043f4:	f7fc f824 	bl	8000440 <__aeabi_fmul>
 80043f8:	4607      	mov	r7, r0
 80043fa:	4601      	mov	r1, r0
 80043fc:	4630      	mov	r0, r6
 80043fe:	f7fb ff15 	bl	800022c <__aeabi_fsub>
 8004402:	4601      	mov	r1, r0
 8004404:	4680      	mov	r8, r0
 8004406:	4630      	mov	r0, r6
 8004408:	f7fb ff10 	bl	800022c <__aeabi_fsub>
 800440c:	4639      	mov	r1, r7
 800440e:	f7fb ff0d 	bl	800022c <__aeabi_fsub>
 8004412:	4606      	mov	r6, r0
 8004414:	4937      	ldr	r1, [pc, #220]	; (80044f4 <__ieee754_rem_pio2f+0x2b4>)
 8004416:	4648      	mov	r0, r9
 8004418:	f7fc f812 	bl	8000440 <__aeabi_fmul>
 800441c:	4631      	mov	r1, r6
 800441e:	f7fb ff05 	bl	800022c <__aeabi_fsub>
 8004422:	4607      	mov	r7, r0
 8004424:	e795      	b.n	8004352 <__ieee754_rem_pio2f+0x112>
 8004426:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800442a:	db05      	blt.n	8004438 <__ieee754_rem_pio2f+0x1f8>
 800442c:	4601      	mov	r1, r0
 800442e:	f7fb fefd 	bl	800022c <__aeabi_fsub>
 8004432:	6060      	str	r0, [r4, #4]
 8004434:	6020      	str	r0, [r4, #0]
 8004436:	e710      	b.n	800425a <__ieee754_rem_pio2f+0x1a>
 8004438:	15f7      	asrs	r7, r6, #23
 800443a:	3f86      	subs	r7, #134	; 0x86
 800443c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8004440:	4630      	mov	r0, r6
 8004442:	f7fc f9c3 	bl	80007cc <__aeabi_f2iz>
 8004446:	f7fb ffa7 	bl	8000398 <__aeabi_i2f>
 800444a:	4601      	mov	r1, r0
 800444c:	9003      	str	r0, [sp, #12]
 800444e:	4630      	mov	r0, r6
 8004450:	f7fb feec 	bl	800022c <__aeabi_fsub>
 8004454:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004458:	f7fb fff2 	bl	8000440 <__aeabi_fmul>
 800445c:	4606      	mov	r6, r0
 800445e:	f7fc f9b5 	bl	80007cc <__aeabi_f2iz>
 8004462:	f7fb ff99 	bl	8000398 <__aeabi_i2f>
 8004466:	4601      	mov	r1, r0
 8004468:	9004      	str	r0, [sp, #16]
 800446a:	4605      	mov	r5, r0
 800446c:	4630      	mov	r0, r6
 800446e:	f7fb fedd 	bl	800022c <__aeabi_fsub>
 8004472:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004476:	f7fb ffe3 	bl	8000440 <__aeabi_fmul>
 800447a:	2100      	movs	r1, #0
 800447c:	9005      	str	r0, [sp, #20]
 800447e:	f7fc f973 	bl	8000768 <__aeabi_fcmpeq>
 8004482:	b1f0      	cbz	r0, 80044c2 <__ieee754_rem_pio2f+0x282>
 8004484:	2100      	movs	r1, #0
 8004486:	4628      	mov	r0, r5
 8004488:	f7fc f96e 	bl	8000768 <__aeabi_fcmpeq>
 800448c:	2800      	cmp	r0, #0
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2302      	moveq	r3, #2
 8004494:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <__ieee754_rem_pio2f+0x2b8>)
 8004496:	4621      	mov	r1, r4
 8004498:	9201      	str	r2, [sp, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	a803      	add	r0, sp, #12
 800449e:	9200      	str	r2, [sp, #0]
 80044a0:	463a      	mov	r2, r7
 80044a2:	f000 f82b 	bl	80044fc <__kernel_rem_pio2f>
 80044a6:	f1ba 0f00 	cmp.w	sl, #0
 80044aa:	4605      	mov	r5, r0
 80044ac:	f6bf aef2 	bge.w	8004294 <__ieee754_rem_pio2f+0x54>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	6863      	ldr	r3, [r4, #4]
 80044ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80044be:	6063      	str	r3, [r4, #4]
 80044c0:	e794      	b.n	80043ec <__ieee754_rem_pio2f+0x1ac>
 80044c2:	2303      	movs	r3, #3
 80044c4:	e7e6      	b.n	8004494 <__ieee754_rem_pio2f+0x254>
 80044c6:	bf00      	nop
 80044c8:	3f490fd8 	.word	0x3f490fd8
 80044cc:	4016cbe3 	.word	0x4016cbe3
 80044d0:	3fc90f80 	.word	0x3fc90f80
 80044d4:	3fc90fd0 	.word	0x3fc90fd0
 80044d8:	37354443 	.word	0x37354443
 80044dc:	37354400 	.word	0x37354400
 80044e0:	2e85a308 	.word	0x2e85a308
 80044e4:	43490f80 	.word	0x43490f80
 80044e8:	3f22f984 	.word	0x3f22f984
 80044ec:	08004e70 	.word	0x08004e70
 80044f0:	2e85a300 	.word	0x2e85a300
 80044f4:	248d3132 	.word	0x248d3132
 80044f8:	08004ef0 	.word	0x08004ef0

080044fc <__kernel_rem_pio2f>:
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004500:	b0db      	sub	sp, #364	; 0x16c
 8004502:	9202      	str	r2, [sp, #8]
 8004504:	9304      	str	r3, [sp, #16]
 8004506:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004508:	4bb2      	ldr	r3, [pc, #712]	; (80047d4 <__kernel_rem_pio2f+0x2d8>)
 800450a:	9005      	str	r0, [sp, #20]
 800450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004510:	9100      	str	r1, [sp, #0]
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	9b04      	ldr	r3, [sp, #16]
 8004516:	3b01      	subs	r3, #1
 8004518:	9303      	str	r3, [sp, #12]
 800451a:	9b02      	ldr	r3, [sp, #8]
 800451c:	1d1a      	adds	r2, r3, #4
 800451e:	f2c0 809b 	blt.w	8004658 <__kernel_rem_pio2f+0x15c>
 8004522:	1edc      	subs	r4, r3, #3
 8004524:	bf48      	it	mi
 8004526:	1d1c      	addmi	r4, r3, #4
 8004528:	10e4      	asrs	r4, r4, #3
 800452a:	2500      	movs	r5, #0
 800452c:	f04f 0b00 	mov.w	fp, #0
 8004530:	1c67      	adds	r7, r4, #1
 8004532:	00fb      	lsls	r3, r7, #3
 8004534:	9306      	str	r3, [sp, #24]
 8004536:	9b02      	ldr	r3, [sp, #8]
 8004538:	9a03      	ldr	r2, [sp, #12]
 800453a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800453e:	9b01      	ldr	r3, [sp, #4]
 8004540:	eba4 0802 	sub.w	r8, r4, r2
 8004544:	eb03 0902 	add.w	r9, r3, r2
 8004548:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800454a:	ae1e      	add	r6, sp, #120	; 0x78
 800454c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8004550:	454d      	cmp	r5, r9
 8004552:	f340 8083 	ble.w	800465c <__kernel_rem_pio2f+0x160>
 8004556:	9a04      	ldr	r2, [sp, #16]
 8004558:	ab1e      	add	r3, sp, #120	; 0x78
 800455a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800455e:	f04f 0900 	mov.w	r9, #0
 8004562:	2300      	movs	r3, #0
 8004564:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8004568:	9a01      	ldr	r2, [sp, #4]
 800456a:	4591      	cmp	r9, r2
 800456c:	f340 809e 	ble.w	80046ac <__kernel_rem_pio2f+0x1b0>
 8004570:	4613      	mov	r3, r2
 8004572:	aa0a      	add	r2, sp, #40	; 0x28
 8004574:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004578:	9308      	str	r3, [sp, #32]
 800457a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800457c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004580:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004584:	9307      	str	r3, [sp, #28]
 8004586:	ac0a      	add	r4, sp, #40	; 0x28
 8004588:	4626      	mov	r6, r4
 800458a:	46c3      	mov	fp, r8
 800458c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8004590:	ab5a      	add	r3, sp, #360	; 0x168
 8004592:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8004596:	f853 5c50 	ldr.w	r5, [r3, #-80]
 800459a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800459e:	f1bb 0f00 	cmp.w	fp, #0
 80045a2:	f300 8088 	bgt.w	80046b6 <__kernel_rem_pio2f+0x1ba>
 80045a6:	4639      	mov	r1, r7
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 fbcd 	bl	8004d48 <scalbnf>
 80045ae:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80045b2:	4605      	mov	r5, r0
 80045b4:	f7fb ff44 	bl	8000440 <__aeabi_fmul>
 80045b8:	f000 fb84 	bl	8004cc4 <floorf>
 80045bc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80045c0:	f7fb ff3e 	bl	8000440 <__aeabi_fmul>
 80045c4:	4601      	mov	r1, r0
 80045c6:	4628      	mov	r0, r5
 80045c8:	f7fb fe30 	bl	800022c <__aeabi_fsub>
 80045cc:	4605      	mov	r5, r0
 80045ce:	f7fc f8fd 	bl	80007cc <__aeabi_f2iz>
 80045d2:	4606      	mov	r6, r0
 80045d4:	f7fb fee0 	bl	8000398 <__aeabi_i2f>
 80045d8:	4601      	mov	r1, r0
 80045da:	4628      	mov	r0, r5
 80045dc:	f7fb fe26 	bl	800022c <__aeabi_fsub>
 80045e0:	2f00      	cmp	r7, #0
 80045e2:	4681      	mov	r9, r0
 80045e4:	f340 8086 	ble.w	80046f4 <__kernel_rem_pio2f+0x1f8>
 80045e8:	f108 32ff 	add.w	r2, r8, #4294967295
 80045ec:	ab0a      	add	r3, sp, #40	; 0x28
 80045ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80045f2:	f1c7 0108 	rsb	r1, r7, #8
 80045f6:	fa45 f301 	asr.w	r3, r5, r1
 80045fa:	441e      	add	r6, r3
 80045fc:	408b      	lsls	r3, r1
 80045fe:	1aed      	subs	r5, r5, r3
 8004600:	f1c7 0007 	rsb	r0, r7, #7
 8004604:	ab0a      	add	r3, sp, #40	; 0x28
 8004606:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800460a:	4105      	asrs	r5, r0
 800460c:	2d00      	cmp	r5, #0
 800460e:	dd7f      	ble.n	8004710 <__kernel_rem_pio2f+0x214>
 8004610:	2200      	movs	r2, #0
 8004612:	4692      	mov	sl, r2
 8004614:	3601      	adds	r6, #1
 8004616:	4590      	cmp	r8, r2
 8004618:	f300 80b0 	bgt.w	800477c <__kernel_rem_pio2f+0x280>
 800461c:	2f00      	cmp	r7, #0
 800461e:	dd05      	ble.n	800462c <__kernel_rem_pio2f+0x130>
 8004620:	2f01      	cmp	r7, #1
 8004622:	f000 80bd 	beq.w	80047a0 <__kernel_rem_pio2f+0x2a4>
 8004626:	2f02      	cmp	r7, #2
 8004628:	f000 80c5 	beq.w	80047b6 <__kernel_rem_pio2f+0x2ba>
 800462c:	2d02      	cmp	r5, #2
 800462e:	d16f      	bne.n	8004710 <__kernel_rem_pio2f+0x214>
 8004630:	4649      	mov	r1, r9
 8004632:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004636:	f7fb fdf9 	bl	800022c <__aeabi_fsub>
 800463a:	4681      	mov	r9, r0
 800463c:	f1ba 0f00 	cmp.w	sl, #0
 8004640:	d066      	beq.n	8004710 <__kernel_rem_pio2f+0x214>
 8004642:	4639      	mov	r1, r7
 8004644:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004648:	f000 fb7e 	bl	8004d48 <scalbnf>
 800464c:	4601      	mov	r1, r0
 800464e:	4648      	mov	r0, r9
 8004650:	f7fb fdec 	bl	800022c <__aeabi_fsub>
 8004654:	4681      	mov	r9, r0
 8004656:	e05b      	b.n	8004710 <__kernel_rem_pio2f+0x214>
 8004658:	2400      	movs	r4, #0
 800465a:	e766      	b.n	800452a <__kernel_rem_pio2f+0x2e>
 800465c:	eb18 0f05 	cmn.w	r8, r5
 8004660:	d407      	bmi.n	8004672 <__kernel_rem_pio2f+0x176>
 8004662:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8004666:	f7fb fe97 	bl	8000398 <__aeabi_i2f>
 800466a:	f846 0b04 	str.w	r0, [r6], #4
 800466e:	3501      	adds	r5, #1
 8004670:	e76e      	b.n	8004550 <__kernel_rem_pio2f+0x54>
 8004672:	4658      	mov	r0, fp
 8004674:	e7f9      	b.n	800466a <__kernel_rem_pio2f+0x16e>
 8004676:	9307      	str	r3, [sp, #28]
 8004678:	9b05      	ldr	r3, [sp, #20]
 800467a:	f8da 1000 	ldr.w	r1, [sl]
 800467e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004682:	f7fb fedd 	bl	8000440 <__aeabi_fmul>
 8004686:	4601      	mov	r1, r0
 8004688:	4630      	mov	r0, r6
 800468a:	f7fb fdd1 	bl	8000230 <__addsf3>
 800468e:	4606      	mov	r6, r0
 8004690:	9b07      	ldr	r3, [sp, #28]
 8004692:	f108 0801 	add.w	r8, r8, #1
 8004696:	9a03      	ldr	r2, [sp, #12]
 8004698:	f1aa 0a04 	sub.w	sl, sl, #4
 800469c:	4590      	cmp	r8, r2
 800469e:	ddea      	ble.n	8004676 <__kernel_rem_pio2f+0x17a>
 80046a0:	f84b 6b04 	str.w	r6, [fp], #4
 80046a4:	f109 0901 	add.w	r9, r9, #1
 80046a8:	3504      	adds	r5, #4
 80046aa:	e75d      	b.n	8004568 <__kernel_rem_pio2f+0x6c>
 80046ac:	46aa      	mov	sl, r5
 80046ae:	461e      	mov	r6, r3
 80046b0:	f04f 0800 	mov.w	r8, #0
 80046b4:	e7ef      	b.n	8004696 <__kernel_rem_pio2f+0x19a>
 80046b6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80046ba:	4628      	mov	r0, r5
 80046bc:	f7fb fec0 	bl	8000440 <__aeabi_fmul>
 80046c0:	f7fc f884 	bl	80007cc <__aeabi_f2iz>
 80046c4:	f7fb fe68 	bl	8000398 <__aeabi_i2f>
 80046c8:	4649      	mov	r1, r9
 80046ca:	9009      	str	r0, [sp, #36]	; 0x24
 80046cc:	f7fb feb8 	bl	8000440 <__aeabi_fmul>
 80046d0:	4601      	mov	r1, r0
 80046d2:	4628      	mov	r0, r5
 80046d4:	f7fb fdaa 	bl	800022c <__aeabi_fsub>
 80046d8:	f7fc f878 	bl	80007cc <__aeabi_f2iz>
 80046dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046e2:	f846 0b04 	str.w	r0, [r6], #4
 80046e6:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fb fda0 	bl	8000230 <__addsf3>
 80046f0:	4605      	mov	r5, r0
 80046f2:	e754      	b.n	800459e <__kernel_rem_pio2f+0xa2>
 80046f4:	d106      	bne.n	8004704 <__kernel_rem_pio2f+0x208>
 80046f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80046fa:	aa0a      	add	r2, sp, #40	; 0x28
 80046fc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8004700:	11ed      	asrs	r5, r5, #7
 8004702:	e783      	b.n	800460c <__kernel_rem_pio2f+0x110>
 8004704:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004708:	f7fc f84c 	bl	80007a4 <__aeabi_fcmpge>
 800470c:	4605      	mov	r5, r0
 800470e:	bb98      	cbnz	r0, 8004778 <__kernel_rem_pio2f+0x27c>
 8004710:	2100      	movs	r1, #0
 8004712:	4648      	mov	r0, r9
 8004714:	f7fc f828 	bl	8000768 <__aeabi_fcmpeq>
 8004718:	2800      	cmp	r0, #0
 800471a:	f000 8098 	beq.w	800484e <__kernel_rem_pio2f+0x352>
 800471e:	f108 34ff 	add.w	r4, r8, #4294967295
 8004722:	4623      	mov	r3, r4
 8004724:	2200      	movs	r2, #0
 8004726:	9901      	ldr	r1, [sp, #4]
 8004728:	428b      	cmp	r3, r1
 800472a:	da4c      	bge.n	80047c6 <__kernel_rem_pio2f+0x2ca>
 800472c:	2a00      	cmp	r2, #0
 800472e:	d07a      	beq.n	8004826 <__kernel_rem_pio2f+0x32a>
 8004730:	ab0a      	add	r3, sp, #40	; 0x28
 8004732:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004736:	3f08      	subs	r7, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8086 	beq.w	800484a <__kernel_rem_pio2f+0x34e>
 800473e:	4639      	mov	r1, r7
 8004740:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004744:	f000 fb00 	bl	8004d48 <scalbnf>
 8004748:	46a2      	mov	sl, r4
 800474a:	4681      	mov	r9, r0
 800474c:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8004750:	af46      	add	r7, sp, #280	; 0x118
 8004752:	f1ba 0f00 	cmp.w	sl, #0
 8004756:	f280 80af 	bge.w	80048b8 <__kernel_rem_pio2f+0x3bc>
 800475a:	4627      	mov	r7, r4
 800475c:	2200      	movs	r2, #0
 800475e:	2f00      	cmp	r7, #0
 8004760:	f2c0 80d9 	blt.w	8004916 <__kernel_rem_pio2f+0x41a>
 8004764:	a946      	add	r1, sp, #280	; 0x118
 8004766:	4690      	mov	r8, r2
 8004768:	f04f 0a00 	mov.w	sl, #0
 800476c:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <__kernel_rem_pio2f+0x2dc>)
 800476e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8004772:	eba4 0907 	sub.w	r9, r4, r7
 8004776:	e0c2      	b.n	80048fe <__kernel_rem_pio2f+0x402>
 8004778:	2502      	movs	r5, #2
 800477a:	e749      	b.n	8004610 <__kernel_rem_pio2f+0x114>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	f1ba 0f00 	cmp.w	sl, #0
 8004782:	d108      	bne.n	8004796 <__kernel_rem_pio2f+0x29a>
 8004784:	b11b      	cbz	r3, 800478e <__kernel_rem_pio2f+0x292>
 8004786:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	2301      	movs	r3, #1
 800478e:	469a      	mov	sl, r3
 8004790:	3201      	adds	r2, #1
 8004792:	3404      	adds	r4, #4
 8004794:	e73f      	b.n	8004616 <__kernel_rem_pio2f+0x11a>
 8004796:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	4653      	mov	r3, sl
 800479e:	e7f6      	b.n	800478e <__kernel_rem_pio2f+0x292>
 80047a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80047a4:	ab0a      	add	r3, sp, #40	; 0x28
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ae:	a90a      	add	r1, sp, #40	; 0x28
 80047b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80047b4:	e73a      	b.n	800462c <__kernel_rem_pio2f+0x130>
 80047b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80047ba:	ab0a      	add	r3, sp, #40	; 0x28
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c4:	e7f3      	b.n	80047ae <__kernel_rem_pio2f+0x2b2>
 80047c6:	a90a      	add	r1, sp, #40	; 0x28
 80047c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	430a      	orrs	r2, r1
 80047d0:	e7a9      	b.n	8004726 <__kernel_rem_pio2f+0x22a>
 80047d2:	bf00      	nop
 80047d4:	08005234 	.word	0x08005234
 80047d8:	08005208 	.word	0x08005208
 80047dc:	3301      	adds	r3, #1
 80047de:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80047e2:	2900      	cmp	r1, #0
 80047e4:	d0fa      	beq.n	80047dc <__kernel_rem_pio2f+0x2e0>
 80047e6:	9a04      	ldr	r2, [sp, #16]
 80047e8:	f108 0501 	add.w	r5, r8, #1
 80047ec:	eb08 0402 	add.w	r4, r8, r2
 80047f0:	aa1e      	add	r2, sp, #120	; 0x78
 80047f2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80047f6:	4498      	add	r8, r3
 80047f8:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80047fc:	45a8      	cmp	r8, r5
 80047fe:	f6ff aec2 	blt.w	8004586 <__kernel_rem_pio2f+0x8a>
 8004802:	9b07      	ldr	r3, [sp, #28]
 8004804:	46a3      	mov	fp, r4
 8004806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800480a:	f7fb fdc5 	bl	8000398 <__aeabi_i2f>
 800480e:	f04f 0a00 	mov.w	sl, #0
 8004812:	2600      	movs	r6, #0
 8004814:	6020      	str	r0, [r4, #0]
 8004816:	9b03      	ldr	r3, [sp, #12]
 8004818:	459a      	cmp	sl, r3
 800481a:	dd07      	ble.n	800482c <__kernel_rem_pio2f+0x330>
 800481c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8004820:	3404      	adds	r4, #4
 8004822:	3501      	adds	r5, #1
 8004824:	e7ea      	b.n	80047fc <__kernel_rem_pio2f+0x300>
 8004826:	2301      	movs	r3, #1
 8004828:	9a08      	ldr	r2, [sp, #32]
 800482a:	e7d8      	b.n	80047de <__kernel_rem_pio2f+0x2e2>
 800482c:	9b05      	ldr	r3, [sp, #20]
 800482e:	f85b 0904 	ldr.w	r0, [fp], #-4
 8004832:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8004836:	f7fb fe03 	bl	8000440 <__aeabi_fmul>
 800483a:	4601      	mov	r1, r0
 800483c:	4630      	mov	r0, r6
 800483e:	f7fb fcf7 	bl	8000230 <__addsf3>
 8004842:	f10a 0a01 	add.w	sl, sl, #1
 8004846:	4606      	mov	r6, r0
 8004848:	e7e5      	b.n	8004816 <__kernel_rem_pio2f+0x31a>
 800484a:	3c01      	subs	r4, #1
 800484c:	e770      	b.n	8004730 <__kernel_rem_pio2f+0x234>
 800484e:	9b06      	ldr	r3, [sp, #24]
 8004850:	9a02      	ldr	r2, [sp, #8]
 8004852:	4648      	mov	r0, r9
 8004854:	1a99      	subs	r1, r3, r2
 8004856:	f000 fa77 	bl	8004d48 <scalbnf>
 800485a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800485e:	4604      	mov	r4, r0
 8004860:	f7fb ffa0 	bl	80007a4 <__aeabi_fcmpge>
 8004864:	b300      	cbz	r0, 80048a8 <__kernel_rem_pio2f+0x3ac>
 8004866:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800486a:	4620      	mov	r0, r4
 800486c:	f7fb fde8 	bl	8000440 <__aeabi_fmul>
 8004870:	f7fb ffac 	bl	80007cc <__aeabi_f2iz>
 8004874:	f7fb fd90 	bl	8000398 <__aeabi_i2f>
 8004878:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800487c:	4681      	mov	r9, r0
 800487e:	f7fb fddf 	bl	8000440 <__aeabi_fmul>
 8004882:	4601      	mov	r1, r0
 8004884:	4620      	mov	r0, r4
 8004886:	f7fb fcd1 	bl	800022c <__aeabi_fsub>
 800488a:	f7fb ff9f 	bl	80007cc <__aeabi_f2iz>
 800488e:	ab0a      	add	r3, sp, #40	; 0x28
 8004890:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004894:	4648      	mov	r0, r9
 8004896:	f7fb ff99 	bl	80007cc <__aeabi_f2iz>
 800489a:	f108 0401 	add.w	r4, r8, #1
 800489e:	ab0a      	add	r3, sp, #40	; 0x28
 80048a0:	3708      	adds	r7, #8
 80048a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80048a6:	e74a      	b.n	800473e <__kernel_rem_pio2f+0x242>
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7fb ff8f 	bl	80007cc <__aeabi_f2iz>
 80048ae:	ab0a      	add	r3, sp, #40	; 0x28
 80048b0:	4644      	mov	r4, r8
 80048b2:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80048b6:	e742      	b.n	800473e <__kernel_rem_pio2f+0x242>
 80048b8:	ab0a      	add	r3, sp, #40	; 0x28
 80048ba:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80048be:	f7fb fd6b 	bl	8000398 <__aeabi_i2f>
 80048c2:	4649      	mov	r1, r9
 80048c4:	f7fb fdbc 	bl	8000440 <__aeabi_fmul>
 80048c8:	4641      	mov	r1, r8
 80048ca:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80048ce:	4648      	mov	r0, r9
 80048d0:	f7fb fdb6 	bl	8000440 <__aeabi_fmul>
 80048d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048d8:	4681      	mov	r9, r0
 80048da:	e73a      	b.n	8004752 <__kernel_rem_pio2f+0x256>
 80048dc:	f853 0b04 	ldr.w	r0, [r3], #4
 80048e0:	f85b 1b04 	ldr.w	r1, [fp], #4
 80048e4:	9203      	str	r2, [sp, #12]
 80048e6:	9302      	str	r3, [sp, #8]
 80048e8:	f7fb fdaa 	bl	8000440 <__aeabi_fmul>
 80048ec:	4601      	mov	r1, r0
 80048ee:	4640      	mov	r0, r8
 80048f0:	f7fb fc9e 	bl	8000230 <__addsf3>
 80048f4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80048f8:	4680      	mov	r8, r0
 80048fa:	f10a 0a01 	add.w	sl, sl, #1
 80048fe:	9901      	ldr	r1, [sp, #4]
 8004900:	458a      	cmp	sl, r1
 8004902:	dc01      	bgt.n	8004908 <__kernel_rem_pio2f+0x40c>
 8004904:	45ca      	cmp	sl, r9
 8004906:	dde9      	ble.n	80048dc <__kernel_rem_pio2f+0x3e0>
 8004908:	ab5a      	add	r3, sp, #360	; 0x168
 800490a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800490e:	f849 8ca0 	str.w	r8, [r9, #-160]
 8004912:	3f01      	subs	r7, #1
 8004914:	e723      	b.n	800475e <__kernel_rem_pio2f+0x262>
 8004916:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8004918:	2b02      	cmp	r3, #2
 800491a:	dc07      	bgt.n	800492c <__kernel_rem_pio2f+0x430>
 800491c:	2b00      	cmp	r3, #0
 800491e:	dc4d      	bgt.n	80049bc <__kernel_rem_pio2f+0x4c0>
 8004920:	d02e      	beq.n	8004980 <__kernel_rem_pio2f+0x484>
 8004922:	f006 0007 	and.w	r0, r6, #7
 8004926:	b05b      	add	sp, #364	; 0x16c
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800492e:	2b03      	cmp	r3, #3
 8004930:	d1f7      	bne.n	8004922 <__kernel_rem_pio2f+0x426>
 8004932:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8004936:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800493a:	46b8      	mov	r8, r7
 800493c:	46a2      	mov	sl, r4
 800493e:	f1ba 0f00 	cmp.w	sl, #0
 8004942:	dc48      	bgt.n	80049d6 <__kernel_rem_pio2f+0x4da>
 8004944:	46a1      	mov	r9, r4
 8004946:	f1b9 0f01 	cmp.w	r9, #1
 800494a:	dc5f      	bgt.n	8004a0c <__kernel_rem_pio2f+0x510>
 800494c:	2000      	movs	r0, #0
 800494e:	2c01      	cmp	r4, #1
 8004950:	dc75      	bgt.n	8004a3e <__kernel_rem_pio2f+0x542>
 8004952:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8004954:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8004956:	2d00      	cmp	r5, #0
 8004958:	d177      	bne.n	8004a4a <__kernel_rem_pio2f+0x54e>
 800495a:	9900      	ldr	r1, [sp, #0]
 800495c:	600a      	str	r2, [r1, #0]
 800495e:	460a      	mov	r2, r1
 8004960:	604b      	str	r3, [r1, #4]
 8004962:	6090      	str	r0, [r2, #8]
 8004964:	e7dd      	b.n	8004922 <__kernel_rem_pio2f+0x426>
 8004966:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800496a:	f7fb fc61 	bl	8000230 <__addsf3>
 800496e:	3c01      	subs	r4, #1
 8004970:	2c00      	cmp	r4, #0
 8004972:	daf8      	bge.n	8004966 <__kernel_rem_pio2f+0x46a>
 8004974:	b10d      	cbz	r5, 800497a <__kernel_rem_pio2f+0x47e>
 8004976:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800497a:	9b00      	ldr	r3, [sp, #0]
 800497c:	6018      	str	r0, [r3, #0]
 800497e:	e7d0      	b.n	8004922 <__kernel_rem_pio2f+0x426>
 8004980:	2000      	movs	r0, #0
 8004982:	af32      	add	r7, sp, #200	; 0xc8
 8004984:	e7f4      	b.n	8004970 <__kernel_rem_pio2f+0x474>
 8004986:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800498a:	f7fb fc51 	bl	8000230 <__addsf3>
 800498e:	3f01      	subs	r7, #1
 8004990:	2f00      	cmp	r7, #0
 8004992:	daf8      	bge.n	8004986 <__kernel_rem_pio2f+0x48a>
 8004994:	b1bd      	cbz	r5, 80049c6 <__kernel_rem_pio2f+0x4ca>
 8004996:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800499a:	9a00      	ldr	r2, [sp, #0]
 800499c:	4601      	mov	r1, r0
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80049a2:	f7fb fc43 	bl	800022c <__aeabi_fsub>
 80049a6:	2701      	movs	r7, #1
 80049a8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80049ac:	42bc      	cmp	r4, r7
 80049ae:	da0c      	bge.n	80049ca <__kernel_rem_pio2f+0x4ce>
 80049b0:	b10d      	cbz	r5, 80049b6 <__kernel_rem_pio2f+0x4ba>
 80049b2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80049b6:	9b00      	ldr	r3, [sp, #0]
 80049b8:	6058      	str	r0, [r3, #4]
 80049ba:	e7b2      	b.n	8004922 <__kernel_rem_pio2f+0x426>
 80049bc:	4627      	mov	r7, r4
 80049be:	2000      	movs	r0, #0
 80049c0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80049c4:	e7e4      	b.n	8004990 <__kernel_rem_pio2f+0x494>
 80049c6:	4603      	mov	r3, r0
 80049c8:	e7e7      	b.n	800499a <__kernel_rem_pio2f+0x49e>
 80049ca:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80049ce:	f7fb fc2f 	bl	8000230 <__addsf3>
 80049d2:	3701      	adds	r7, #1
 80049d4:	e7ea      	b.n	80049ac <__kernel_rem_pio2f+0x4b0>
 80049d6:	f8d8 3000 	ldr.w	r3, [r8]
 80049da:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	9201      	str	r2, [sp, #4]
 80049e6:	f7fb fc23 	bl	8000230 <__addsf3>
 80049ea:	9a01      	ldr	r2, [sp, #4]
 80049ec:	4601      	mov	r1, r0
 80049ee:	4681      	mov	r9, r0
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fb fc1b 	bl	800022c <__aeabi_fsub>
 80049f6:	9b02      	ldr	r3, [sp, #8]
 80049f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049fc:	4619      	mov	r1, r3
 80049fe:	f7fb fc17 	bl	8000230 <__addsf3>
 8004a02:	f848 0904 	str.w	r0, [r8], #-4
 8004a06:	f8c8 9000 	str.w	r9, [r8]
 8004a0a:	e798      	b.n	800493e <__kernel_rem_pio2f+0x442>
 8004a0c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8004a10:	f8d7 a000 	ldr.w	sl, [r7]
 8004a14:	4618      	mov	r0, r3
 8004a16:	4651      	mov	r1, sl
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	f7fb fc09 	bl	8000230 <__addsf3>
 8004a1e:	9b01      	ldr	r3, [sp, #4]
 8004a20:	4601      	mov	r1, r0
 8004a22:	4680      	mov	r8, r0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fc01 	bl	800022c <__aeabi_fsub>
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	f7fb fc00 	bl	8000230 <__addsf3>
 8004a30:	f847 0904 	str.w	r0, [r7], #-4
 8004a34:	f109 39ff 	add.w	r9, r9, #4294967295
 8004a38:	f8c7 8000 	str.w	r8, [r7]
 8004a3c:	e783      	b.n	8004946 <__kernel_rem_pio2f+0x44a>
 8004a3e:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8004a42:	f7fb fbf5 	bl	8000230 <__addsf3>
 8004a46:	3c01      	subs	r4, #1
 8004a48:	e781      	b.n	800494e <__kernel_rem_pio2f+0x452>
 8004a4a:	9900      	ldr	r1, [sp, #0]
 8004a4c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8004a50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a54:	600a      	str	r2, [r1, #0]
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	460a      	mov	r2, r1
 8004a5a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004a5e:	e780      	b.n	8004962 <__kernel_rem_pio2f+0x466>

08004a60 <__kernel_tanf>:
 8004a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 8004a68:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	460e      	mov	r6, r1
 8004a70:	4690      	mov	r8, r2
 8004a72:	4607      	mov	r7, r0
 8004a74:	da1b      	bge.n	8004aae <__kernel_tanf+0x4e>
 8004a76:	f7fb fea9 	bl	80007cc <__aeabi_f2iz>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d12f      	bne.n	8004ade <__kernel_tanf+0x7e>
 8004a7e:	f108 0301 	add.w	r3, r8, #1
 8004a82:	ea53 030a 	orrs.w	r3, r3, sl
 8004a86:	d10c      	bne.n	8004aa2 <__kernel_tanf+0x42>
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 f917 	bl	8004cbc <fabsf>
 8004a8e:	4601      	mov	r1, r0
 8004a90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004a94:	f7fb fd88 	bl	80005a8 <__aeabi_fdiv>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	b003      	add	sp, #12
 8004a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa2:	f1b8 0f01 	cmp.w	r8, #1
 8004aa6:	d0f8      	beq.n	8004a9a <__kernel_tanf+0x3a>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4872      	ldr	r0, [pc, #456]	; (8004c74 <__kernel_tanf+0x214>)
 8004aac:	e7f2      	b.n	8004a94 <__kernel_tanf+0x34>
 8004aae:	4b72      	ldr	r3, [pc, #456]	; (8004c78 <__kernel_tanf+0x218>)
 8004ab0:	459a      	cmp	sl, r3
 8004ab2:	db14      	blt.n	8004ade <__kernel_tanf+0x7e>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	bfbe      	ittt	lt
 8004ab8:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 8004abc:	4604      	movlt	r4, r0
 8004abe:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 8004ac2:	486e      	ldr	r0, [pc, #440]	; (8004c7c <__kernel_tanf+0x21c>)
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	f7fb fbb1 	bl	800022c <__aeabi_fsub>
 8004aca:	4604      	mov	r4, r0
 8004acc:	4631      	mov	r1, r6
 8004ace:	486c      	ldr	r0, [pc, #432]	; (8004c80 <__kernel_tanf+0x220>)
 8004ad0:	f7fb fbac 	bl	800022c <__aeabi_fsub>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	f7fb fbab 	bl	8000230 <__addsf3>
 8004ada:	2600      	movs	r6, #0
 8004adc:	4604      	mov	r4, r0
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7fb fcad 	bl	8000440 <__aeabi_fmul>
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	4681      	mov	r9, r0
 8004aea:	f7fb fca9 	bl	8000440 <__aeabi_fmul>
 8004aee:	4649      	mov	r1, r9
 8004af0:	4605      	mov	r5, r0
 8004af2:	4620      	mov	r0, r4
 8004af4:	f7fb fca4 	bl	8000440 <__aeabi_fmul>
 8004af8:	4962      	ldr	r1, [pc, #392]	; (8004c84 <__kernel_tanf+0x224>)
 8004afa:	4683      	mov	fp, r0
 8004afc:	4628      	mov	r0, r5
 8004afe:	f7fb fc9f 	bl	8000440 <__aeabi_fmul>
 8004b02:	4961      	ldr	r1, [pc, #388]	; (8004c88 <__kernel_tanf+0x228>)
 8004b04:	f7fb fb94 	bl	8000230 <__addsf3>
 8004b08:	4629      	mov	r1, r5
 8004b0a:	f7fb fc99 	bl	8000440 <__aeabi_fmul>
 8004b0e:	495f      	ldr	r1, [pc, #380]	; (8004c8c <__kernel_tanf+0x22c>)
 8004b10:	f7fb fb8e 	bl	8000230 <__addsf3>
 8004b14:	4629      	mov	r1, r5
 8004b16:	f7fb fc93 	bl	8000440 <__aeabi_fmul>
 8004b1a:	495d      	ldr	r1, [pc, #372]	; (8004c90 <__kernel_tanf+0x230>)
 8004b1c:	f7fb fb88 	bl	8000230 <__addsf3>
 8004b20:	4629      	mov	r1, r5
 8004b22:	f7fb fc8d 	bl	8000440 <__aeabi_fmul>
 8004b26:	495b      	ldr	r1, [pc, #364]	; (8004c94 <__kernel_tanf+0x234>)
 8004b28:	f7fb fb82 	bl	8000230 <__addsf3>
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f7fb fc87 	bl	8000440 <__aeabi_fmul>
 8004b32:	4959      	ldr	r1, [pc, #356]	; (8004c98 <__kernel_tanf+0x238>)
 8004b34:	f7fb fb7c 	bl	8000230 <__addsf3>
 8004b38:	4649      	mov	r1, r9
 8004b3a:	f7fb fc81 	bl	8000440 <__aeabi_fmul>
 8004b3e:	4957      	ldr	r1, [pc, #348]	; (8004c9c <__kernel_tanf+0x23c>)
 8004b40:	9001      	str	r0, [sp, #4]
 8004b42:	4628      	mov	r0, r5
 8004b44:	f7fb fc7c 	bl	8000440 <__aeabi_fmul>
 8004b48:	4955      	ldr	r1, [pc, #340]	; (8004ca0 <__kernel_tanf+0x240>)
 8004b4a:	f7fb fb71 	bl	8000230 <__addsf3>
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7fb fc76 	bl	8000440 <__aeabi_fmul>
 8004b54:	4953      	ldr	r1, [pc, #332]	; (8004ca4 <__kernel_tanf+0x244>)
 8004b56:	f7fb fb6b 	bl	8000230 <__addsf3>
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	f7fb fc70 	bl	8000440 <__aeabi_fmul>
 8004b60:	4951      	ldr	r1, [pc, #324]	; (8004ca8 <__kernel_tanf+0x248>)
 8004b62:	f7fb fb65 	bl	8000230 <__addsf3>
 8004b66:	4629      	mov	r1, r5
 8004b68:	f7fb fc6a 	bl	8000440 <__aeabi_fmul>
 8004b6c:	494f      	ldr	r1, [pc, #316]	; (8004cac <__kernel_tanf+0x24c>)
 8004b6e:	f7fb fb5f 	bl	8000230 <__addsf3>
 8004b72:	4629      	mov	r1, r5
 8004b74:	f7fb fc64 	bl	8000440 <__aeabi_fmul>
 8004b78:	494d      	ldr	r1, [pc, #308]	; (8004cb0 <__kernel_tanf+0x250>)
 8004b7a:	f7fb fb59 	bl	8000230 <__addsf3>
 8004b7e:	9b01      	ldr	r3, [sp, #4]
 8004b80:	4601      	mov	r1, r0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fb fb54 	bl	8000230 <__addsf3>
 8004b88:	4659      	mov	r1, fp
 8004b8a:	f7fb fc59 	bl	8000440 <__aeabi_fmul>
 8004b8e:	4631      	mov	r1, r6
 8004b90:	f7fb fb4e 	bl	8000230 <__addsf3>
 8004b94:	4649      	mov	r1, r9
 8004b96:	f7fb fc53 	bl	8000440 <__aeabi_fmul>
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	f7fb fb48 	bl	8000230 <__addsf3>
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	4944      	ldr	r1, [pc, #272]	; (8004cb4 <__kernel_tanf+0x254>)
 8004ba4:	4658      	mov	r0, fp
 8004ba6:	f7fb fc4b 	bl	8000440 <__aeabi_fmul>
 8004baa:	4629      	mov	r1, r5
 8004bac:	f7fb fb40 	bl	8000230 <__addsf3>
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	4681      	mov	r9, r0
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7fb fb3b 	bl	8000230 <__addsf3>
 8004bba:	4b2f      	ldr	r3, [pc, #188]	; (8004c78 <__kernel_tanf+0x218>)
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	459a      	cmp	sl, r3
 8004bc0:	db2b      	blt.n	8004c1a <__kernel_tanf+0x1ba>
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	f7fb fbe8 	bl	8000398 <__aeabi_i2f>
 8004bc8:	4629      	mov	r1, r5
 8004bca:	4606      	mov	r6, r0
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f7fb fc37 	bl	8000440 <__aeabi_fmul>
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f7fb fb2a 	bl	8000230 <__addsf3>
 8004bdc:	4601      	mov	r1, r0
 8004bde:	4640      	mov	r0, r8
 8004be0:	f7fb fce2 	bl	80005a8 <__aeabi_fdiv>
 8004be4:	4649      	mov	r1, r9
 8004be6:	f7fb fb21 	bl	800022c <__aeabi_fsub>
 8004bea:	4601      	mov	r1, r0
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7fb fb1d 	bl	800022c <__aeabi_fsub>
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	f7fb fb1c 	bl	8000230 <__addsf3>
 8004bf8:	4601      	mov	r1, r0
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7fb fb16 	bl	800022c <__aeabi_fsub>
 8004c00:	17bf      	asrs	r7, r7, #30
 8004c02:	f007 0702 	and.w	r7, r7, #2
 8004c06:	4604      	mov	r4, r0
 8004c08:	f1c7 0001 	rsb	r0, r7, #1
 8004c0c:	f7fb fbc4 	bl	8000398 <__aeabi_i2f>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4620      	mov	r0, r4
 8004c14:	f7fb fc14 	bl	8000440 <__aeabi_fmul>
 8004c18:	e73e      	b.n	8004a98 <__kernel_tanf+0x38>
 8004c1a:	f1b8 0f01 	cmp.w	r8, #1
 8004c1e:	d027      	beq.n	8004c70 <__kernel_tanf+0x210>
 8004c20:	4e25      	ldr	r6, [pc, #148]	; (8004cb8 <__kernel_tanf+0x258>)
 8004c22:	4601      	mov	r1, r0
 8004c24:	ea06 0800 	and.w	r8, r6, r0
 8004c28:	4812      	ldr	r0, [pc, #72]	; (8004c74 <__kernel_tanf+0x214>)
 8004c2a:	f7fb fcbd 	bl	80005a8 <__aeabi_fdiv>
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4006      	ands	r6, r0
 8004c32:	4607      	mov	r7, r0
 8004c34:	4640      	mov	r0, r8
 8004c36:	f7fb faf9 	bl	800022c <__aeabi_fsub>
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	4648      	mov	r0, r9
 8004c3e:	f7fb faf5 	bl	800022c <__aeabi_fsub>
 8004c42:	4631      	mov	r1, r6
 8004c44:	f7fb fbfc 	bl	8000440 <__aeabi_fmul>
 8004c48:	4631      	mov	r1, r6
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	f7fb fbf7 	bl	8000440 <__aeabi_fmul>
 8004c52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004c56:	f7fb faeb 	bl	8000230 <__addsf3>
 8004c5a:	4601      	mov	r1, r0
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f7fb fae7 	bl	8000230 <__addsf3>
 8004c62:	4639      	mov	r1, r7
 8004c64:	f7fb fbec 	bl	8000440 <__aeabi_fmul>
 8004c68:	4631      	mov	r1, r6
 8004c6a:	f7fb fae1 	bl	8000230 <__addsf3>
 8004c6e:	e713      	b.n	8004a98 <__kernel_tanf+0x38>
 8004c70:	4604      	mov	r4, r0
 8004c72:	e712      	b.n	8004a9a <__kernel_tanf+0x3a>
 8004c74:	bf800000 	.word	0xbf800000
 8004c78:	3f2ca140 	.word	0x3f2ca140
 8004c7c:	3f490fda 	.word	0x3f490fda
 8004c80:	33222168 	.word	0x33222168
 8004c84:	37d95384 	.word	0x37d95384
 8004c88:	3895c07a 	.word	0x3895c07a
 8004c8c:	398137b9 	.word	0x398137b9
 8004c90:	3abede48 	.word	0x3abede48
 8004c94:	3c11371f 	.word	0x3c11371f
 8004c98:	3d5d0dd1 	.word	0x3d5d0dd1
 8004c9c:	b79bae5f 	.word	0xb79bae5f
 8004ca0:	38a3f445 	.word	0x38a3f445
 8004ca4:	3a1a26c8 	.word	0x3a1a26c8
 8004ca8:	3b6b6916 	.word	0x3b6b6916
 8004cac:	3cb327a4 	.word	0x3cb327a4
 8004cb0:	3e088889 	.word	0x3e088889
 8004cb4:	3eaaaaab 	.word	0x3eaaaaab
 8004cb8:	fffff000 	.word	0xfffff000

08004cbc <fabsf>:
 8004cbc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004cc0:	4770      	bx	lr
	...

08004cc4 <floorf>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8004cca:	3d7f      	subs	r5, #127	; 0x7f
 8004ccc:	2d16      	cmp	r5, #22
 8004cce:	4601      	mov	r1, r0
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8004cd6:	dc26      	bgt.n	8004d26 <floorf+0x62>
 8004cd8:	2d00      	cmp	r5, #0
 8004cda:	da0e      	bge.n	8004cfa <floorf+0x36>
 8004cdc:	4917      	ldr	r1, [pc, #92]	; (8004d3c <floorf+0x78>)
 8004cde:	f7fb faa7 	bl	8000230 <__addsf3>
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f7fb fd68 	bl	80007b8 <__aeabi_fcmpgt>
 8004ce8:	b128      	cbz	r0, 8004cf6 <floorf+0x32>
 8004cea:	2c00      	cmp	r4, #0
 8004cec:	da23      	bge.n	8004d36 <floorf+0x72>
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <floorf+0x7c>)
 8004cf0:	2e00      	cmp	r6, #0
 8004cf2:	bf18      	it	ne
 8004cf4:	461c      	movne	r4, r3
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	e01b      	b.n	8004d32 <floorf+0x6e>
 8004cfa:	4e12      	ldr	r6, [pc, #72]	; (8004d44 <floorf+0x80>)
 8004cfc:	412e      	asrs	r6, r5
 8004cfe:	4230      	tst	r0, r6
 8004d00:	d017      	beq.n	8004d32 <floorf+0x6e>
 8004d02:	490e      	ldr	r1, [pc, #56]	; (8004d3c <floorf+0x78>)
 8004d04:	f7fb fa94 	bl	8000230 <__addsf3>
 8004d08:	2100      	movs	r1, #0
 8004d0a:	f7fb fd55 	bl	80007b8 <__aeabi_fcmpgt>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d0f1      	beq.n	8004cf6 <floorf+0x32>
 8004d12:	2c00      	cmp	r4, #0
 8004d14:	bfbe      	ittt	lt
 8004d16:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8004d1a:	fa43 f505 	asrlt.w	r5, r3, r5
 8004d1e:	1964      	addlt	r4, r4, r5
 8004d20:	ea24 0406 	bic.w	r4, r4, r6
 8004d24:	e7e7      	b.n	8004cf6 <floorf+0x32>
 8004d26:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004d2a:	d302      	bcc.n	8004d32 <floorf+0x6e>
 8004d2c:	f7fb fa80 	bl	8000230 <__addsf3>
 8004d30:	4601      	mov	r1, r0
 8004d32:	4608      	mov	r0, r1
 8004d34:	bd70      	pop	{r4, r5, r6, pc}
 8004d36:	2400      	movs	r4, #0
 8004d38:	e7dd      	b.n	8004cf6 <floorf+0x32>
 8004d3a:	bf00      	nop
 8004d3c:	7149f2ca 	.word	0x7149f2ca
 8004d40:	bf800000 	.word	0xbf800000
 8004d44:	007fffff 	.word	0x007fffff

08004d48 <scalbnf>:
 8004d48:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4603      	mov	r3, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	4604      	mov	r4, r0
 8004d54:	d02a      	beq.n	8004dac <scalbnf+0x64>
 8004d56:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004d5a:	d304      	bcc.n	8004d66 <scalbnf+0x1e>
 8004d5c:	4601      	mov	r1, r0
 8004d5e:	f7fb fa67 	bl	8000230 <__addsf3>
 8004d62:	4603      	mov	r3, r0
 8004d64:	e022      	b.n	8004dac <scalbnf+0x64>
 8004d66:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8004d6a:	d117      	bne.n	8004d9c <scalbnf+0x54>
 8004d6c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8004d70:	f7fb fb66 	bl	8000440 <__aeabi_fmul>
 8004d74:	4a17      	ldr	r2, [pc, #92]	; (8004dd4 <scalbnf+0x8c>)
 8004d76:	4603      	mov	r3, r0
 8004d78:	4295      	cmp	r5, r2
 8004d7a:	db0b      	blt.n	8004d94 <scalbnf+0x4c>
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8004d82:	3a19      	subs	r2, #25
 8004d84:	442a      	add	r2, r5
 8004d86:	2afe      	cmp	r2, #254	; 0xfe
 8004d88:	dd0a      	ble.n	8004da0 <scalbnf+0x58>
 8004d8a:	4913      	ldr	r1, [pc, #76]	; (8004dd8 <scalbnf+0x90>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f361 001e 	bfi	r0, r1, #0, #31
 8004d92:	e000      	b.n	8004d96 <scalbnf+0x4e>
 8004d94:	4911      	ldr	r1, [pc, #68]	; (8004ddc <scalbnf+0x94>)
 8004d96:	f7fb fb53 	bl	8000440 <__aeabi_fmul>
 8004d9a:	e7e2      	b.n	8004d62 <scalbnf+0x1a>
 8004d9c:	0dd2      	lsrs	r2, r2, #23
 8004d9e:	e7f1      	b.n	8004d84 <scalbnf+0x3c>
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	dd05      	ble.n	8004db0 <scalbnf+0x68>
 8004da4:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8004da8:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	f112 0f16 	cmn.w	r2, #22
 8004db4:	da05      	bge.n	8004dc2 <scalbnf+0x7a>
 8004db6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004dba:	4295      	cmp	r5, r2
 8004dbc:	dce5      	bgt.n	8004d8a <scalbnf+0x42>
 8004dbe:	4907      	ldr	r1, [pc, #28]	; (8004ddc <scalbnf+0x94>)
 8004dc0:	e7e4      	b.n	8004d8c <scalbnf+0x44>
 8004dc2:	3219      	adds	r2, #25
 8004dc4:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8004dc8:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8004dcc:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8004dd0:	e7e1      	b.n	8004d96 <scalbnf+0x4e>
 8004dd2:	bf00      	nop
 8004dd4:	ffff3cb0 	.word	0xffff3cb0
 8004dd8:	7149f2ca 	.word	0x7149f2ca
 8004ddc:	0da24260 	.word	0x0da24260

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	2600      	movs	r6, #0
 8004de4:	4d0c      	ldr	r5, [pc, #48]	; (8004e18 <__libc_init_array+0x38>)
 8004de6:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <__libc_init_array+0x3c>)
 8004de8:	1b64      	subs	r4, r4, r5
 8004dea:	10a4      	asrs	r4, r4, #2
 8004dec:	42a6      	cmp	r6, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	f000 f822 	bl	8004e38 <_init>
 8004df4:	2600      	movs	r6, #0
 8004df6:	4d0a      	ldr	r5, [pc, #40]	; (8004e20 <__libc_init_array+0x40>)
 8004df8:	4c0a      	ldr	r4, [pc, #40]	; (8004e24 <__libc_init_array+0x44>)
 8004dfa:	1b64      	subs	r4, r4, r5
 8004dfc:	10a4      	asrs	r4, r4, #2
 8004dfe:	42a6      	cmp	r6, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e08:	4798      	blx	r3
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e12:	4798      	blx	r3
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08005240 	.word	0x08005240
 8004e1c:	08005240 	.word	0x08005240
 8004e20:	08005240 	.word	0x08005240
 8004e24:	08005244 	.word	0x08005244

08004e28 <memset>:
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4402      	add	r2, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <memset+0xa>
 8004e30:	4770      	bx	lr
 8004e32:	f803 1b01 	strb.w	r1, [r3], #1
 8004e36:	e7f9      	b.n	8004e2c <memset+0x4>

08004e38 <_init>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr

08004e44 <_fini>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr
