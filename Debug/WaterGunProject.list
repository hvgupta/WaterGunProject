
WaterGunProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c84  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  08005e70  08005e70  00015e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c8  080066c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080066c8  080066c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066c8  080066c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080066d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000000c  080066e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080066e0  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6a9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e5  00000000  00000000  0002d6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00030868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005049  00000000  00000000  00031400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e51b  00000000  00000000  00036449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cdeb  00000000  00000000  00044964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e174f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b0  00000000  00000000  000e17a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08005e54 	.word	0x08005e54

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08005e54 	.word	0x08005e54

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <_ZN8WaterGun18currentInfoDisplayC1Ev>:
#include "infoAndStatus.hpp"

namespace WaterGun{
    /* Declaration of all the currentInfoDisplay class functions */

    currentInfoDisplay::currentInfoDisplay(){
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
        Volume = 0;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
        Bearing = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
        targetBearing = 0;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
        status = STATUS::OFF_STATE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
        batteryLevel = 100;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2264      	movs	r2, #100	; 0x64
 8000da4:	611a      	str	r2, [r3, #16]
    }
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <_ZN8WaterGun18currentInfoDisplay9getStatusEv>:
    */
    void currentInfoDisplay::displayInfo(){


    }
    STATUS currentInfoDisplay::getStatus(){
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
    	return this->status;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
    }
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <_ZN8WaterGun18currentInfoDisplay12changeStatusENS_6STATUSE>:
    void currentInfoDisplay::changeStatus(STATUS a){
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
    	this->status = a;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	60da      	str	r2, [r3, #12]
    }
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	e002      	b.n	8000df2 <Delay+0x10>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f9      	bne.n	8000dec <Delay+0xa>
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f000 f82a 	bl	8000e64 <LCD_BackLed_Control>
	LCD_Rst();
 8000e10:	f000 f810 	bl	8000e34 <LCD_Rst>
	LCD_REG_Config();
 8000e14:	f000 f860 	bl	8000ed8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e22:	22f0      	movs	r2, #240	; 0xf0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f9e7 	bl	80011fa <LCD_Clear>
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <LCD_Rst+0x28>)
 8000e3e:	f002 f924 	bl	800308a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <LCD_Rst+0x2c>)
 8000e44:	f7ff ffcd 	bl	8000de2 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <LCD_Rst+0x28>)
 8000e4e:	f002 f91c 	bl	800308a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <LCD_Rst+0x2c>)
 8000e54:	f7ff ffc5 	bl	8000de2 <Delay>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40011800 	.word	0x40011800
 8000e60:	0002bffc 	.word	0x0002bffc

08000e64 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <LCD_BackLed_Control+0x34>)
 8000e7c:	f002 f905 	bl	800308a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000e80:	e005      	b.n	8000e8e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <LCD_BackLed_Control+0x34>)
 8000e8a:	f002 f8fe 	bl	800308a <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40011400 	.word	0x40011400

08000e9c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ea6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	8013      	strh	r3, [r2, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <LCD_Write_Data+0x1c>)
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	8013      	strh	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	60020000 	.word	0x60020000

08000ed8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000edc:	20cf      	movs	r0, #207	; 0xcf
 8000ede:	f7ff ffdd 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff ffe8 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000ee8:	2081      	movs	r0, #129	; 0x81
 8000eea:	f7ff ffe5 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000eee:	2030      	movs	r0, #48	; 0x30
 8000ef0:	f7ff ffe2 	bl	8000eb8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000ef4:	20ed      	movs	r0, #237	; 0xed
 8000ef6:	f7ff ffd1 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000efa:	2064      	movs	r0, #100	; 0x64
 8000efc:	f7ff ffdc 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000f00:	2003      	movs	r0, #3
 8000f02:	f7ff ffd9 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000f06:	2012      	movs	r0, #18
 8000f08:	f7ff ffd6 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000f0c:	2081      	movs	r0, #129	; 0x81
 8000f0e:	f7ff ffd3 	bl	8000eb8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000f12:	20e8      	movs	r0, #232	; 0xe8
 8000f14:	f7ff ffc2 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000f18:	2085      	movs	r0, #133	; 0x85
 8000f1a:	f7ff ffcd 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f7ff ffca 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000f24:	2078      	movs	r0, #120	; 0x78
 8000f26:	f7ff ffc7 	bl	8000eb8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000f2a:	20cb      	movs	r0, #203	; 0xcb
 8000f2c:	f7ff ffb6 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000f30:	2039      	movs	r0, #57	; 0x39
 8000f32:	f7ff ffc1 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000f36:	202c      	movs	r0, #44	; 0x2c
 8000f38:	f7ff ffbe 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff ffbb 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000f42:	2034      	movs	r0, #52	; 0x34
 8000f44:	f7ff ffb8 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff ffb5 	bl	8000eb8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000f4e:	20f7      	movs	r0, #247	; 0xf7
 8000f50:	f7ff ffa4 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000f54:	2020      	movs	r0, #32
 8000f56:	f7ff ffaf 	bl	8000eb8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000f5a:	20ea      	movs	r0, #234	; 0xea
 8000f5c:	f7ff ff9e 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffa9 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff ffa6 	bl	8000eb8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000f6c:	20b1      	movs	r0, #177	; 0xb1
 8000f6e:	f7ff ff95 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff ffa0 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000f78:	201b      	movs	r0, #27
 8000f7a:	f7ff ff9d 	bl	8000eb8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000f7e:	20b6      	movs	r0, #182	; 0xb6
 8000f80:	f7ff ff8c 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000f84:	200a      	movs	r0, #10
 8000f86:	f7ff ff97 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000f8a:	20a2      	movs	r0, #162	; 0xa2
 8000f8c:	f7ff ff94 	bl	8000eb8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000f90:	20c0      	movs	r0, #192	; 0xc0
 8000f92:	f7ff ff83 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000f96:	2035      	movs	r0, #53	; 0x35
 8000f98:	f7ff ff8e 	bl	8000eb8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000f9c:	20c1      	movs	r0, #193	; 0xc1
 8000f9e:	f7ff ff7d 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000fa2:	2011      	movs	r0, #17
 8000fa4:	f7ff ff88 	bl	8000eb8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000fa8:	20c5      	movs	r0, #197	; 0xc5
 8000faa:	f7ff ff77 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000fae:	2045      	movs	r0, #69	; 0x45
 8000fb0:	f7ff ff82 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000fb4:	2045      	movs	r0, #69	; 0x45
 8000fb6:	f7ff ff7f 	bl	8000eb8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000fba:	20c7      	movs	r0, #199	; 0xc7
 8000fbc:	f7ff ff6e 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000fc0:	20a2      	movs	r0, #162	; 0xa2
 8000fc2:	f7ff ff79 	bl	8000eb8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000fc6:	20f2      	movs	r0, #242	; 0xf2
 8000fc8:	f7ff ff68 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff ff73 	bl	8000eb8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000fd2:	2026      	movs	r0, #38	; 0x26
 8000fd4:	f7ff ff62 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f7ff ff6d 	bl	8000eb8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000fde:	20e0      	movs	r0, #224	; 0xe0
 8000fe0:	f7ff ff5c 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000fe4:	200f      	movs	r0, #15
 8000fe6:	f7ff ff67 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000fea:	2026      	movs	r0, #38	; 0x26
 8000fec:	f7ff ff64 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000ff0:	2024      	movs	r0, #36	; 0x24
 8000ff2:	f7ff ff61 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000ff6:	200b      	movs	r0, #11
 8000ff8:	f7ff ff5e 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000ffc:	200e      	movs	r0, #14
 8000ffe:	f7ff ff5b 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001002:	2009      	movs	r0, #9
 8001004:	f7ff ff58 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001008:	2054      	movs	r0, #84	; 0x54
 800100a:	f7ff ff55 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800100e:	20a8      	movs	r0, #168	; 0xa8
 8001010:	f7ff ff52 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001014:	2046      	movs	r0, #70	; 0x46
 8001016:	f7ff ff4f 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800101a:	200c      	movs	r0, #12
 800101c:	f7ff ff4c 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001020:	2017      	movs	r0, #23
 8001022:	f7ff ff49 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001026:	2009      	movs	r0, #9
 8001028:	f7ff ff46 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800102c:	200f      	movs	r0, #15
 800102e:	f7ff ff43 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001032:	2007      	movs	r0, #7
 8001034:	f7ff ff40 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff ff3d 	bl	8000eb8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800103e:	20e1      	movs	r0, #225	; 0xe1
 8001040:	f7ff ff2c 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff ff37 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800104a:	2019      	movs	r0, #25
 800104c:	f7ff ff34 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001050:	201b      	movs	r0, #27
 8001052:	f7ff ff31 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001056:	2004      	movs	r0, #4
 8001058:	f7ff ff2e 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800105c:	2010      	movs	r0, #16
 800105e:	f7ff ff2b 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001062:	2007      	movs	r0, #7
 8001064:	f7ff ff28 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001068:	202a      	movs	r0, #42	; 0x2a
 800106a:	f7ff ff25 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800106e:	2047      	movs	r0, #71	; 0x47
 8001070:	f7ff ff22 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001074:	2039      	movs	r0, #57	; 0x39
 8001076:	f7ff ff1f 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800107a:	2003      	movs	r0, #3
 800107c:	f7ff ff1c 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001080:	2006      	movs	r0, #6
 8001082:	f7ff ff19 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001086:	2006      	movs	r0, #6
 8001088:	f7ff ff16 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800108c:	2030      	movs	r0, #48	; 0x30
 800108e:	f7ff ff13 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001092:	2038      	movs	r0, #56	; 0x38
 8001094:	f7ff ff10 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001098:	200f      	movs	r0, #15
 800109a:	f7ff ff0d 	bl	8000eb8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800109e:	2036      	movs	r0, #54	; 0x36
 80010a0:	f7ff fefc 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80010a4:	20c8      	movs	r0, #200	; 0xc8
 80010a6:	f7ff ff07 	bl	8000eb8 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80010aa:	202a      	movs	r0, #42	; 0x2a
 80010ac:	f7ff fef6 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ff01 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fefe 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fefb 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80010c2:	20ef      	movs	r0, #239	; 0xef
 80010c4:	f7ff fef8 	bl	8000eb8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80010c8:	202b      	movs	r0, #43	; 0x2b
 80010ca:	f7ff fee7 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fef2 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff feef 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff feec 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80010e0:	203f      	movs	r0, #63	; 0x3f
 80010e2:	f7ff fee9 	bl	8000eb8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80010e6:	203a      	movs	r0, #58	; 0x3a
 80010e8:	f7ff fed8 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80010ec:	2055      	movs	r0, #85	; 0x55
 80010ee:	f7ff fee3 	bl	8000eb8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80010f2:	2011      	movs	r0, #17
 80010f4:	f7ff fed2 	bl	8000e9c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <LCD_REG_Config+0x230>)
 80010fa:	f7ff fe72 	bl	8000de2 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80010fe:	2029      	movs	r0, #41	; 0x29
 8001100:	f7ff fecc 	bl	8000e9c <LCD_Write_Cmd>
	
	
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	0002bffc 	.word	0x0002bffc

0800110c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4603      	mov	r3, r0
 8001120:	80bb      	strh	r3, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800112a:	202a      	movs	r0, #42	; 0x2a
 800112c:	f7ff feb6 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff febe 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff feb8 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	4413      	add	r3, r2
 800114e:	3b01      	subs	r3, #1
 8001150:	121b      	asrs	r3, r3, #8
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff feaf 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	3b01      	subs	r3, #1
 8001164:	b29b      	uxth	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	b29b      	uxth	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fea4 	bl	8000eb8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001170:	202b      	movs	r0, #43	; 0x2b
 8001172:	f7ff fe93 	bl	8000e9c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fe9b 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001182:	88bb      	ldrh	r3, [r7, #4]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe95 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800118e:	88ba      	ldrh	r2, [r7, #4]
 8001190:	883b      	ldrh	r3, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	3b01      	subs	r3, #1
 8001196:	121b      	asrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fe8c 	bl	8000eb8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80011a0:	88ba      	ldrh	r2, [r7, #4]
 80011a2:	883b      	ldrh	r3, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	3b01      	subs	r3, #1
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe81 	bl	8000eb8 <LCD_Write_Data>
	
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}

080011be <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80011ce:	202c      	movs	r0, #44	; 0x2c
 80011d0:	f7ff fe64 	bl	8000e9c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e006      	b.n	80011e8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe6b 	bl	8000eb8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3f4      	bcc.n	80011da <LCD_FillColor+0x1c>
		
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80011fa:	b590      	push	{r4, r7, lr}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4604      	mov	r4, r0
 8001202:	4608      	mov	r0, r1
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	4623      	mov	r3, r4
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	4603      	mov	r3, r0
 800120e:	80bb      	strh	r3, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001218:	883b      	ldrh	r3, [r7, #0]
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	88b9      	ldrh	r1, [r7, #4]
 800121e:	88f8      	ldrh	r0, [r7, #6]
 8001220:	f7ff ff74 	bl	800110c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	883a      	ldrh	r2, [r7, #0]
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	461a      	mov	r2, r3
 800122e:	8b3b      	ldrh	r3, [r7, #24]
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f7ff ffc3 	bl	80011be <LCD_FillColor>
	
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}

08001240 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
 800124a:	460b      	mov	r3, r1
 800124c:	80bb      	strh	r3, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	3b20      	subs	r3, #32
 8001256:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001258:	88b9      	ldrh	r1, [r7, #4]
 800125a:	88f8      	ldrh	r0, [r7, #6]
 800125c:	2310      	movs	r3, #16
 800125e:	2208      	movs	r2, #8
 8001260:	f7ff ff54 	bl	800110c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001264:	202c      	movs	r0, #44	; 0x2c
 8001266:	f7ff fe19 	bl	8000e9c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800126a:	2300      	movs	r3, #0
 800126c:	73bb      	strb	r3, [r7, #14]
 800126e:	e023      	b.n	80012b8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001270:	7b3a      	ldrb	r2, [r7, #12]
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	4914      	ldr	r1, [pc, #80]	; (80012c8 <LCD_DrawChar+0x88>)
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	440a      	add	r2, r1
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001280:	2300      	movs	r3, #0
 8001282:	737b      	strb	r3, [r7, #13]
 8001284:	e012      	b.n	80012ac <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001290:	201f      	movs	r0, #31
 8001292:	f7ff fe11 	bl	8000eb8 <LCD_Write_Data>
 8001296:	e003      	b.n	80012a0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001298:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800129c:	f7ff fe0c 	bl	8000eb8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	085b      	lsrs	r3, r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80012a6:	7b7b      	ldrb	r3, [r7, #13]
 80012a8:	3301      	adds	r3, #1
 80012aa:	737b      	strb	r3, [r7, #13]
 80012ac:	7b7b      	ldrb	r3, [r7, #13]
 80012ae:	2b07      	cmp	r3, #7
 80012b0:	d9e9      	bls.n	8001286 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	3301      	adds	r3, #1
 80012b6:	73bb      	strb	r3, [r7, #14]
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	d9d8      	bls.n	8001270 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	08005ef0 	.word	0x08005ef0

080012cc <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	460b      	mov	r3, r1
 80012da:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80012dc:	e01c      	b.n	8001318 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2be8      	cmp	r3, #232	; 0xe8
 80012e2:	d904      	bls.n	80012ee <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80012e4:	2300      	movs	r3, #0
 80012e6:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	3310      	adds	r3, #16
 80012ec:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80012f4:	d903      	bls.n	80012fe <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80012f6:	2300      	movs	r3, #0
 80012f8:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	88b9      	ldrh	r1, [r7, #4]
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff9a 	bl	8001240 <LCD_DrawChar>
		
		pStr ++;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	3308      	adds	r3, #8
 8001316:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1de      	bne.n	80012de <LCD_DrawString+0x12>
		
	}
	
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <Set_LED>:
const int Total_LEDs = 20;		//There are 30 leds, but we are only going to use the first 20 LEDs.
uint8_t LEDs_Data[Total_LEDs][3];
uint8_t LEDs_Data_Temp[Total_LEDs][3];	// For brightness
int dataSent_Finish = 0;				// Flag for DMA control

void Set_LED (int LEDidx, int Red, int Green, int Blue){	//0-255 scale
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
	LEDs_Data[LEDidx][0] = Green;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b2d8      	uxtb	r0, r3
 800133e:	4911      	ldr	r1, [pc, #68]	; (8001384 <Set_LED+0x58>)
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	440b      	add	r3, r1
 800134a:	4602      	mov	r2, r0
 800134c:	701a      	strb	r2, [r3, #0]
	LEDs_Data[LEDidx][1] = Red;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	b2d8      	uxtb	r0, r3
 8001352:	490c      	ldr	r1, [pc, #48]	; (8001384 <Set_LED+0x58>)
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	440b      	add	r3, r1
 800135e:	3301      	adds	r3, #1
 8001360:	4602      	mov	r2, r0
 8001362:	701a      	strb	r2, [r3, #0]
	LEDs_Data[LEDidx][2] = Blue;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2d8      	uxtb	r0, r3
 8001368:	4906      	ldr	r1, [pc, #24]	; (8001384 <Set_LED+0x58>)
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	440b      	add	r3, r1
 8001374:	3302      	adds	r3, #2
 8001376:	4602      	mov	r2, r0
 8001378:	701a      	strb	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200000fc 	.word	0x200000fc

08001388 <Set_Brightness>:

void Set_Brightness (int brightness){		// 0-100
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	//Make sure value is from 0 to 100
	brightness = (brightness < 0) ? 0 : (brightness > 100) ? 100 : brightness;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db04      	blt.n	80013a0 <Set_Brightness+0x18>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b64      	cmp	r3, #100	; 0x64
 800139a:	bfa8      	it	ge
 800139c:	2364      	movge	r3, #100	; 0x64
 800139e:	e000      	b.n	80013a2 <Set_Brightness+0x1a>
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]

	//Tangent for linear scaling
	int brightness_45 = brightness*45/100;	// 0-45
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	011a      	lsls	r2, r3, #4
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	4a33      	ldr	r2, [pc, #204]	; (8001480 <Set_Brightness+0xf8>)
 80013b2:	fb82 1203 	smull	r1, r2, r2, r3
 80013b6:	1152      	asrs	r2, r2, #5
 80013b8:	17db      	asrs	r3, r3, #31
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	60fb      	str	r3, [r7, #12]
	float angle = 90-brightness_45;  	// in degree
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc87 	bl	8000cd8 <__aeabi_i2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<Total_LEDs; i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2b13      	cmp	r3, #19
 80013d6:	dc49      	bgt.n	800146c <Set_Brightness+0xe4>
		for (int j=0; j<3; j++){
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	dc40      	bgt.n	8001464 <Set_Brightness+0xdc>
			LEDs_Data_Temp[i][j] = LEDs_Data[i][j] / tan(angle*M_PI / 180);
 80013e2:	4928      	ldr	r1, [pc, #160]	; (8001484 <Set_Brightness+0xfc>)
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	18ca      	adds	r2, r1, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f869 	bl	80004cc <__aeabi_i2d>
 80013fa:	4604      	mov	r4, r0
 80013fc:	460d      	mov	r5, r1
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f7ff f876 	bl	80004f0 <__aeabi_f2d>
 8001404:	a31c      	add	r3, pc, #112	; (adr r3, 8001478 <Set_Brightness+0xf0>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f8c9 	bl	80005a0 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <Set_Brightness+0x100>)
 800141c:	f7ff f9ea 	bl	80007f4 <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f003 fc84 	bl	8004d34 <tan>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4620      	mov	r0, r4
 8001432:	4629      	mov	r1, r5
 8001434:	f7ff f9de 	bl	80007f4 <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb70 	bl	8000b24 <__aeabi_d2uiz>
 8001444:	4603      	mov	r3, r0
 8001446:	b2d8      	uxtb	r0, r3
 8001448:	4910      	ldr	r1, [pc, #64]	; (800148c <Set_Brightness+0x104>)
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	18ca      	adds	r2, r1, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4413      	add	r3, r2
 8001458:	4602      	mov	r2, r0
 800145a:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<3; j++){
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	3301      	adds	r3, #1
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	e7bb      	b.n	80013dc <Set_Brightness+0x54>
	for (int i=0; i<Total_LEDs; i++){
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e7b2      	b.n	80013d2 <Set_Brightness+0x4a>
		}
	}

}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bdb0      	pop	{r4, r5, r7, pc}
 8001474:	f3af 8000 	nop.w
 8001478:	54442d18 	.word	0x54442d18
 800147c:	400921fb 	.word	0x400921fb
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	200000fc 	.word	0x200000fc
 8001488:	40668000 	.word	0x40668000
 800148c:	20000138 	.word	0x20000138

08001490 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001498:	2100      	movs	r1, #0
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800149c:	f002 fca6 	bl	8003dec <HAL_TIM_PWM_Stop_DMA>
	dataSent_Finish = 1;
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000028 	.word	0x20000028
 80014b4:	20000174 	.word	0x20000174

080014b8 <WS2812B_LED_Data_Send>:

void WS2812B_LED_Data_Send()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 80014be:	af00      	add	r7, sp, #0
    uint32_t indx = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint32_t colorData;			//use 32 bits as need transmit 24 bits RGB.
    uint16_t pwmData[24*Total_LEDs + 45];

    for (int i = 0; i < Total_LEDs ; i++){
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80014cc:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80014d0:	2b13      	cmp	r3, #19
 80014d2:	dc4b      	bgt.n	800156c <WS2812B_LED_Data_Send+0xb4>
    	//24 bit, G7 G6 G5 G4 G3 G2 G1 G0 R7 R6 R5 R4 R3 R2 R1 R0 B7 B6 B5 B4 B3 B2 B1 B0
        colorData = (LEDs_Data_Temp[i][0] << 16) |
 80014d4:	493c      	ldr	r1, [pc, #240]	; (80015c8 <WS2812B_LED_Data_Send+0x110>)
 80014d6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	0419      	lsls	r1, r3, #16
        				(LEDs_Data_Temp[i][1] << 8) |
 80014e6:	4838      	ldr	r0, [pc, #224]	; (80015c8 <WS2812B_LED_Data_Send+0x110>)
 80014e8:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	4403      	add	r3, r0
 80014f4:	3301      	adds	r3, #1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	021b      	lsls	r3, r3, #8
        colorData = (LEDs_Data_Temp[i][0] << 16) |
 80014fa:	4319      	orrs	r1, r3
									LEDs_Data_Temp[i][2];
 80014fc:	4832      	ldr	r0, [pc, #200]	; (80015c8 <WS2812B_LED_Data_Send+0x110>)
 80014fe:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	4403      	add	r3, r0
 800150a:	3302      	adds	r3, #2
 800150c:	781b      	ldrb	r3, [r3, #0]
        				(LEDs_Data_Temp[i][1] << 8) |
 800150e:	430b      	orrs	r3, r1
        colorData = (LEDs_Data_Temp[i][0] << 16) |
 8001510:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

    	//High bit is sent first, follow data sheet
        for (int j = 23; j >= 0; j--)
 8001514:	2317      	movs	r3, #23
 8001516:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800151a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800151e:	2b00      	cmp	r3, #0
 8001520:	db1e      	blt.n	8001560 <WS2812B_LED_Data_Send+0xa8>
            pwmData[indx++] = (colorData & (1 << j)) ? 60 : 30;	// 1s: ~64% of 90, 0s: ~32% of 90
 8001522:	2201      	movs	r2, #1
 8001524:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	461a      	mov	r2, r3
 800152e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <WS2812B_LED_Data_Send+0x84>
 8001538:	213c      	movs	r1, #60	; 0x3c
 800153a:	e000      	b.n	800153e <WS2812B_LED_Data_Send+0x86>
 800153c:	211e      	movs	r1, #30
 800153e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001548:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800154c:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8001550:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 23; j >= 0; j--)
 8001554:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001558:	3b01      	subs	r3, #1
 800155a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800155e:	e7dc      	b.n	800151a <WS2812B_LED_Data_Send+0x62>
    for (int i = 0; i < Total_LEDs ; i++){
 8001560:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001564:	3301      	adds	r3, #1
 8001566:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 800156a:	e7af      	b.n	80014cc <WS2812B_LED_Data_Send+0x14>
    }
    //Reset code which is above 50 us of 0s, period of clock is 1.25us
    for (int i = 0; i < 45; i++)
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001572:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001576:	2b2c      	cmp	r3, #44	; 0x2c
 8001578:	dc11      	bgt.n	800159e <WS2812B_LED_Data_Send+0xe6>
    	pwmData[indx++] = 0;
 800157a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001584:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8001588:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800158c:	2100      	movs	r1, #0
 800158e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 45; i++)
 8001592:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001596:	3301      	adds	r3, #1
 8001598:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 800159c:	e7e9      	b.n	8001572 <WS2812B_LED_Data_Send+0xba>

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800159e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	463a      	mov	r2, r7
 80015a6:	2100      	movs	r1, #0
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <WS2812B_LED_Data_Send+0x114>)
 80015aa:	f002 fa6d 	bl	8003a88 <HAL_TIM_PWM_Start_DMA>

    while (!dataSent_Finish){
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <WS2812B_LED_Data_Send+0x118>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <WS2812B_LED_Data_Send+0x100>
 80015b6:	e7fa      	b.n	80015ae <WS2812B_LED_Data_Send+0xf6>
    	// Wait for data to be sent
    }
    // Reset the flag
    dataSent_Finish = 0;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <WS2812B_LED_Data_Send+0x118>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000138 	.word	0x20000138
 80015cc:	20000028 	.word	0x20000028
 80015d0:	20000174 	.word	0x20000174

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	; 0x30
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015da:	f000 fdcf 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015de:	f000 f967 	bl	80018b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e2:	f000 fa91 	bl	8001b08 <MX_GPIO_Init>
  MX_DMA_Init();
 80015e6:	f000 fa71 	bl	8001acc <MX_DMA_Init>
  MX_FSMC_Init();
 80015ea:	f000 fb43 	bl	8001c74 <MX_FSMC_Init>
  MX_TIM1_Init();
 80015ee:	f000 f9af 	bl	8001950 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80015f2:	f7ff fc07 	bl	8000e04 <LCD_INIT>

  DEBUG_DELAY();
  LCD_Write_Cmd(0x36);
 80015f6:	2036      	movs	r0, #54	; 0x36
 80015f8:	f7ff fc50 	bl	8000e9c <LCD_Write_Cmd>
  LCD_Write_Cmd(0xC8);
 80015fc:	20c8      	movs	r0, #200	; 0xc8
 80015fe:	f7ff fc4d 	bl	8000e9c <LCD_Write_Cmd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  const char* Name = "Gupta";
 8001602:	4ba2      	ldr	r3, [pc, #648]	; (800188c <main+0x2b8>)
 8001604:	60fb      	str	r3, [r7, #12]
	  LCD_DrawString(100,100,Name);
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	2164      	movs	r1, #100	; 0x64
 800160a:	2064      	movs	r0, #100	; 0x64
 800160c:	f7ff fe5e 	bl	80012cc <LCD_DrawString>

//	  infoDisplay.changeStatus(WaterGun::STATUS::OFF_STATE);	//test, status should be change be interrupt using K1
	  infoDisplay.changeStatus(WaterGun::STATUS::RELOAD_STATE);	//test, status should be change be interrupt using K1
 8001610:	2101      	movs	r1, #1
 8001612:	489f      	ldr	r0, [pc, #636]	; (8001890 <main+0x2bc>)
 8001614:	f7ff fbd8 	bl	8000dc8 <_ZN8WaterGun18currentInfoDisplay12changeStatusENS_6STATUSE>
//	  infoDisplay.changeStatus(WaterGun::STATUS::SINGLE_SHOOT_STATE);	//test, status should be change be interrupt using K1
//	  infoDisplay.changeStatus(WaterGun::STATUS::CONTINIOUS_SHOOT_STATE);	//test, status should be change be interrupt using K1

	  WaterGun::STATUS curStatus = infoDisplay.getStatus();
 8001618:	489d      	ldr	r0, [pc, #628]	; (8001890 <main+0x2bc>)
 800161a:	f7ff fbca 	bl	8000db2 <_ZN8WaterGun18currentInfoDisplay9getStatusEv>
 800161e:	60b8      	str	r0, [r7, #8]
	  if (curStatus == WaterGun::STATUS::OFF_STATE){
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d140      	bne.n	80016a8 <main+0xd4>
		 //LED off state motion (Breathing)
		  for (int i=0; i<20; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	2b13      	cmp	r3, #19
 800162e:	dc10      	bgt.n	8001652 <main+0x7e>
		  {
			  Set_LED(i, 255-2*i, 255-2*i, 4*i);	//Yellow to less yellow
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001646:	f7ff fe71 	bl	800132c <Set_LED>
		  for (int i=0; i<20; i++)
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164c:	3301      	adds	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001650:	e7eb      	b.n	800162a <main+0x56>
		  }
		  for (int i=0; i<20; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	2b13      	cmp	r3, #19
 800165a:	dc0f      	bgt.n	800167c <main+0xa8>
		  {
			  Set_Brightness(3*i);
 800165c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe8f 	bl	8001388 <Set_Brightness>
			  WS2812B_LED_Data_Send();
 800166a:	f7ff ff25 	bl	80014b8 <WS2812B_LED_Data_Send>
			  HAL_Delay (25);
 800166e:	2019      	movs	r0, #25
 8001670:	f000 fde6 	bl	8002240 <HAL_Delay>
		  for (int i=0; i<20; i++)
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	3301      	adds	r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
 800167a:	e7ec      	b.n	8001656 <main+0x82>
		  }
		  for (int i=19; i>=0; i--)
 800167c:	2313      	movs	r3, #19
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	2b00      	cmp	r3, #0
 8001684:	f2c0 80c5 	blt.w	8001812 <main+0x23e>
		  {
			  Set_Brightness(3*i);
 8001688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe79 	bl	8001388 <Set_Brightness>
			  WS2812B_LED_Data_Send();
 8001696:	f7ff ff0f 	bl	80014b8 <WS2812B_LED_Data_Send>
			  HAL_Delay (25);
 800169a:	2019      	movs	r0, #25
 800169c:	f000 fdd0 	bl	8002240 <HAL_Delay>
		  for (int i=19; i>=0; i--)
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	3b01      	subs	r3, #1
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
 80016a6:	e7eb      	b.n	8001680 <main+0xac>
		  }
	  }
	  else if (curStatus == WaterGun::STATUS::RELOAD_STATE){
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d17a      	bne.n	80017a4 <main+0x1d0>
		  //If switch is pressed
		  if (Reloadobj.getTriggerState() == true){
 80016ae:	4879      	ldr	r0, [pc, #484]	; (8001894 <main+0x2c0>)
 80016b0:	f000 fb78 	bl	8001da4 <_ZN16reloadingProcess6Reload15getTriggerStateEv>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	bf0c      	ite	eq
 80016ba:	2301      	moveq	r3, #1
 80016bc:	2300      	movne	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d036      	beq.n	8001732 <main+0x15e>
			  //LED reload motion
			  for (int i=0; i<10+3; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	f300 80a1 	bgt.w	8001812 <main+0x23e>
			  {
				  if (i<10){
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	2b09      	cmp	r3, #9
 80016d4:	dc0f      	bgt.n	80016f6 <main+0x122>
					  //Turn on head of middleleft LED
					  Set_LED(9-i, 42, 254, 183);			//Cyan
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f1c3 0009 	rsb	r0, r3, #9
 80016dc:	23b7      	movs	r3, #183	; 0xb7
 80016de:	22fe      	movs	r2, #254	; 0xfe
 80016e0:	212a      	movs	r1, #42	; 0x2a
 80016e2:	f7ff fe23 	bl	800132c <Set_LED>
					  //Turn on head of middleright LED
					  Set_LED(10+i, 42, 254, 183);			//Cyan
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f103 000a 	add.w	r0, r3, #10
 80016ec:	23b7      	movs	r3, #183	; 0xb7
 80016ee:	22fe      	movs	r2, #254	; 0xfe
 80016f0:	212a      	movs	r1, #42	; 0x2a
 80016f2:	f7ff fe1b 	bl	800132c <Set_LED>
				  }
				  if ( (i-3) >= 0 ){
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	dd0e      	ble.n	800171a <main+0x146>
					  //Turn on tail of middleleft LED
					  Set_LED(9-(i-3), 0, 0, 0);
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	f1c3 000c 	rsb	r0, r3, #12
 8001702:	2300      	movs	r3, #0
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	f7ff fe10 	bl	800132c <Set_LED>
					  //Turn off tail of middleright LED
					  Set_LED(10+(i-3), 0, 0, 0);
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	1dd8      	adds	r0, r3, #7
 8001710:	2300      	movs	r3, #0
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	f7ff fe09 	bl	800132c <Set_LED>
				  }
				  Set_Brightness(60);
 800171a:	203c      	movs	r0, #60	; 0x3c
 800171c:	f7ff fe34 	bl	8001388 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001720:	f7ff feca 	bl	80014b8 <WS2812B_LED_Data_Send>
				  HAL_Delay (77);
 8001724:	204d      	movs	r0, #77	; 0x4d
 8001726:	f000 fd8b 	bl	8002240 <HAL_Delay>
			  for (int i=0; i<10+3; i++)
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	3301      	adds	r3, #1
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	e7ca      	b.n	80016c8 <main+0xf4>
			  }
		  }
		  //If switch not yet pressed
		  else{
			  //LED reload motion (Breathing)
			  for (int i=0; i<20; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b13      	cmp	r3, #19
 800173a:	dc09      	bgt.n	8001750 <main+0x17c>
			  {
				  Set_LED(i, 42, 254, 183);					//Cyan
 800173c:	23b7      	movs	r3, #183	; 0xb7
 800173e:	22fe      	movs	r2, #254	; 0xfe
 8001740:	212a      	movs	r1, #42	; 0x2a
 8001742:	69f8      	ldr	r0, [r7, #28]
 8001744:	f7ff fdf2 	bl	800132c <Set_LED>
			  for (int i=0; i<20; i++)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e7f2      	b.n	8001736 <main+0x162>
			  }
			  for (int i=0; i<20; i++)
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b13      	cmp	r3, #19
 8001758:	dc0f      	bgt.n	800177a <main+0x1a6>
			  {
				  Set_Brightness(3*i);
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fe10 	bl	8001388 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001768:	f7ff fea6 	bl	80014b8 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 800176c:	2019      	movs	r0, #25
 800176e:	f000 fd67 	bl	8002240 <HAL_Delay>
			  for (int i=0; i<20; i++)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	3301      	adds	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	e7ec      	b.n	8001754 <main+0x180>
			  }
			  for (int i=19; i>=0; i--)
 800177a:	2313      	movs	r3, #19
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db46      	blt.n	8001812 <main+0x23e>
			  {
				  Set_Brightness(3*i);
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fdfb 	bl	8001388 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001792:	f7ff fe91 	bl	80014b8 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8001796:	2019      	movs	r0, #25
 8001798:	f000 fd52 	bl	8002240 <HAL_Delay>
			  for (int i=19; i>=0; i--)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3b01      	subs	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e7ec      	b.n	800177e <main+0x1aa>
			  }
		  }
	  }
	  else if (curStatus == WaterGun::STATUS::SINGLE_SHOOT_STATE){
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d133      	bne.n	8001812 <main+0x23e>
		  //LED shoot out motion
		  for (int i=0; i<10+3; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	dc2e      	bgt.n	8001812 <main+0x23e>
		  {
			  if (i<10){
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2b09      	cmp	r3, #9
 80017b8:	dc0d      	bgt.n	80017d6 <main+0x202>
				  //Turn on head of leftmost LED
				  Set_LED(i, 138, 43, 226);			//Blue-purple
 80017ba:	23e2      	movs	r3, #226	; 0xe2
 80017bc:	222b      	movs	r2, #43	; 0x2b
 80017be:	218a      	movs	r1, #138	; 0x8a
 80017c0:	6938      	ldr	r0, [r7, #16]
 80017c2:	f7ff fdb3 	bl	800132c <Set_LED>
				  //Turn on head of rightmost LED
				  Set_LED(19-i, 138, 43, 226);		//Blue-purple
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f1c3 0013 	rsb	r0, r3, #19
 80017cc:	23e2      	movs	r3, #226	; 0xe2
 80017ce:	222b      	movs	r2, #43	; 0x2b
 80017d0:	218a      	movs	r1, #138	; 0x8a
 80017d2:	f7ff fdab 	bl	800132c <Set_LED>
			  }
			  if ( (i-3) >= 0 ){
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	dd0e      	ble.n	80017fa <main+0x226>
				  //Turn on tail of leftmost LED
				  Set_LED(i-3, 0, 0, 0);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ed8      	subs	r0, r3, #3
 80017e0:	2300      	movs	r3, #0
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	f7ff fda1 	bl	800132c <Set_LED>
				  //Turn off tail of rightmost LED
				  Set_LED(19-i+3, 0, 0, 0);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f1c3 0016 	rsb	r0, r3, #22
 80017f0:	2300      	movs	r3, #0
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	f7ff fd99 	bl	800132c <Set_LED>
			  }
			  Set_Brightness(70);
 80017fa:	2046      	movs	r0, #70	; 0x46
 80017fc:	f7ff fdc4 	bl	8001388 <Set_Brightness>
			  WS2812B_LED_Data_Send();
 8001800:	f7ff fe5a 	bl	80014b8 <WS2812B_LED_Data_Send>
			  HAL_Delay (100);
 8001804:	2064      	movs	r0, #100	; 0x64
 8001806:	f000 fd1b 	bl	8002240 <HAL_Delay>
		  for (int i=0; i<10+3; i++)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3301      	adds	r3, #1
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	e7cd      	b.n	80017ae <main+0x1da>
		  }
	  }
	  else{	//CONTINIOUS_SHOOT_STATE
		  /*Add here*/
	  }
	  GPIO_PinState pinUpperBottle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001816:	4820      	ldr	r0, [pc, #128]	; (8001898 <main+0x2c4>)
 8001818:	f001 fc20 	bl	800305c <HAL_GPIO_ReadPin>
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
	  GPIO_PinState pinLowerBottle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8001820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001824:	481c      	ldr	r0, [pc, #112]	; (8001898 <main+0x2c4>)
 8001826:	f001 fc19 	bl	800305c <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	71bb      	strb	r3, [r7, #6]
	  LCD_DrawString(50,200,"                ");
 800182e:	4a1b      	ldr	r2, [pc, #108]	; (800189c <main+0x2c8>)
 8001830:	21c8      	movs	r1, #200	; 0xc8
 8001832:	2032      	movs	r0, #50	; 0x32
 8001834:	f7ff fd4a 	bl	80012cc <LCD_DrawString>
	  if (pinUpperBottle == GPIO_PIN_RESET && pinLowerBottle == GPIO_PIN_RESET){
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d108      	bne.n	8001850 <main+0x27c>
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <main+0x27c>
		  LCD_DrawString(50,200,"Water Full");
 8001844:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <main+0x2cc>)
 8001846:	21c8      	movs	r1, #200	; 0xc8
 8001848:	2032      	movs	r0, #50	; 0x32
 800184a:	f7ff fd3f 	bl	80012cc <LCD_DrawString>
 800184e:	e01c      	b.n	800188a <main+0x2b6>
	  }
	  else if(pinUpperBottle == GPIO_PIN_SET && pinLowerBottle == GPIO_PIN_RESET){
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <main+0x294>
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <main+0x294>
		  LCD_DrawString(50,200,"Have some water");
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <main+0x2d0>)
 800185e:	21c8      	movs	r1, #200	; 0xc8
 8001860:	2032      	movs	r0, #50	; 0x32
 8001862:	f7ff fd33 	bl	80012cc <LCD_DrawString>
 8001866:	e010      	b.n	800188a <main+0x2b6>
	  }
	  else if(pinUpperBottle == GPIO_PIN_SET && pinLowerBottle == GPIO_PIN_SET){
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <main+0x2ac>
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <main+0x2ac>
		  LCD_DrawString(50,200,"Not enough water");
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <main+0x2d4>)
 8001876:	21c8      	movs	r1, #200	; 0xc8
 8001878:	2032      	movs	r0, #50	; 0x32
 800187a:	f7ff fd27 	bl	80012cc <LCD_DrawString>
 800187e:	e004      	b.n	800188a <main+0x2b6>
	  }
	  else
		  LCD_DrawString(50,200,"Impossible");
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <main+0x2d8>)
 8001882:	21c8      	movs	r1, #200	; 0xc8
 8001884:	2032      	movs	r0, #50	; 0x32
 8001886:	f7ff fd21 	bl	80012cc <LCD_DrawString>

//	  LCD_DrawEllipse(120,160,75,25,BLACK);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800188a:	e6ba      	b.n	8001602 <main+0x2e>
 800188c:	08005e70 	.word	0x08005e70
 8001890:	2000017c 	.word	0x2000017c
 8001894:	20000194 	.word	0x20000194
 8001898:	40011000 	.word	0x40011000
 800189c:	08005e78 	.word	0x08005e78
 80018a0:	08005e8c 	.word	0x08005e8c
 80018a4:	08005e98 	.word	0x08005e98
 80018a8:	08005ea8 	.word	0x08005ea8
 80018ac:	08005ebc 	.word	0x08005ebc

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b090      	sub	sp, #64	; 0x40
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	2228      	movs	r2, #40	; 0x28
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 fac0 	bl	8005e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e4:	2302      	movs	r3, #2
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 fbe9 	bl	80030d0 <HAL_RCC_OscConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800190e:	f000 fa1b 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2302      	movs	r3, #2
 8001918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2102      	movs	r1, #2
 800192c:	4618      	mov	r0, r3
 800192e:	f001 fe51 	bl	80035d4 <HAL_RCC_ClockConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001942:	f000 fa01 	bl	8001d48 <Error_Handler>
  }
}
 8001946:	bf00      	nop
 8001948:	3740      	adds	r7, #64	; 0x40
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b096      	sub	sp, #88	; 0x58
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2220      	movs	r2, #32
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fa5b 	bl	8005e44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800198e:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <MX_TIM1_Init+0x174>)
 8001990:	4a4d      	ldr	r2, [pc, #308]	; (8001ac8 <MX_TIM1_Init+0x178>)
 8001992:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <MX_TIM1_Init+0x174>)
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199a:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <MX_TIM1_Init+0x174>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 80019a0:	4b48      	ldr	r3, [pc, #288]	; (8001ac4 <MX_TIM1_Init+0x174>)
 80019a2:	2259      	movs	r2, #89	; 0x59
 80019a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <MX_TIM1_Init+0x174>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <MX_TIM1_Init+0x174>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <MX_TIM1_Init+0x174>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019b8:	4842      	ldr	r0, [pc, #264]	; (8001ac4 <MX_TIM1_Init+0x174>)
 80019ba:	f001 ffbe 	bl	800393a <HAL_TIM_Base_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80019ce:	f000 f9bb 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019dc:	4619      	mov	r1, r3
 80019de:	4839      	ldr	r0, [pc, #228]	; (8001ac4 <MX_TIM1_Init+0x174>)
 80019e0:	f002 fb8c 	bl	80040fc <HAL_TIM_ConfigClockSource>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	2300      	moveq	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019f4:	f000 f9a8 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f8:	4832      	ldr	r0, [pc, #200]	; (8001ac4 <MX_TIM1_Init+0x174>)
 80019fa:	f001 ffed 	bl	80039d8 <HAL_TIM_PWM_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf14      	ite	ne
 8001a04:	2301      	movne	r3, #1
 8001a06:	2300      	moveq	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a0e:	f000 f99b 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4828      	ldr	r0, [pc, #160]	; (8001ac4 <MX_TIM1_Init+0x174>)
 8001a22:	f002 fff3 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8001a36:	f000 f987 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3a:	2360      	movs	r3, #96	; 0x60
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a46:	2300      	movs	r3, #0
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4819      	ldr	r0, [pc, #100]	; (8001ac4 <MX_TIM1_Init+0x174>)
 8001a60:	f002 fa8e 	bl	8003f80 <HAL_TIM_PWM_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a74:	f000 f968 	bl	8001d48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <MX_TIM1_Init+0x174>)
 8001a9c:	f003 f822 	bl	8004ae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001ab0:	f000 f94a 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <MX_TIM1_Init+0x174>)
 8001ab6:	f000 fa01 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8001aba:	bf00      	nop
 8001abc:	3758      	adds	r7, #88	; 0x58
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000028 	.word	0x20000028
 8001ac8:	40012c00 	.word	0x40012c00

08001acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_DMA_Init+0x38>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <MX_DMA_Init+0x38>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6153      	str	r3, [r2, #20]
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_DMA_Init+0x38>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	200c      	movs	r0, #12
 8001af0:	f000 fca1 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001af4:	200c      	movs	r0, #12
 8001af6:	f000 fcba 	bl	800246e <HAL_NVIC_EnableIRQ>

}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000

08001b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b34:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4c:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a42      	ldr	r2, [pc, #264]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a3c      	ldr	r2, [pc, #240]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <MX_GPIO_Init+0x154>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b9a:	4831      	ldr	r0, [pc, #196]	; (8001c60 <MX_GPIO_Init+0x158>)
 8001b9c:	f001 fa75 	bl	800308a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001ba6:	482f      	ldr	r0, [pc, #188]	; (8001c64 <MX_GPIO_Init+0x15c>)
 8001ba8:	f001 fa6f 	bl	800308a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2102      	movs	r1, #2
 8001bb0:	482d      	ldr	r0, [pc, #180]	; (8001c68 <MX_GPIO_Init+0x160>)
 8001bb2:	f001 fa6a 	bl	800308a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4824      	ldr	r0, [pc, #144]	; (8001c60 <MX_GPIO_Init+0x158>)
 8001bd0:	f001 f8b0 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <MX_GPIO_Init+0x164>)
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be2:	f107 0318 	add.w	r3, r7, #24
 8001be6:	4619      	mov	r1, r3
 8001be8:	4821      	ldr	r0, [pc, #132]	; (8001c70 <MX_GPIO_Init+0x168>)
 8001bea:	f001 f8a3 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001bee:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	4619      	mov	r1, r3
 8001c02:	481b      	ldr	r0, [pc, #108]	; (8001c70 <MX_GPIO_Init+0x168>)
 8001c04:	f001 f896 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4810      	ldr	r0, [pc, #64]	; (8001c64 <MX_GPIO_Init+0x15c>)
 8001c22:	f001 f887 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480a      	ldr	r0, [pc, #40]	; (8001c68 <MX_GPIO_Init+0x160>)
 8001c3e:	f001 f879 	bl	8002d34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2017      	movs	r0, #23
 8001c48:	f000 fbf5 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c4c:	2017      	movs	r0, #23
 8001c4e:	f000 fc0e 	bl	800246e <HAL_NVIC_EnableIRQ>

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40011400 	.word	0x40011400
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40011800 	.word	0x40011800
 8001c6c:	10110000 	.word	0x10110000
 8001c70:	40011000 	.word	0x40011000

08001c74 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	615a      	str	r2, [r3, #20]
 8001c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001c8e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001c92:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001c96:	4a2a      	ldr	r2, [pc, #168]	; (8001d40 <MX_FSMC_Init+0xcc>)
 8001c98:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001cae:	2210      	movs	r2, #16
 8001cb0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001cea:	230f      	movs	r3, #15
 8001cec:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001cee:	230f      	movs	r3, #15
 8001cf0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001cf2:	23ff      	movs	r3, #255	; 0xff
 8001cf4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001cfe:	2311      	movs	r3, #17
 8001d00:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <MX_FSMC_Init+0xc8>)
 8001d0e:	f001 fdc7 	bl	80038a0 <HAL_SRAM_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf14      	ite	ne
 8001d18:	2301      	movne	r3, #1
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8001d22:	f000 f811 	bl	8001d48 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <MX_FSMC_Init+0xd0>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <MX_FSMC_Init+0xd0>)
 8001d2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d30:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001d32:	bf00      	nop
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200000b4 	.word	0x200000b4
 8001d40:	a0000104 	.word	0xa0000104
 8001d44:	40010000 	.word	0x40010000

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <Error_Handler+0x8>

08001d52 <_ZN16reloadingProcess6ReloadC1Ej>:
#include "reload.hpp"

namespace reloadingProcess{

    Reload::Reload(const mililitres maxVol):maxVolume(maxVol){
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	609a      	str	r2, [r3, #8]
        triggerState = false;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
        currentVolume = 0;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
    }
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <_ZN16reloadingProcess6Reload15setTriggerStateEb>:

    	//Turn off the reloading water pump
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);		//In3 off
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);	//In2, In4 off
    }
    void Reload::setTriggerState(bool on){
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
    	if (on){
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <_ZN16reloadingProcess6Reload15setTriggerStateEb+0x1a>
    		this->triggerState = true;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
    	}
    	else{
    		this->triggerState = false;
    	}
    }
 8001d92:	e002      	b.n	8001d9a <_ZN16reloadingProcess6Reload15setTriggerStateEb+0x20>
    		this->triggerState = false;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
    }
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <_ZN16reloadingProcess6Reload15getTriggerStateEv>:
    bool Reload::getTriggerState(){
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    	return triggerState==true;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
    }
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_MspInit+0x5c>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <HAL_MspInit+0x5c>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6193      	str	r3, [r2, #24]
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_MspInit+0x5c>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_MspInit+0x5c>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_MspInit+0x5c>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_MspInit+0x5c>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_MspInit+0x60>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_MspInit+0x60>)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010000 	.word	0x40010000

08001e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_TIM_Base_MspInit+0x84>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d133      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_TIM_Base_MspInit+0x88>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_TIM_Base_MspInit+0x88>)
 8001e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e44:	6193      	str	r3, [r2, #24]
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_TIM_Base_MspInit+0x88>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e54:	4a18      	ldr	r2, [pc, #96]	; (8001eb8 <HAL_TIM_Base_MspInit+0x90>)
 8001e56:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e70:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e78:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001e86:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e88:	f000 fb0c 	bl	80024a4 <HAL_DMA_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001e92:	f7ff ff59 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e9c:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	20000070 	.word	0x20000070
 8001eb8:	4002001c 	.word	0x4002001c

08001ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_TIM_MspPostInit+0x5c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d118      	bne.n	8001f0e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_TIM_MspPostInit+0x60>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_TIM_MspPostInit+0x60>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_TIM_MspPostInit+0x60>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	; (8001f20 <HAL_TIM_MspPostInit+0x64>)
 8001f0a:	f000 ff13 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010800 	.word	0x40010800

08001f24 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_FSMC_MspInit+0x78>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d129      	bne.n	8001f94 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_FSMC_MspInit+0x78>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_FSMC_MspInit+0x7c>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <HAL_FSMC_MspInit+0x7c>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6153      	str	r3, [r2, #20]
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_FSMC_MspInit+0x7c>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f5e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001f62:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	4619      	mov	r1, r3
 8001f72:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <HAL_FSMC_MspInit+0x80>)
 8001f74:	f000 fede 	bl	8002d34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001f78:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001f7c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <HAL_FSMC_MspInit+0x84>)
 8001f8e:	f000 fed1 	bl	8002d34 <HAL_GPIO_Init>
 8001f92:	e000      	b.n	8001f96 <HAL_FSMC_MspInit+0x72>
    return;
 8001f94:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000178 	.word	0x20000178
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40011800 	.word	0x40011800
 8001fa8:	40011400 	.word	0x40011400

08001fac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001fb4:	f7ff ffb6 	bl	8001f24 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002006:	f000 f8ff 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA1_Channel2_IRQHandler+0x10>)
 8002016:	f000 fc23 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000070 	.word	0x20000070

08002024 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <EXTI9_5_IRQHandler+0x9c>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d03b      	beq.n	80020b8 <EXTI9_5_IRQHandler+0x94>
	{
		/*Switch code BEGIN*/

		//Switch is pressed action
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) ==  GPIO_PIN_RESET){
 8002040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002044:	481f      	ldr	r0, [pc, #124]	; (80020c4 <EXTI9_5_IRQHandler+0xa0>)
 8002046:	f001 f809 	bl	800305c <HAL_GPIO_ReadPin>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d013      	beq.n	8002082 <EXTI9_5_IRQHandler+0x5e>

			//Check current gun mode
			WaterGun::STATUS curStatus = infoDisplay.getStatus();
 800205a:	481b      	ldr	r0, [pc, #108]	; (80020c8 <EXTI9_5_IRQHandler+0xa4>)
 800205c:	f7fe fea9 	bl	8000db2 <_ZN8WaterGun18currentInfoDisplay9getStatusEv>
 8002060:	6038      	str	r0, [r7, #0]
			if (curStatus == WaterGun::STATUS::OFF_STATE){
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <EXTI9_5_IRQHandler+0x52>
				//Do nothing
			}
			else if (curStatus == WaterGun::STATUS::RELOAD_STATE){
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d103      	bne.n	8002076 <EXTI9_5_IRQHandler+0x52>
				Reloadobj.setTriggerState(true);
 800206e:	2101      	movs	r1, #1
 8002070:	4816      	ldr	r0, [pc, #88]	; (80020cc <EXTI9_5_IRQHandler+0xa8>)
 8002072:	f7ff fe82 	bl	8001d7a <_ZN16reloadingProcess6Reload15setTriggerStateEb>
			else{								//CONTINIOUS_SHOOT_STATE
				/*Add here*/
			}

			//Print
			LCD_DrawString(50,150,"Switch on ");
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <EXTI9_5_IRQHandler+0xac>)
 8002078:	2196      	movs	r1, #150	; 0x96
 800207a:	2032      	movs	r0, #50	; 0x32
 800207c:	f7ff f926 	bl	80012cc <LCD_DrawString>
 8002080:	e012      	b.n	80020a8 <EXTI9_5_IRQHandler+0x84>
		}
		//Switch is released action
		else{
			//Check current gun mode
			WaterGun::STATUS curStatus = infoDisplay.getStatus();
 8002082:	4811      	ldr	r0, [pc, #68]	; (80020c8 <EXTI9_5_IRQHandler+0xa4>)
 8002084:	f7fe fe95 	bl	8000db2 <_ZN8WaterGun18currentInfoDisplay9getStatusEv>
 8002088:	6078      	str	r0, [r7, #4]
			if (curStatus == WaterGun::STATUS::OFF_STATE){
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d006      	beq.n	800209e <EXTI9_5_IRQHandler+0x7a>
				//Do nothing
			}
			else if (curStatus == WaterGun::STATUS::RELOAD_STATE){
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d103      	bne.n	800209e <EXTI9_5_IRQHandler+0x7a>
				Reloadobj.setTriggerState(false);
 8002096:	2100      	movs	r1, #0
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <EXTI9_5_IRQHandler+0xa8>)
 800209a:	f7ff fe6e 	bl	8001d7a <_ZN16reloadingProcess6Reload15setTriggerStateEb>
			else{								//CONTINIOUS_SHOOT_STATE
				/*Add here*/
			}

			//Print
			LCD_DrawString(50,150,"Switch off");
 800209e:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <EXTI9_5_IRQHandler+0xb0>)
 80020a0:	2196      	movs	r1, #150	; 0x96
 80020a2:	2032      	movs	r0, #50	; 0x32
 80020a4:	f7ff f912 	bl	80012cc <LCD_DrawString>
		}
		/*Switch code END*/
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <EXTI9_5_IRQHandler+0x9c>)
 80020aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ae:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
 80020b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020b4:	f001 f801 	bl	80030ba <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI9_5_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40010400 	.word	0x40010400
 80020c4:	40011000 	.word	0x40011000
 80020c8:	2000017c 	.word	0x2000017c
 80020cc:	20000194 	.word	0x20000194
 80020d0:	08005ec8 	.word	0x08005ec8
 80020d4:	08005ed4 	.word	0x08005ed4

080020d8 <_Z41__static_initialization_and_destruction_0ii>:

/* USER CODE BEGIN 1 */
#ifdef __cplusplus
}
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10c      	bne.n	8002102 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d107      	bne.n	8002102 <_Z41__static_initialization_and_destruction_0ii+0x2a>
WaterGun::currentInfoDisplay infoDisplay;
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80020f4:	f7fe fe44 	bl	8000d80 <_ZN8WaterGun18currentInfoDisplayC1Ev>
reloadingProcess::Reload Reloadobj(500);
 80020f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80020fe:	f7ff fe28 	bl	8001d52 <_ZN16reloadingProcess6ReloadC1Ej>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000017c 	.word	0x2000017c
 8002110:	20000194 	.word	0x20000194

08002114 <_GLOBAL__sub_I_infoDisplay>:
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
 8002118:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800211c:	2001      	movs	r0, #1
 800211e:	f7ff ffdb 	bl	80020d8 <_Z41__static_initialization_and_destruction_0ii>
 8002122:	bd80      	pop	{r7, pc}

08002124 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002130:	f7ff fff8 	bl	8002124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002134:	480b      	ldr	r0, [pc, #44]	; (8002164 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002136:	490c      	ldr	r1, [pc, #48]	; (8002168 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <LoopFillZerobss+0x16>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800214c:	4c09      	ldr	r4, [pc, #36]	; (8002174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215a:	f003 fe4f 	bl	8005dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800215e:	f7ff fa39 	bl	80015d4 <main>
  bx lr
 8002162:	4770      	bx	lr
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800216c:	080066d4 	.word	0x080066d4
  ldr r2, =_sbss
 8002170:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002174:	200001a4 	.word	0x200001a4

08002178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC1_2_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_Init+0x28>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_Init+0x28>)
 8002186:	f043 0310 	orr.w	r3, r3, #16
 800218a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800218c:	2003      	movs	r0, #3
 800218e:	f000 f947 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002192:	200f      	movs	r0, #15
 8002194:	f000 f808 	bl	80021a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002198:	f7ff fe14 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40022000 	.word	0x40022000

080021a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_InitTick+0x54>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x58>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f95f 	bl	800248a <HAL_SYSTICK_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00e      	b.n	80021f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b0f      	cmp	r3, #15
 80021da:	d80a      	bhi.n	80021f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021dc:	2200      	movs	r2, #0
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f000 f927 	bl	8002436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_InitTick+0x5c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000008 	.word	0x20000008
 8002204:	20000004 	.word	0x20000004

08002208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_IncTick+0x1c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_IncTick+0x20>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a03      	ldr	r2, [pc, #12]	; (8002228 <HAL_IncTick+0x20>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	20000008 	.word	0x20000008
 8002228:	200001a0 	.word	0x200001a0

0800222c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b02      	ldr	r3, [pc, #8]	; (800223c <HAL_GetTick+0x10>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	200001a0 	.word	0x200001a0

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff fff0 	bl	800222c <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffe0 	bl	800222c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4906      	ldr	r1, [pc, #24]	; (8002320 <__NVIC_EnableIRQ+0x34>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff90 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff2d 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff42 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff90 	bl	8002378 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5f 	bl	8002324 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff35 	bl	80022ec <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e059      	b.n	800256e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_DMA_Init+0xd4>)
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d80f      	bhi.n	80024e6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_DMA_Init+0xd8>)
 80024ce:	4413      	add	r3, r2
 80024d0:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_DMA_Init+0xdc>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	009a      	lsls	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a28      	ldr	r2, [pc, #160]	; (8002584 <HAL_DMA_Init+0xe0>)
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80024e4:	e00e      	b.n	8002504 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b26      	ldr	r3, [pc, #152]	; (8002588 <HAL_DMA_Init+0xe4>)
 80024ee:	4413      	add	r3, r2
 80024f0:	4a23      	ldr	r2, [pc, #140]	; (8002580 <HAL_DMA_Init+0xdc>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	009a      	lsls	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <HAL_DMA_Init+0xe8>)
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800251a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800251e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40020407 	.word	0x40020407
 800257c:	bffdfff8 	.word	0xbffdfff8
 8002580:	cccccccd 	.word	0xcccccccd
 8002584:	40020000 	.word	0x40020000
 8002588:	bffdfbf8 	.word	0xbffdfbf8
 800258c:	40020400 	.word	0x40020400

08002590 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_DMA_Start_IT+0x20>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e04a      	b.n	8002646 <HAL_DMA_Start_IT+0xb6>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d13a      	bne.n	8002638 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fb76 	bl	8002cd8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 020e 	orr.w	r2, r2, #14
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e00f      	b.n	8002626 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0204 	bic.w	r2, r2, #4
 8002614:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 020a 	orr.w	r2, r2, #10
 8002624:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e005      	b.n	8002644 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002662:	2b02      	cmp	r3, #2
 8002664:	d005      	beq.n	8002672 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2204      	movs	r2, #4
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e0d6      	b.n	8002820 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 020e 	bic.w	r2, r2, #14
 8002680:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b64      	ldr	r3, [pc, #400]	; (800282c <HAL_DMA_Abort_IT+0x1dc>)
 800269a:	429a      	cmp	r2, r3
 800269c:	d958      	bls.n	8002750 <HAL_DMA_Abort_IT+0x100>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a63      	ldr	r2, [pc, #396]	; (8002830 <HAL_DMA_Abort_IT+0x1e0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d04f      	beq.n	8002748 <HAL_DMA_Abort_IT+0xf8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_DMA_Abort_IT+0x1e4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d048      	beq.n	8002744 <HAL_DMA_Abort_IT+0xf4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_DMA_Abort_IT+0x1e8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d040      	beq.n	800273e <HAL_DMA_Abort_IT+0xee>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5e      	ldr	r2, [pc, #376]	; (800283c <HAL_DMA_Abort_IT+0x1ec>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d038      	beq.n	8002738 <HAL_DMA_Abort_IT+0xe8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <HAL_DMA_Abort_IT+0x1f0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d030      	beq.n	8002732 <HAL_DMA_Abort_IT+0xe2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5b      	ldr	r2, [pc, #364]	; (8002844 <HAL_DMA_Abort_IT+0x1f4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d028      	beq.n	800272c <HAL_DMA_Abort_IT+0xdc>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a53      	ldr	r2, [pc, #332]	; (800282c <HAL_DMA_Abort_IT+0x1dc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d020      	beq.n	8002726 <HAL_DMA_Abort_IT+0xd6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a57      	ldr	r2, [pc, #348]	; (8002848 <HAL_DMA_Abort_IT+0x1f8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <HAL_DMA_Abort_IT+0xd2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a56      	ldr	r2, [pc, #344]	; (800284c <HAL_DMA_Abort_IT+0x1fc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d012      	beq.n	800271e <HAL_DMA_Abort_IT+0xce>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a54      	ldr	r2, [pc, #336]	; (8002850 <HAL_DMA_Abort_IT+0x200>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00a      	beq.n	8002718 <HAL_DMA_Abort_IT+0xc8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a53      	ldr	r2, [pc, #332]	; (8002854 <HAL_DMA_Abort_IT+0x204>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d102      	bne.n	8002712 <HAL_DMA_Abort_IT+0xc2>
 800270c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002710:	e01b      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 8002712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002716:	e018      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 8002718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800271c:	e015      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 800271e:	2310      	movs	r3, #16
 8002720:	e013      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 8002722:	2301      	movs	r3, #1
 8002724:	e011      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 8002726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272a:	e00e      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 800272c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002730:	e00b      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 8002732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002736:	e008      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 8002738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273c:	e005      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 800273e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002742:	e002      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 8002744:	2310      	movs	r3, #16
 8002746:	e000      	b.n	800274a <HAL_DMA_Abort_IT+0xfa>
 8002748:	2301      	movs	r3, #1
 800274a:	4a43      	ldr	r2, [pc, #268]	; (8002858 <HAL_DMA_Abort_IT+0x208>)
 800274c:	6053      	str	r3, [r2, #4]
 800274e:	e057      	b.n	8002800 <HAL_DMA_Abort_IT+0x1b0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a36      	ldr	r2, [pc, #216]	; (8002830 <HAL_DMA_Abort_IT+0x1e0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d04f      	beq.n	80027fa <HAL_DMA_Abort_IT+0x1aa>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a35      	ldr	r2, [pc, #212]	; (8002834 <HAL_DMA_Abort_IT+0x1e4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d048      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x1a6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a33      	ldr	r2, [pc, #204]	; (8002838 <HAL_DMA_Abort_IT+0x1e8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d040      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x1a0>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a32      	ldr	r2, [pc, #200]	; (800283c <HAL_DMA_Abort_IT+0x1ec>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d038      	beq.n	80027ea <HAL_DMA_Abort_IT+0x19a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a30      	ldr	r2, [pc, #192]	; (8002840 <HAL_DMA_Abort_IT+0x1f0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d030      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x194>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2f      	ldr	r2, [pc, #188]	; (8002844 <HAL_DMA_Abort_IT+0x1f4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d028      	beq.n	80027de <HAL_DMA_Abort_IT+0x18e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_DMA_Abort_IT+0x1dc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d020      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x188>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a2b      	ldr	r2, [pc, #172]	; (8002848 <HAL_DMA_Abort_IT+0x1f8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d019      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x184>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a29      	ldr	r2, [pc, #164]	; (800284c <HAL_DMA_Abort_IT+0x1fc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d012      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x180>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a28      	ldr	r2, [pc, #160]	; (8002850 <HAL_DMA_Abort_IT+0x200>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00a      	beq.n	80027ca <HAL_DMA_Abort_IT+0x17a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <HAL_DMA_Abort_IT+0x204>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d102      	bne.n	80027c4 <HAL_DMA_Abort_IT+0x174>
 80027be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c2:	e01b      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c8:	e018      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ce:	e015      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027d0:	2310      	movs	r3, #16
 80027d2:	e013      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e011      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027dc:	e00e      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027e2:	e00b      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027e8:	e008      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ee:	e005      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f4:	e002      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027f6:	2310      	movs	r3, #16
 80027f8:	e000      	b.n	80027fc <HAL_DMA_Abort_IT+0x1ac>
 80027fa:	2301      	movs	r3, #1
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_DMA_Abort_IT+0x20c>)
 80027fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
    } 
  }
  return status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40020080 	.word	0x40020080
 8002830:	40020008 	.word	0x40020008
 8002834:	4002001c 	.word	0x4002001c
 8002838:	40020030 	.word	0x40020030
 800283c:	40020044 	.word	0x40020044
 8002840:	40020058 	.word	0x40020058
 8002844:	4002006c 	.word	0x4002006c
 8002848:	40020408 	.word	0x40020408
 800284c:	4002041c 	.word	0x4002041c
 8002850:	40020430 	.word	0x40020430
 8002854:	40020444 	.word	0x40020444
 8002858:	40020400 	.word	0x40020400
 800285c:	40020000 	.word	0x40020000

08002860 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	2204      	movs	r2, #4
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80f1 	beq.w	8002a6c <HAL_DMA_IRQHandler+0x20c>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80eb 	beq.w	8002a6c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0204 	bic.w	r2, r2, #4
 80028b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_DMA_IRQHandler+0x1d8>)
 80028bc:	429a      	cmp	r2, r3
 80028be:	d958      	bls.n	8002972 <HAL_DMA_IRQHandler+0x112>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a5d      	ldr	r2, [pc, #372]	; (8002a3c <HAL_DMA_IRQHandler+0x1dc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04f      	beq.n	800296a <HAL_DMA_IRQHandler+0x10a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a5c      	ldr	r2, [pc, #368]	; (8002a40 <HAL_DMA_IRQHandler+0x1e0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d048      	beq.n	8002966 <HAL_DMA_IRQHandler+0x106>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_DMA_IRQHandler+0x1e4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d040      	beq.n	8002960 <HAL_DMA_IRQHandler+0x100>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a59      	ldr	r2, [pc, #356]	; (8002a48 <HAL_DMA_IRQHandler+0x1e8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d038      	beq.n	800295a <HAL_DMA_IRQHandler+0xfa>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a57      	ldr	r2, [pc, #348]	; (8002a4c <HAL_DMA_IRQHandler+0x1ec>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d030      	beq.n	8002954 <HAL_DMA_IRQHandler+0xf4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <HAL_DMA_IRQHandler+0x1f0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d028      	beq.n	800294e <HAL_DMA_IRQHandler+0xee>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4d      	ldr	r2, [pc, #308]	; (8002a38 <HAL_DMA_IRQHandler+0x1d8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d020      	beq.n	8002948 <HAL_DMA_IRQHandler+0xe8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_DMA_IRQHandler+0x1f4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d019      	beq.n	8002944 <HAL_DMA_IRQHandler+0xe4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a50      	ldr	r2, [pc, #320]	; (8002a58 <HAL_DMA_IRQHandler+0x1f8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d012      	beq.n	8002940 <HAL_DMA_IRQHandler+0xe0>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4f      	ldr	r2, [pc, #316]	; (8002a5c <HAL_DMA_IRQHandler+0x1fc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00a      	beq.n	800293a <HAL_DMA_IRQHandler+0xda>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a4d      	ldr	r2, [pc, #308]	; (8002a60 <HAL_DMA_IRQHandler+0x200>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d102      	bne.n	8002934 <HAL_DMA_IRQHandler+0xd4>
 800292e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002932:	e01b      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 8002934:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002938:	e018      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 800293a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293e:	e015      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 8002940:	2340      	movs	r3, #64	; 0x40
 8002942:	e013      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 8002944:	2304      	movs	r3, #4
 8002946:	e011      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 8002948:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800294c:	e00e      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 800294e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002952:	e00b      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 8002954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002958:	e008      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 800295a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800295e:	e005      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 8002960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002964:	e002      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 8002966:	2340      	movs	r3, #64	; 0x40
 8002968:	e000      	b.n	800296c <HAL_DMA_IRQHandler+0x10c>
 800296a:	2304      	movs	r3, #4
 800296c:	4a3d      	ldr	r2, [pc, #244]	; (8002a64 <HAL_DMA_IRQHandler+0x204>)
 800296e:	6053      	str	r3, [r2, #4]
 8002970:	e057      	b.n	8002a22 <HAL_DMA_IRQHandler+0x1c2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a31      	ldr	r2, [pc, #196]	; (8002a3c <HAL_DMA_IRQHandler+0x1dc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d04f      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x1bc>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2f      	ldr	r2, [pc, #188]	; (8002a40 <HAL_DMA_IRQHandler+0x1e0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d048      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x1b8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <HAL_DMA_IRQHandler+0x1e4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d040      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x1b2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <HAL_DMA_IRQHandler+0x1e8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d038      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x1ac>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <HAL_DMA_IRQHandler+0x1ec>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d030      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x1a6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a29      	ldr	r2, [pc, #164]	; (8002a50 <HAL_DMA_IRQHandler+0x1f0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d028      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x1a0>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_DMA_IRQHandler+0x1d8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d020      	beq.n	80029fa <HAL_DMA_IRQHandler+0x19a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <HAL_DMA_IRQHandler+0x1f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x196>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <HAL_DMA_IRQHandler+0x1f8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d012      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x192>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <HAL_DMA_IRQHandler+0x1fc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00a      	beq.n	80029ec <HAL_DMA_IRQHandler+0x18c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a21      	ldr	r2, [pc, #132]	; (8002a60 <HAL_DMA_IRQHandler+0x200>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d102      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x186>
 80029e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029e4:	e01b      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 80029e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029ea:	e018      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 80029ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f0:	e015      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 80029f2:	2340      	movs	r3, #64	; 0x40
 80029f4:	e013      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 80029f6:	2304      	movs	r3, #4
 80029f8:	e011      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 80029fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029fe:	e00e      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 8002a00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a04:	e00b      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 8002a06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a0a:	e008      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 8002a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a10:	e005      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 8002a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a16:	e002      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 8002a18:	2340      	movs	r3, #64	; 0x40
 8002a1a:	e000      	b.n	8002a1e <HAL_DMA_IRQHandler+0x1be>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <HAL_DMA_IRQHandler+0x208>)
 8002a20:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8136 	beq.w	8002c98 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a34:	e130      	b.n	8002c98 <HAL_DMA_IRQHandler+0x438>
 8002a36:	bf00      	nop
 8002a38:	40020080 	.word	0x40020080
 8002a3c:	40020008 	.word	0x40020008
 8002a40:	4002001c 	.word	0x4002001c
 8002a44:	40020030 	.word	0x40020030
 8002a48:	40020044 	.word	0x40020044
 8002a4c:	40020058 	.word	0x40020058
 8002a50:	4002006c 	.word	0x4002006c
 8002a54:	40020408 	.word	0x40020408
 8002a58:	4002041c 	.word	0x4002041c
 8002a5c:	40020430 	.word	0x40020430
 8002a60:	40020444 	.word	0x40020444
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2202      	movs	r2, #2
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80dd 	beq.w	8002c38 <HAL_DMA_IRQHandler+0x3d8>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80d7 	beq.w	8002c38 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 020a 	bic.w	r2, r2, #10
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b7b      	ldr	r3, [pc, #492]	; (8002ca4 <HAL_DMA_IRQHandler+0x444>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d958      	bls.n	8002b6e <HAL_DMA_IRQHandler+0x30e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a79      	ldr	r2, [pc, #484]	; (8002ca8 <HAL_DMA_IRQHandler+0x448>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d04f      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x306>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a78      	ldr	r2, [pc, #480]	; (8002cac <HAL_DMA_IRQHandler+0x44c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d048      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x302>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a76      	ldr	r2, [pc, #472]	; (8002cb0 <HAL_DMA_IRQHandler+0x450>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d040      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x2fc>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a75      	ldr	r2, [pc, #468]	; (8002cb4 <HAL_DMA_IRQHandler+0x454>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d038      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2f6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a73      	ldr	r2, [pc, #460]	; (8002cb8 <HAL_DMA_IRQHandler+0x458>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d030      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x2f0>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a72      	ldr	r2, [pc, #456]	; (8002cbc <HAL_DMA_IRQHandler+0x45c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d028      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x2ea>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a69      	ldr	r2, [pc, #420]	; (8002ca4 <HAL_DMA_IRQHandler+0x444>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d020      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x2e4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a6e      	ldr	r2, [pc, #440]	; (8002cc0 <HAL_DMA_IRQHandler+0x460>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d019      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x2e0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6c      	ldr	r2, [pc, #432]	; (8002cc4 <HAL_DMA_IRQHandler+0x464>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d012      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x2dc>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a6b      	ldr	r2, [pc, #428]	; (8002cc8 <HAL_DMA_IRQHandler+0x468>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00a      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x2d6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <HAL_DMA_IRQHandler+0x46c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d102      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x2d0>
 8002b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b2e:	e01b      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b34:	e018      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3a:	e015      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e013      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e011      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b48:	e00e      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b4e:	e00b      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b54:	e008      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b5a:	e005      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b60:	e002      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b62:	2320      	movs	r3, #32
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_IRQHandler+0x308>
 8002b66:	2302      	movs	r3, #2
 8002b68:	4a59      	ldr	r2, [pc, #356]	; (8002cd0 <HAL_DMA_IRQHandler+0x470>)
 8002b6a:	6053      	str	r3, [r2, #4]
 8002b6c:	e057      	b.n	8002c1e <HAL_DMA_IRQHandler+0x3be>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4d      	ldr	r2, [pc, #308]	; (8002ca8 <HAL_DMA_IRQHandler+0x448>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04f      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x3b8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	; (8002cac <HAL_DMA_IRQHandler+0x44c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d048      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x3b4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_DMA_IRQHandler+0x450>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x3ae>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a48      	ldr	r2, [pc, #288]	; (8002cb4 <HAL_DMA_IRQHandler+0x454>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d038      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x3a8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a47      	ldr	r2, [pc, #284]	; (8002cb8 <HAL_DMA_IRQHandler+0x458>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d030      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x3a2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a45      	ldr	r2, [pc, #276]	; (8002cbc <HAL_DMA_IRQHandler+0x45c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d028      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x39c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a3d      	ldr	r2, [pc, #244]	; (8002ca4 <HAL_DMA_IRQHandler+0x444>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d020      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x396>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a41      	ldr	r2, [pc, #260]	; (8002cc0 <HAL_DMA_IRQHandler+0x460>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d019      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x392>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a40      	ldr	r2, [pc, #256]	; (8002cc4 <HAL_DMA_IRQHandler+0x464>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d012      	beq.n	8002bee <HAL_DMA_IRQHandler+0x38e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a3e      	ldr	r2, [pc, #248]	; (8002cc8 <HAL_DMA_IRQHandler+0x468>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00a      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x388>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a3d      	ldr	r2, [pc, #244]	; (8002ccc <HAL_DMA_IRQHandler+0x46c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_DMA_IRQHandler+0x382>
 8002bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002be0:	e01b      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be6:	e018      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bec:	e015      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e013      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e011      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfa:	e00e      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002bfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c00:	e00b      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c06:	e008      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c0c:	e005      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c12:	e002      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002c14:	2320      	movs	r3, #32
 8002c16:	e000      	b.n	8002c1a <HAL_DMA_IRQHandler+0x3ba>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	4a2e      	ldr	r2, [pc, #184]	; (8002cd4 <HAL_DMA_IRQHandler+0x474>)
 8002c1c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d034      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c36:	e02f      	b.n	8002c98 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d028      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x43a>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 020e 	bic.w	r2, r2, #14
 8002c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
    }
  }
  return;
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
}
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40020080 	.word	0x40020080
 8002ca8:	40020008 	.word	0x40020008
 8002cac:	4002001c 	.word	0x4002001c
 8002cb0:	40020030 	.word	0x40020030
 8002cb4:	40020044 	.word	0x40020044
 8002cb8:	40020058 	.word	0x40020058
 8002cbc:	4002006c 	.word	0x4002006c
 8002cc0:	40020408 	.word	0x40020408
 8002cc4:	4002041c 	.word	0x4002041c
 8002cc8:	40020430 	.word	0x40020430
 8002ccc:	40020444 	.word	0x40020444
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40020000 	.word	0x40020000

08002cd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d108      	bne.n	8002d18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d16:	e007      	b.n	8002d28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	60da      	str	r2, [r3, #12]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b08b      	sub	sp, #44	; 0x2c
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d46:	e179      	b.n	800303c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d48:	2201      	movs	r2, #1
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	f040 8168 	bne.w	8003036 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4a96      	ldr	r2, [pc, #600]	; (8002fc4 <HAL_GPIO_Init+0x290>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d05e      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002d70:	4a94      	ldr	r2, [pc, #592]	; (8002fc4 <HAL_GPIO_Init+0x290>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d875      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002d76:	4a94      	ldr	r2, [pc, #592]	; (8002fc8 <HAL_GPIO_Init+0x294>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d058      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002d7c:	4a92      	ldr	r2, [pc, #584]	; (8002fc8 <HAL_GPIO_Init+0x294>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d86f      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002d82:	4a92      	ldr	r2, [pc, #584]	; (8002fcc <HAL_GPIO_Init+0x298>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d052      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002d88:	4a90      	ldr	r2, [pc, #576]	; (8002fcc <HAL_GPIO_Init+0x298>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d869      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002d8e:	4a90      	ldr	r2, [pc, #576]	; (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d04c      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002d94:	4a8e      	ldr	r2, [pc, #568]	; (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d863      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002d9a:	4a8e      	ldr	r2, [pc, #568]	; (8002fd4 <HAL_GPIO_Init+0x2a0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d046      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002da0:	4a8c      	ldr	r2, [pc, #560]	; (8002fd4 <HAL_GPIO_Init+0x2a0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d85d      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002da6:	2b12      	cmp	r3, #18
 8002da8:	d82a      	bhi.n	8002e00 <HAL_GPIO_Init+0xcc>
 8002daa:	2b12      	cmp	r3, #18
 8002dac:	d859      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_GPIO_Init+0x80>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002e2f 	.word	0x08002e2f
 8002db8:	08002e09 	.word	0x08002e09
 8002dbc:	08002e1b 	.word	0x08002e1b
 8002dc0:	08002e5d 	.word	0x08002e5d
 8002dc4:	08002e63 	.word	0x08002e63
 8002dc8:	08002e63 	.word	0x08002e63
 8002dcc:	08002e63 	.word	0x08002e63
 8002dd0:	08002e63 	.word	0x08002e63
 8002dd4:	08002e63 	.word	0x08002e63
 8002dd8:	08002e63 	.word	0x08002e63
 8002ddc:	08002e63 	.word	0x08002e63
 8002de0:	08002e63 	.word	0x08002e63
 8002de4:	08002e63 	.word	0x08002e63
 8002de8:	08002e63 	.word	0x08002e63
 8002dec:	08002e63 	.word	0x08002e63
 8002df0:	08002e63 	.word	0x08002e63
 8002df4:	08002e63 	.word	0x08002e63
 8002df8:	08002e11 	.word	0x08002e11
 8002dfc:	08002e25 	.word	0x08002e25
 8002e00:	4a75      	ldr	r2, [pc, #468]	; (8002fd8 <HAL_GPIO_Init+0x2a4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e06:	e02c      	b.n	8002e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	623b      	str	r3, [r7, #32]
          break;
 8002e0e:	e029      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	3304      	adds	r3, #4
 8002e16:	623b      	str	r3, [r7, #32]
          break;
 8002e18:	e024      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	3308      	adds	r3, #8
 8002e20:	623b      	str	r3, [r7, #32]
          break;
 8002e22:	e01f      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	e01a      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e36:	2304      	movs	r3, #4
 8002e38:	623b      	str	r3, [r7, #32]
          break;
 8002e3a:	e013      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e44:	2308      	movs	r3, #8
 8002e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	611a      	str	r2, [r3, #16]
          break;
 8002e4e:	e009      	b.n	8002e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e50:	2308      	movs	r3, #8
 8002e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	615a      	str	r2, [r3, #20]
          break;
 8002e5a:	e003      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	623b      	str	r3, [r7, #32]
          break;
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          break;
 8002e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2bff      	cmp	r3, #255	; 0xff
 8002e68:	d801      	bhi.n	8002e6e <HAL_GPIO_Init+0x13a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	e001      	b.n	8002e72 <HAL_GPIO_Init+0x13e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2bff      	cmp	r3, #255	; 0xff
 8002e78:	d802      	bhi.n	8002e80 <HAL_GPIO_Init+0x14c>
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	e002      	b.n	8002e86 <HAL_GPIO_Init+0x152>
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	3b08      	subs	r3, #8
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	210f      	movs	r1, #15
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	6a39      	ldr	r1, [r7, #32]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80c1 	beq.w	8003036 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002eb4:	4b49      	ldr	r3, [pc, #292]	; (8002fdc <HAL_GPIO_Init+0x2a8>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	4a48      	ldr	r2, [pc, #288]	; (8002fdc <HAL_GPIO_Init+0x2a8>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6193      	str	r3, [r2, #24]
 8002ec0:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <HAL_GPIO_Init+0x2a8>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ecc:	4a44      	ldr	r2, [pc, #272]	; (8002fe0 <HAL_GPIO_Init+0x2ac>)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3c      	ldr	r2, [pc, #240]	; (8002fe4 <HAL_GPIO_Init+0x2b0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d01f      	beq.n	8002f38 <HAL_GPIO_Init+0x204>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a3b      	ldr	r2, [pc, #236]	; (8002fe8 <HAL_GPIO_Init+0x2b4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d019      	beq.n	8002f34 <HAL_GPIO_Init+0x200>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <HAL_GPIO_Init+0x2b8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d013      	beq.n	8002f30 <HAL_GPIO_Init+0x1fc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a39      	ldr	r2, [pc, #228]	; (8002ff0 <HAL_GPIO_Init+0x2bc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00d      	beq.n	8002f2c <HAL_GPIO_Init+0x1f8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a38      	ldr	r2, [pc, #224]	; (8002ff4 <HAL_GPIO_Init+0x2c0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d007      	beq.n	8002f28 <HAL_GPIO_Init+0x1f4>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a37      	ldr	r2, [pc, #220]	; (8002ff8 <HAL_GPIO_Init+0x2c4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_GPIO_Init+0x1f0>
 8002f20:	2305      	movs	r3, #5
 8002f22:	e00a      	b.n	8002f3a <HAL_GPIO_Init+0x206>
 8002f24:	2306      	movs	r3, #6
 8002f26:	e008      	b.n	8002f3a <HAL_GPIO_Init+0x206>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	e006      	b.n	8002f3a <HAL_GPIO_Init+0x206>
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e004      	b.n	8002f3a <HAL_GPIO_Init+0x206>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0x206>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_GPIO_Init+0x206>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	f002 0203 	and.w	r2, r2, #3
 8002f40:	0092      	lsls	r2, r2, #2
 8002f42:	4093      	lsls	r3, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f4a:	4925      	ldr	r1, [pc, #148]	; (8002fe0 <HAL_GPIO_Init+0x2ac>)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4924      	ldr	r1, [pc, #144]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	4920      	ldr	r1, [pc, #128]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	491a      	ldr	r1, [pc, #104]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	4916      	ldr	r1, [pc, #88]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d025      	beq.n	8003000 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4910      	ldr	r1, [pc, #64]	; (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]
 8002fc0:	e025      	b.n	800300e <HAL_GPIO_Init+0x2da>
 8002fc2:	bf00      	nop
 8002fc4:	10320000 	.word	0x10320000
 8002fc8:	10310000 	.word	0x10310000
 8002fcc:	10220000 	.word	0x10220000
 8002fd0:	10210000 	.word	0x10210000
 8002fd4:	10120000 	.word	0x10120000
 8002fd8:	10110000 	.word	0x10110000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40010800 	.word	0x40010800
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	40011800 	.word	0x40011800
 8002ff8:	40011c00 	.word	0x40011c00
 8002ffc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_GPIO_Init+0x324>)
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	43db      	mvns	r3, r3
 8003008:	4913      	ldr	r1, [pc, #76]	; (8003058 <HAL_GPIO_Init+0x324>)
 800300a:	4013      	ands	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_GPIO_Init+0x324>)
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	490e      	ldr	r1, [pc, #56]	; (8003058 <HAL_GPIO_Init+0x324>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	60cb      	str	r3, [r1, #12]
 8003026:	e006      	b.n	8003036 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_GPIO_Init+0x324>)
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	43db      	mvns	r3, r3
 8003030:	4909      	ldr	r1, [pc, #36]	; (8003058 <HAL_GPIO_Init+0x324>)
 8003032:	4013      	ands	r3, r2
 8003034:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	3301      	adds	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	f47f ae7e 	bne.w	8002d48 <HAL_GPIO_Init+0x14>
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	372c      	adds	r7, #44	; 0x2c
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e001      	b.n	800307e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	807b      	strh	r3, [r7, #2]
 8003096:	4613      	mov	r3, r2
 8003098:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800309a:	787b      	ldrb	r3, [r7, #1]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030a6:	e003      	b.n	80030b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	041a      	lsls	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	611a      	str	r2, [r3, #16]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e272      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8087 	beq.w	80031fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f0:	4b92      	ldr	r3, [pc, #584]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d00c      	beq.n	8003116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030fc:	4b8f      	ldr	r3, [pc, #572]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d112      	bne.n	800312e <HAL_RCC_OscConfig+0x5e>
 8003108:	4b8c      	ldr	r3, [pc, #560]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d10b      	bne.n	800312e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003116:	4b89      	ldr	r3, [pc, #548]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d06c      	beq.n	80031fc <HAL_RCC_OscConfig+0x12c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d168      	bne.n	80031fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e24c      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x76>
 8003138:	4b80      	ldr	r3, [pc, #512]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a7f      	ldr	r2, [pc, #508]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	e02e      	b.n	80031a4 <HAL_RCC_OscConfig+0xd4>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x98>
 800314e:	4b7b      	ldr	r3, [pc, #492]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7a      	ldr	r2, [pc, #488]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b78      	ldr	r3, [pc, #480]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a77      	ldr	r2, [pc, #476]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e01d      	b.n	80031a4 <HAL_RCC_OscConfig+0xd4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0xbc>
 8003172:	4b72      	ldr	r3, [pc, #456]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a71      	ldr	r2, [pc, #452]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6e      	ldr	r2, [pc, #440]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0xd4>
 800318c:	4b6b      	ldr	r3, [pc, #428]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6a      	ldr	r2, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a67      	ldr	r2, [pc, #412]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7ff f83e 	bl	800222c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7ff f83a 	bl	800222c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e200      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b5d      	ldr	r3, [pc, #372]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0xe4>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7ff f82a 	bl	800222c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7ff f826 	bl	800222c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1ec      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	4b53      	ldr	r3, [pc, #332]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x10c>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800320a:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003216:	4b49      	ldr	r3, [pc, #292]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b08      	cmp	r3, #8
 8003220:	d11c      	bne.n	800325c <HAL_RCC_OscConfig+0x18c>
 8003222:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_RCC_OscConfig+0x176>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e1c0      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003246:	4b3d      	ldr	r3, [pc, #244]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4939      	ldr	r1, [pc, #228]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	e03a      	b.n	80032d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_OscConfig+0x270>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe ffdf 	bl	800222c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe ffdb 	bl	800222c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e1a1      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b2a      	ldr	r3, [pc, #168]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4927      	ldr	r1, [pc, #156]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	e015      	b.n	80032d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_RCC_OscConfig+0x270>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe ffbe 	bl	800222c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b4:	f7fe ffba 	bl	800222c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e180      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d03a      	beq.n	8003354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d019      	beq.n	800331a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <HAL_RCC_OscConfig+0x274>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fe ff9e 	bl	800222c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe ff9a 	bl	800222c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e160      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003312:	2001      	movs	r0, #1
 8003314:	f000 faa6 	bl	8003864 <RCC_Delay>
 8003318:	e01c      	b.n	8003354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_RCC_OscConfig+0x274>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fe ff84 	bl	800222c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003326:	e00f      	b.n	8003348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003328:	f7fe ff80 	bl	800222c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d908      	bls.n	8003348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e146      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	42420000 	.word	0x42420000
 8003344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	4b92      	ldr	r3, [pc, #584]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e9      	bne.n	8003328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80a6 	beq.w	80034ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b8b      	ldr	r3, [pc, #556]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a87      	ldr	r2, [pc, #540]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337c:	61d3      	str	r3, [r2, #28]
 800337e:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	4b82      	ldr	r3, [pc, #520]	; (8003598 <HAL_RCC_OscConfig+0x4c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d118      	bne.n	80033cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339a:	4b7f      	ldr	r3, [pc, #508]	; (8003598 <HAL_RCC_OscConfig+0x4c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7e      	ldr	r2, [pc, #504]	; (8003598 <HAL_RCC_OscConfig+0x4c8>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a6:	f7fe ff41 	bl	800222c <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fe ff3d 	bl	800222c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b64      	cmp	r3, #100	; 0x64
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e103      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	4b75      	ldr	r3, [pc, #468]	; (8003598 <HAL_RCC_OscConfig+0x4c8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x312>
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6213      	str	r3, [r2, #32]
 80033e0:	e02d      	b.n	800343e <HAL_RCC_OscConfig+0x36e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x334>
 80033ea:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6213      	str	r3, [r2, #32]
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a66      	ldr	r2, [pc, #408]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	6213      	str	r3, [r2, #32]
 8003402:	e01c      	b.n	800343e <HAL_RCC_OscConfig+0x36e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d10c      	bne.n	8003426 <HAL_RCC_OscConfig+0x356>
 800340c:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a60      	ldr	r2, [pc, #384]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6213      	str	r3, [r2, #32]
 8003424:	e00b      	b.n	800343e <HAL_RCC_OscConfig+0x36e>
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a5a      	ldr	r2, [pc, #360]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	4b58      	ldr	r3, [pc, #352]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a57      	ldr	r2, [pc, #348]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003446:	f7fe fef1 	bl	800222c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe feed 	bl	800222c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0b1      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ee      	beq.n	800344e <HAL_RCC_OscConfig+0x37e>
 8003470:	e014      	b.n	800349c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fe fedb 	bl	800222c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fe fed7 	bl	800222c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e09b      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	4b40      	ldr	r3, [pc, #256]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ee      	bne.n	800347a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4b3c      	ldr	r3, [pc, #240]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4a3b      	ldr	r2, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8087 	beq.w	80035c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b8:	4b36      	ldr	r3, [pc, #216]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d061      	beq.n	8003588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d146      	bne.n	800355a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034cc:	4b33      	ldr	r3, [pc, #204]	; (800359c <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe feab 	bl	800222c <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034da:	f7fe fea7 	bl	800222c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e06d      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f0      	bne.n	80034da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d108      	bne.n	8003514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4921      	ldr	r1, [pc, #132]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a19      	ldr	r1, [r3, #32]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	430b      	orrs	r3, r1
 8003526:	491b      	ldr	r1, [pc, #108]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x4cc>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003532:	f7fe fe7b 	bl	800222c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353a:	f7fe fe77 	bl	800222c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e03d      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x46a>
 8003558:	e035      	b.n	80035c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_RCC_OscConfig+0x4cc>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fe fe64 	bl	800222c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fe fe60 	bl	800222c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e026      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x498>
 8003586:	e01e      	b.n	80035c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e019      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
 8003594:	40021000 	.word	0x40021000
 8003598:	40007000 	.word	0x40007000
 800359c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x500>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000

080035d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0d0      	b.n	800378a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e8:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d910      	bls.n	8003618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 0207 	bic.w	r2, r3, #7
 80035fe:	4965      	ldr	r1, [pc, #404]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0b8      	b.n	800378a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800363a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	494d      	ldr	r1, [pc, #308]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d040      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d115      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e07f      	b.n	800378a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003692:	4b41      	ldr	r3, [pc, #260]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e073      	b.n	800378a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a2:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06b      	b.n	800378a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b2:	4b39      	ldr	r3, [pc, #228]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f023 0203 	bic.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4936      	ldr	r1, [pc, #216]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c4:	f7fe fdb2 	bl	800222c <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036cc:	f7fe fdae 	bl	800222c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e053      	b.n	800378a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 020c 	and.w	r2, r3, #12
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d1eb      	bne.n	80036cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f4:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d210      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 0207 	bic.w	r2, r3, #7
 800370a:	4922      	ldr	r1, [pc, #136]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e032      	b.n	800378a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4916      	ldr	r1, [pc, #88]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	490e      	ldr	r1, [pc, #56]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003762:	f000 f821 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8003766:	4602      	mov	r2, r0
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	490a      	ldr	r1, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	5ccb      	ldrb	r3, [r1, r3]
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <HAL_RCC_ClockConfig+0x1cc>)
 800377c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fd10 	bl	80021a8 <HAL_InitTick>

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40022000 	.word	0x40022000
 8003798:	40021000 	.word	0x40021000
 800379c:	080064e0 	.word	0x080064e0
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000004 	.word	0x20000004

080037a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a8:	b490      	push	{r4, r7}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ae:	4b29      	ldr	r3, [pc, #164]	; (8003854 <HAL_RCC_GetSysClockFreq+0xac>)
 80037b0:	1d3c      	adds	r4, r7, #4
 80037b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037b8:	f240 2301 	movw	r3, #513	; 0x201
 80037bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037d2:	4b21      	ldr	r3, [pc, #132]	; (8003858 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d002      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x40>
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d003      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0x46>
 80037e6:	e02b      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037e8:	4b1c      	ldr	r3, [pc, #112]	; (800385c <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ea:	623b      	str	r3, [r7, #32]
      break;
 80037ec:	e02b      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	0c9b      	lsrs	r3, r3, #18
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3328      	adds	r3, #40	; 0x28
 80037f8:	443b      	add	r3, r7
 80037fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d012      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_RCC_GetSysClockFreq+0xb0>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	0c5b      	lsrs	r3, r3, #17
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	3328      	adds	r3, #40	; 0x28
 8003816:	443b      	add	r3, r7
 8003818:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800381c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	4a0e      	ldr	r2, [pc, #56]	; (800385c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003822:	fb03 f202 	mul.w	r2, r3, r2
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
 800382e:	e004      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	623b      	str	r3, [r7, #32]
      break;
 800383e:	e002      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003842:	623b      	str	r3, [r7, #32]
      break;
 8003844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003846:	6a3b      	ldr	r3, [r7, #32]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3728      	adds	r7, #40	; 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bc90      	pop	{r4, r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	08005ee0 	.word	0x08005ee0
 8003858:	40021000 	.word	0x40021000
 800385c:	007a1200 	.word	0x007a1200
 8003860:	003d0900 	.word	0x003d0900

08003864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <RCC_Delay+0x34>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <RCC_Delay+0x38>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0a5b      	lsrs	r3, r3, #9
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003880:	bf00      	nop
  }
  while (Delay --);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	60fa      	str	r2, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f9      	bne.n	8003880 <RCC_Delay+0x1c>
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000000 	.word	0x20000000
 800389c:	10624dd3 	.word	0x10624dd3

080038a0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_SRAM_Init+0x1c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ba:	d101      	bne.n	80038c0 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e038      	b.n	8003932 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7fe fb69 	bl	8001fac <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3308      	adds	r3, #8
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f001 f94f 	bl	8004b88 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	f001 f9b1 	bl	8004c5c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6858      	ldr	r0, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	f001 f9dc 	bl	8004cc4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	6892      	ldr	r2, [r2, #8]
 8003920:	f041 0101 	orr.w	r1, r1, #1
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e041      	b.n	80039d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7fe fa61 	bl	8001e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 fd67 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e041      	b.n	8003a6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f839 	bl	8003a76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f000 fd18 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x28>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e022      	b.n	8003af6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d109      	bne.n	8003aca <HAL_TIM_PWM_Start_DMA+0x42>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	e015      	b.n	8003af6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d109      	bne.n	8003ae4 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e008      	b.n	8003af6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	e162      	b.n	8003dc4 <HAL_TIM_PWM_Start_DMA+0x33c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <HAL_TIM_PWM_Start_DMA+0x90>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e022      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0xd6>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d109      	bne.n	8003b32 <HAL_TIM_PWM_Start_DMA+0xaa>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e015      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0xd6>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d109      	bne.n	8003b4c <HAL_TIM_PWM_Start_DMA+0xc4>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e008      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0xd6>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d024      	beq.n	8003bac <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start_DMA+0xea>
 8003b68:	887b      	ldrh	r3, [r7, #2]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e128      	b.n	8003dc4 <HAL_TIM_PWM_Start_DMA+0x33c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start_DMA+0xfa>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b80:	e016      	b.n	8003bb0 <HAL_TIM_PWM_Start_DMA+0x128>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b90:	e00e      	b.n	8003bb0 <HAL_TIM_PWM_Start_DMA+0x128>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Start_DMA+0x11a>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba0:	e006      	b.n	8003bb0 <HAL_TIM_PWM_Start_DMA+0x128>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003baa:	e001      	b.n	8003bb0 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e109      	b.n	8003dc4 <HAL_TIM_PWM_Start_DMA+0x33c>
  }

  switch (Channel)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	f200 80ae 	bhi.w	8003d14 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003bb8:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003bf5 	.word	0x08003bf5
 8003bc4:	08003d15 	.word	0x08003d15
 8003bc8:	08003d15 	.word	0x08003d15
 8003bcc:	08003d15 	.word	0x08003d15
 8003bd0:	08003c3d 	.word	0x08003c3d
 8003bd4:	08003d15 	.word	0x08003d15
 8003bd8:	08003d15 	.word	0x08003d15
 8003bdc:	08003d15 	.word	0x08003d15
 8003be0:	08003c85 	.word	0x08003c85
 8003be4:	08003d15 	.word	0x08003d15
 8003be8:	08003d15 	.word	0x08003d15
 8003bec:	08003d15 	.word	0x08003d15
 8003bf0:	08003ccd 	.word	0x08003ccd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	4a74      	ldr	r2, [pc, #464]	; (8003dcc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	4a73      	ldr	r2, [pc, #460]	; (8003dd0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3334      	adds	r3, #52	; 0x34
 8003c18:	461a      	mov	r2, r3
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	f7fe fcb8 	bl	8002590 <HAL_DMA_Start_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0cc      	b.n	8003dc4 <HAL_TIM_PWM_Start_DMA+0x33c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	60da      	str	r2, [r3, #12]
      break;
 8003c3a:	e06c      	b.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	4a62      	ldr	r2, [pc, #392]	; (8003dcc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	4a61      	ldr	r2, [pc, #388]	; (8003dd0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	4a60      	ldr	r2, [pc, #384]	; (8003dd4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3338      	adds	r3, #56	; 0x38
 8003c60:	461a      	mov	r2, r3
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	f7fe fc94 	bl	8002590 <HAL_DMA_Start_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0a8      	b.n	8003dc4 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c80:	60da      	str	r2, [r3, #12]
      break;
 8003c82:	e048      	b.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a50      	ldr	r2, [pc, #320]	; (8003dcc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a4f      	ldr	r2, [pc, #316]	; (8003dd0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4a4e      	ldr	r2, [pc, #312]	; (8003dd4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	333c      	adds	r3, #60	; 0x3c
 8003ca8:	461a      	mov	r2, r3
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	f7fe fc70 	bl	8002590 <HAL_DMA_Start_IT>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e084      	b.n	8003dc4 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc8:	60da      	str	r2, [r3, #12]
      break;
 8003cca:	e024      	b.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	4a3e      	ldr	r2, [pc, #248]	; (8003dcc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	4a3d      	ldr	r2, [pc, #244]	; (8003dd0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4a3c      	ldr	r2, [pc, #240]	; (8003dd4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3340      	adds	r3, #64	; 0x40
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	887b      	ldrh	r3, [r7, #2]
 8003cf4:	f7fe fc4c 	bl	8002590 <HAL_DMA_Start_IT>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e060      	b.n	8003dc4 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d10:	60da      	str	r2, [r3, #12]
      break;
 8003d12:	e000      	b.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003d14:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fe50 	bl	80049c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2b      	ldr	r2, [pc, #172]	; (8003dd8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <HAL_TIM_PWM_Start_DMA+0x354>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_PWM_Start_DMA+0x2b4>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_Start_DMA+0x2b6>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x2ca>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <HAL_TIM_PWM_Start_DMA+0x306>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_TIM_PWM_Start_DMA+0x354>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_TIM_PWM_Start_DMA+0x306>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d00e      	beq.n	8003d8e <HAL_TIM_PWM_Start_DMA+0x306>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_TIM_PWM_Start_DMA+0x306>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_TIM_PWM_Start_DMA+0x306>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <HAL_TIM_PWM_Start_DMA+0x360>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d010      	beq.n	8003dc2 <HAL_TIM_PWM_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db0:	e007      	b.n	8003dc2 <HAL_TIM_PWM_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	0800433b 	.word	0x0800433b
 8003dd0:	080043e3 	.word	0x080043e3
 8003dd4:	080042a9 	.word	0x080042a9
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40013400 	.word	0x40013400
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00

08003dec <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	d855      	bhi.n	8003ea8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e39 	.word	0x08003e39
 8003e08:	08003ea9 	.word	0x08003ea9
 8003e0c:	08003ea9 	.word	0x08003ea9
 8003e10:	08003ea9 	.word	0x08003ea9
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003ea9 	.word	0x08003ea9
 8003e1c:	08003ea9 	.word	0x08003ea9
 8003e20:	08003ea9 	.word	0x08003ea9
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003ea9 	.word	0x08003ea9
 8003e2c:	08003ea9 	.word	0x08003ea9
 8003e30:	08003ea9 	.word	0x08003ea9
 8003e34:	08003e8d 	.word	0x08003e8d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fbff 	bl	8002650 <HAL_DMA_Abort_IT>
      break;
 8003e52:	e02a      	b.n	8003eaa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fbf1 	bl	8002650 <HAL_DMA_Abort_IT>
      break;
 8003e6e:	e01c      	b.n	8003eaa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fbe3 	bl	8002650 <HAL_DMA_Abort_IT>
      break;
 8003e8a:	e00e      	b.n	8003eaa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fbd5 	bl	8002650 <HAL_DMA_Abort_IT>
      break;
 8003ea6:	e000      	b.n	8003eaa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003ea8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fd86 	bl	80049c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2e      	ldr	r2, [pc, #184]	; (8003f78 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIM_PWM_Stop_DMA+0xe0>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <HAL_TIM_PWM_Stop_DMA+0x190>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d017      	beq.n	8003f06 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6a1a      	ldr	r2, [r3, #32]
 8003edc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	f240 4344 	movw	r3, #1092	; 0x444
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d107      	bne.n	8003f06 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a1a      	ldr	r2, [r3, #32]
 8003f0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	f240 4344 	movw	r3, #1092	; 0x444
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d107      	bne.n	8003f36 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <HAL_TIM_PWM_Stop_DMA+0x15a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	e013      	b.n	8003f6e <HAL_TIM_PWM_Stop_DMA+0x182>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_PWM_Stop_DMA+0x16a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f54:	e00b      	b.n	8003f6e <HAL_TIM_PWM_Stop_DMA+0x182>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f64:	e003      	b.n	8003f6e <HAL_TIM_PWM_Stop_DMA+0x182>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40013400 	.word	0x40013400

08003f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0ac      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	f200 809f 	bhi.w	80040e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	080040e9 	.word	0x080040e9
 8003fb8:	080040e9 	.word	0x080040e9
 8003fbc:	080040e9 	.word	0x080040e9
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	080040e9 	.word	0x080040e9
 8003fc8:	080040e9 	.word	0x080040e9
 8003fcc:	080040e9 	.word	0x080040e9
 8003fd0:	08004067 	.word	0x08004067
 8003fd4:	080040e9 	.word	0x080040e9
 8003fd8:	080040e9 	.word	0x080040e9
 8003fdc:	080040e9 	.word	0x080040e9
 8003fe0:	080040a7 	.word	0x080040a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 faa8 	bl	8004540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0208 	orr.w	r2, r2, #8
 8003ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	619a      	str	r2, [r3, #24]
      break;
 8004022:	e062      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 faf8 	bl	8004620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6999      	ldr	r1, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	021a      	lsls	r2, r3, #8
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	619a      	str	r2, [r3, #24]
      break;
 8004064:	e041      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fb4b 	bl	8004708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0208 	orr.w	r2, r2, #8
 8004080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0204 	bic.w	r2, r2, #4
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	61da      	str	r2, [r3, #28]
      break;
 80040a4:	e021      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fb9f 	bl	80047f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	021a      	lsls	r2, r3, #8
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	61da      	str	r2, [r3, #28]
      break;
 80040e6:	e000      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIM_ConfigClockSource+0x18>
 8004110:	2302      	movs	r3, #2
 8004112:	e0b3      	b.n	800427c <HAL_TIM_ConfigClockSource+0x180>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414c:	d03e      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0xd0>
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	f200 8087 	bhi.w	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415a:	f000 8085 	beq.w	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d87f      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d01a      	beq.n	800419e <HAL_TIM_ConfigClockSource+0xa2>
 8004168:	2b70      	cmp	r3, #112	; 0x70
 800416a:	d87b      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d050      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x116>
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d877      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004174:	2b50      	cmp	r3, #80	; 0x50
 8004176:	d03c      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004178:	2b50      	cmp	r3, #80	; 0x50
 800417a:	d873      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d058      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x136>
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d86f      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004184:	2b30      	cmp	r3, #48	; 0x30
 8004186:	d064      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004188:	2b30      	cmp	r3, #48	; 0x30
 800418a:	d86b      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800418c:	2b20      	cmp	r3, #32
 800418e:	d060      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d867      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05c      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004198:	2b10      	cmp	r3, #16
 800419a:	d05a      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800419c:	e062      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6899      	ldr	r1, [r3, #8]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f000 fbea 	bl	8004986 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	609a      	str	r2, [r3, #8]
      break;
 80041ca:	e04e      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6899      	ldr	r1, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f000 fbd3 	bl	8004986 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ee:	609a      	str	r2, [r3, #8]
      break;
 80041f0:	e03b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 fb4a 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2150      	movs	r1, #80	; 0x50
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fba1 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004210:	e02b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	461a      	mov	r2, r3
 8004220:	f000 fb68 	bl	80048f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2160      	movs	r1, #96	; 0x60
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fb91 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004230:	e01b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	461a      	mov	r2, r3
 8004240:	f000 fb2a 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2140      	movs	r1, #64	; 0x40
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fb81 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004250:	e00b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f000 fb78 	bl	8004952 <TIM_ITRx_SetConfig>
        break;
 8004262:	e002      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004268:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ce:	e02a      	b.n	8004326 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d107      	bne.n	80042ea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e8:	e01d      	b.n	8004326 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d107      	bne.n	8004304 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2204      	movs	r2, #4
 80042f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004302:	e010      	b.n	8004326 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	429a      	cmp	r2, r3
 800430c:	d107      	bne.n	800431e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2208      	movs	r2, #8
 8004312:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800431c:	e003      	b.n	8004326 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff ffb5 	bl	8004296 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	771a      	strb	r2, [r3, #28]
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d10b      	bne.n	800436a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d136      	bne.n	80043ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004368:	e031      	b.n	80043ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d10b      	bne.n	800438c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2202      	movs	r2, #2
 8004378:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d125      	bne.n	80043ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438a:	e020      	b.n	80043ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d10b      	bne.n	80043ae <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2204      	movs	r2, #4
 800439a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d114      	bne.n	80043ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ac:	e00f      	b.n	80043ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d10a      	bne.n	80043ce <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2208      	movs	r2, #8
 80043bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7fd f85e 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	771a      	strb	r2, [r3, #28]
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d103      	bne.n	8004402 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	771a      	strb	r2, [r3, #28]
 8004400:	e019      	b.n	8004436 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d103      	bne.n	8004414 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2202      	movs	r2, #2
 8004410:	771a      	strb	r2, [r3, #28]
 8004412:	e010      	b.n	8004436 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d103      	bne.n	8004426 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2204      	movs	r2, #4
 8004422:	771a      	strb	r2, [r3, #28]
 8004424:	e007      	b.n	8004436 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d102      	bne.n	8004436 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2208      	movs	r2, #8
 8004434:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff24 	bl	8004284 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	771a      	strb	r2, [r3, #28]
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a33      	ldr	r2, [pc, #204]	; (800452c <TIM_Base_SetConfig+0xe0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a32      	ldr	r2, [pc, #200]	; (8004530 <TIM_Base_SetConfig+0xe4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00f      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004472:	d00b      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <TIM_Base_SetConfig+0xe8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a2e      	ldr	r2, [pc, #184]	; (8004538 <TIM_Base_SetConfig+0xec>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a2d      	ldr	r2, [pc, #180]	; (800453c <TIM_Base_SetConfig+0xf0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a22      	ldr	r2, [pc, #136]	; (800452c <TIM_Base_SetConfig+0xe0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <TIM_Base_SetConfig+0x82>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a21      	ldr	r2, [pc, #132]	; (8004530 <TIM_Base_SetConfig+0xe4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00f      	beq.n	80044ce <TIM_Base_SetConfig+0x82>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b4:	d00b      	beq.n	80044ce <TIM_Base_SetConfig+0x82>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <TIM_Base_SetConfig+0xe8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0x82>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <TIM_Base_SetConfig+0xec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0x82>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	; (800453c <TIM_Base_SetConfig+0xf0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <TIM_Base_SetConfig+0xe0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_Base_SetConfig+0xc8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <TIM_Base_SetConfig+0xe4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d103      	bne.n	800451c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	615a      	str	r2, [r3, #20]
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40013400 	.word	0x40013400
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00

08004540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 0302 	bic.w	r3, r3, #2
 8004588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a20      	ldr	r2, [pc, #128]	; (8004618 <TIM_OC1_SetConfig+0xd8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d003      	beq.n	80045a4 <TIM_OC1_SetConfig+0x64>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a1f      	ldr	r2, [pc, #124]	; (800461c <TIM_OC1_SetConfig+0xdc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10c      	bne.n	80045be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0308 	bic.w	r3, r3, #8
 80045aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f023 0304 	bic.w	r3, r3, #4
 80045bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <TIM_OC1_SetConfig+0xd8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC1_SetConfig+0x8e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <TIM_OC1_SetConfig+0xdc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d111      	bne.n	80045f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40013400 	.word	0x40013400

08004620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0210 	bic.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0320 	bic.w	r3, r3, #32
 800466a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a21      	ldr	r2, [pc, #132]	; (8004700 <TIM_OC2_SetConfig+0xe0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_OC2_SetConfig+0x68>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a20      	ldr	r2, [pc, #128]	; (8004704 <TIM_OC2_SetConfig+0xe4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d10d      	bne.n	80046a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a16      	ldr	r2, [pc, #88]	; (8004700 <TIM_OC2_SetConfig+0xe0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_OC2_SetConfig+0x94>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <TIM_OC2_SetConfig+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d113      	bne.n	80046dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40013400 	.word	0x40013400

08004708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <TIM_OC3_SetConfig+0xe0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_OC3_SetConfig+0x66>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a20      	ldr	r2, [pc, #128]	; (80047ec <TIM_OC3_SetConfig+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10d      	bne.n	800478a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <TIM_OC3_SetConfig+0xe0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC3_SetConfig+0x92>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a15      	ldr	r2, [pc, #84]	; (80047ec <TIM_OC3_SetConfig+0xe4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d113      	bne.n	80047c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40013400 	.word	0x40013400

080047f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <TIM_OC4_SetConfig+0xa0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_OC4_SetConfig+0x68>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <TIM_OC4_SetConfig+0xa4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d109      	bne.n	800486c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800485e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	019b      	lsls	r3, r3, #6
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40013400 	.word	0x40013400

08004898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f023 0210 	bic.w	r2, r3, #16
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800491e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	031b      	lsls	r3, r3, #12
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	f043 0307 	orr.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004986:	b480      	push	{r7}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2201      	movs	r2, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1a      	ldr	r2, [r3, #32]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	fa01 f303 	lsl.w	r3, r1, r3
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e050      	b.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a14      	ldr	r2, [pc, #80]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10c      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr
 8004ad0:	40012c00 	.word	0x40012c00
 8004ad4:	40013400 	.word	0x40013400
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40000c00 	.word	0x40000c00

08004ae4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e03d      	b.n	8004b7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
	...

08004b88 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	f023 0101 	bic.w	r1, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d102      	bne.n	8004bb8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004bb2:	2340      	movs	r3, #64	; 0x40
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e001      	b.n	8004bbc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004bc8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004bce:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004bd4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004bda:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004be0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004be6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004bec:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004bf2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004bf8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004c16:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <FSMC_NORSRAM_Init+0xd0>)
 8004c18:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c20:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004c28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	43db      	mvns	r3, r3
 8004c38:	ea02 0103 	and.w	r1, r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4319      	orrs	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	0008fb7f 	.word	0x0008fb7f

08004c5c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c72:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	051b      	lsls	r3, r3, #20
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	3b02      	subs	r3, #2
 8004ca2:	061b      	lsls	r3, r3, #24
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	3201      	adds	r2, #1
 8004cb0:	4319      	orrs	r1, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cd8:	d11d      	bne.n	8004d16 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	6811      	ldr	r1, [r2, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	6852      	ldr	r2, [r2, #4]
 8004cee:	0112      	lsls	r2, r2, #4
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	6892      	ldr	r2, [r2, #8]
 8004cf6:	0212      	lsls	r2, r2, #8
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	6992      	ldr	r2, [r2, #24]
 8004cfe:	4311      	orrs	r1, r2
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	68d2      	ldr	r2, [r2, #12]
 8004d04:	0412      	lsls	r2, r2, #16
 8004d06:	430a      	orrs	r2, r1
 8004d08:	ea43 0102 	orr.w	r1, r3, r2
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d14:	e005      	b.n	8004d22 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	cff00000 	.word	0xcff00000

08004d34 <tan>:
 8004d34:	b530      	push	{r4, r5, lr}
 8004d36:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <tan+0x4c>)
 8004d38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	b087      	sub	sp, #28
 8004d40:	dc06      	bgt.n	8004d50 <tan+0x1c>
 8004d42:	2301      	movs	r3, #1
 8004d44:	2200      	movs	r2, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f000 fd59 	bl	8005800 <__kernel_tan>
 8004d4e:	e006      	b.n	8004d5e <tan+0x2a>
 8004d50:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <tan+0x50>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	dd05      	ble.n	8004d62 <tan+0x2e>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	f7fb fa69 	bl	8000230 <__aeabi_dsub>
 8004d5e:	b007      	add	sp, #28
 8004d60:	bd30      	pop	{r4, r5, pc}
 8004d62:	aa02      	add	r2, sp, #8
 8004d64:	f000 f810 	bl	8004d88 <__ieee754_rem_pio2>
 8004d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d6c:	0040      	lsls	r0, r0, #1
 8004d6e:	f000 0002 	and.w	r0, r0, #2
 8004d72:	f1c0 0001 	rsb	r0, r0, #1
 8004d76:	9000      	str	r0, [sp, #0]
 8004d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d7c:	e7e5      	b.n	8004d4a <tan+0x16>
 8004d7e:	bf00      	nop
 8004d80:	3fe921fb 	.word	0x3fe921fb
 8004d84:	7fefffff 	.word	0x7fefffff

08004d88 <__ieee754_rem_pio2>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	4ac4      	ldr	r2, [pc, #784]	; (80050a0 <__ieee754_rem_pio2+0x318>)
 8004d90:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004d94:	b08d      	sub	sp, #52	; 0x34
 8004d96:	4592      	cmp	sl, r2
 8004d98:	9104      	str	r1, [sp, #16]
 8004d9a:	dc07      	bgt.n	8004dac <__ieee754_rem_pio2+0x24>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e9c4 0100 	strd	r0, r1, [r4]
 8004da4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004da8:	2500      	movs	r5, #0
 8004daa:	e024      	b.n	8004df6 <__ieee754_rem_pio2+0x6e>
 8004dac:	4abd      	ldr	r2, [pc, #756]	; (80050a4 <__ieee754_rem_pio2+0x31c>)
 8004dae:	4592      	cmp	sl, r2
 8004db0:	dc72      	bgt.n	8004e98 <__ieee754_rem_pio2+0x110>
 8004db2:	9b04      	ldr	r3, [sp, #16]
 8004db4:	4dbc      	ldr	r5, [pc, #752]	; (80050a8 <__ieee754_rem_pio2+0x320>)
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	a3ab      	add	r3, pc, #684	; (adr r3, 8005068 <__ieee754_rem_pio2+0x2e0>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	dd36      	ble.n	8004e2e <__ieee754_rem_pio2+0xa6>
 8004dc0:	f7fb fa36 	bl	8000230 <__aeabi_dsub>
 8004dc4:	45aa      	cmp	sl, r5
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	460f      	mov	r7, r1
 8004dca:	d018      	beq.n	8004dfe <__ieee754_rem_pio2+0x76>
 8004dcc:	a3a8      	add	r3, pc, #672	; (adr r3, 8005070 <__ieee754_rem_pio2+0x2e8>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fa2d 	bl	8000230 <__aeabi_dsub>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4630      	mov	r0, r6
 8004ddc:	e9c4 2300 	strd	r2, r3, [r4]
 8004de0:	4639      	mov	r1, r7
 8004de2:	f7fb fa25 	bl	8000230 <__aeabi_dsub>
 8004de6:	a3a2      	add	r3, pc, #648	; (adr r3, 8005070 <__ieee754_rem_pio2+0x2e8>)
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb fa20 	bl	8000230 <__aeabi_dsub>
 8004df0:	2501      	movs	r5, #1
 8004df2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004df6:	4628      	mov	r0, r5
 8004df8:	b00d      	add	sp, #52	; 0x34
 8004dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfe:	a39e      	add	r3, pc, #632	; (adr r3, 8005078 <__ieee754_rem_pio2+0x2f0>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f7fb fa14 	bl	8000230 <__aeabi_dsub>
 8004e08:	a39d      	add	r3, pc, #628	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2f8>)
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	f7fb fa0d 	bl	8000230 <__aeabi_dsub>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	e9c4 2300 	strd	r2, r3, [r4]
 8004e20:	4639      	mov	r1, r7
 8004e22:	f7fb fa05 	bl	8000230 <__aeabi_dsub>
 8004e26:	a396      	add	r3, pc, #600	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2f8>)
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	e7de      	b.n	8004dec <__ieee754_rem_pio2+0x64>
 8004e2e:	f7fb fa01 	bl	8000234 <__adddf3>
 8004e32:	45aa      	cmp	sl, r5
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	d016      	beq.n	8004e68 <__ieee754_rem_pio2+0xe0>
 8004e3a:	a38d      	add	r3, pc, #564	; (adr r3, 8005070 <__ieee754_rem_pio2+0x2e8>)
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	f7fb f9f8 	bl	8000234 <__adddf3>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4630      	mov	r0, r6
 8004e4a:	e9c4 2300 	strd	r2, r3, [r4]
 8004e4e:	4639      	mov	r1, r7
 8004e50:	f7fb f9ee 	bl	8000230 <__aeabi_dsub>
 8004e54:	a386      	add	r3, pc, #536	; (adr r3, 8005070 <__ieee754_rem_pio2+0x2e8>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f7fb f9eb 	bl	8000234 <__adddf3>
 8004e5e:	f04f 35ff 	mov.w	r5, #4294967295
 8004e62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e66:	e7c6      	b.n	8004df6 <__ieee754_rem_pio2+0x6e>
 8004e68:	a383      	add	r3, pc, #524	; (adr r3, 8005078 <__ieee754_rem_pio2+0x2f0>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb f9e1 	bl	8000234 <__adddf3>
 8004e72:	a383      	add	r3, pc, #524	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2f8>)
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	4606      	mov	r6, r0
 8004e7a:	460f      	mov	r7, r1
 8004e7c:	f7fb f9da 	bl	8000234 <__adddf3>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4630      	mov	r0, r6
 8004e86:	e9c4 2300 	strd	r2, r3, [r4]
 8004e8a:	4639      	mov	r1, r7
 8004e8c:	f7fb f9d0 	bl	8000230 <__aeabi_dsub>
 8004e90:	a37b      	add	r3, pc, #492	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2f8>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	e7e0      	b.n	8004e5a <__ieee754_rem_pio2+0xd2>
 8004e98:	4a84      	ldr	r2, [pc, #528]	; (80050ac <__ieee754_rem_pio2+0x324>)
 8004e9a:	4592      	cmp	sl, r2
 8004e9c:	f300 80d5 	bgt.w	800504a <__ieee754_rem_pio2+0x2c2>
 8004ea0:	f000 feaa 	bl	8005bf8 <fabs>
 8004ea4:	a378      	add	r3, pc, #480	; (adr r3, 8005088 <__ieee754_rem_pio2+0x300>)
 8004ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eaa:	4606      	mov	r6, r0
 8004eac:	460f      	mov	r7, r1
 8004eae:	f7fb fb77 	bl	80005a0 <__aeabi_dmul>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	4b7e      	ldr	r3, [pc, #504]	; (80050b0 <__ieee754_rem_pio2+0x328>)
 8004eb6:	f7fb f9bd 	bl	8000234 <__adddf3>
 8004eba:	f7fb fe0b 	bl	8000ad4 <__aeabi_d2iz>
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	f7fb fb04 	bl	80004cc <__aeabi_i2d>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ecc:	a366      	add	r3, pc, #408	; (adr r3, 8005068 <__ieee754_rem_pio2+0x2e0>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	f7fb fb65 	bl	80005a0 <__aeabi_dmul>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4630      	mov	r0, r6
 8004edc:	4639      	mov	r1, r7
 8004ede:	f7fb f9a7 	bl	8000230 <__aeabi_dsub>
 8004ee2:	a363      	add	r3, pc, #396	; (adr r3, 8005070 <__ieee754_rem_pio2+0x2e8>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	4680      	mov	r8, r0
 8004eea:	4689      	mov	r9, r1
 8004eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef0:	f7fb fb56 	bl	80005a0 <__aeabi_dmul>
 8004ef4:	2d1f      	cmp	r5, #31
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460f      	mov	r7, r1
 8004efa:	dc0e      	bgt.n	8004f1a <__ieee754_rem_pio2+0x192>
 8004efc:	4b6d      	ldr	r3, [pc, #436]	; (80050b4 <__ieee754_rem_pio2+0x32c>)
 8004efe:	1e6a      	subs	r2, r5, #1
 8004f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f04:	4553      	cmp	r3, sl
 8004f06:	d008      	beq.n	8004f1a <__ieee754_rem_pio2+0x192>
 8004f08:	4632      	mov	r2, r6
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4649      	mov	r1, r9
 8004f10:	f7fb f98e 	bl	8000230 <__aeabi_dsub>
 8004f14:	e9c4 0100 	strd	r0, r1, [r4]
 8004f18:	e013      	b.n	8004f42 <__ieee754_rem_pio2+0x1ba>
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4640      	mov	r0, r8
 8004f20:	4649      	mov	r1, r9
 8004f22:	f7fb f985 	bl	8000230 <__aeabi_dsub>
 8004f26:	ea4f 532a 	mov.w	r3, sl, asr #20
 8004f2a:	9305      	str	r3, [sp, #20]
 8004f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f30:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8004f34:	f1ba 0f10 	cmp.w	sl, #16
 8004f38:	dc1f      	bgt.n	8004f7a <__ieee754_rem_pio2+0x1f2>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	e9c4 2300 	strd	r2, r3, [r4]
 8004f42:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8004f46:	4640      	mov	r0, r8
 8004f48:	4653      	mov	r3, sl
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	f7fb f970 	bl	8000230 <__aeabi_dsub>
 8004f50:	4632      	mov	r2, r6
 8004f52:	463b      	mov	r3, r7
 8004f54:	f7fb f96c 	bl	8000230 <__aeabi_dsub>
 8004f58:	460b      	mov	r3, r1
 8004f5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f5e:	9904      	ldr	r1, [sp, #16]
 8004f60:	4602      	mov	r2, r0
 8004f62:	2900      	cmp	r1, #0
 8004f64:	f6bf af47 	bge.w	8004df6 <__ieee754_rem_pio2+0x6e>
 8004f68:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004f6c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004f70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f74:	60e3      	str	r3, [r4, #12]
 8004f76:	426d      	negs	r5, r5
 8004f78:	e73d      	b.n	8004df6 <__ieee754_rem_pio2+0x6e>
 8004f7a:	a33f      	add	r3, pc, #252	; (adr r3, 8005078 <__ieee754_rem_pio2+0x2f0>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f84:	f7fb fb0c 	bl	80005a0 <__aeabi_dmul>
 8004f88:	4606      	mov	r6, r0
 8004f8a:	460f      	mov	r7, r1
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4640      	mov	r0, r8
 8004f92:	4649      	mov	r1, r9
 8004f94:	f7fb f94c 	bl	8000230 <__aeabi_dsub>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4682      	mov	sl, r0
 8004f9e:	468b      	mov	fp, r1
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	f7fb f944 	bl	8000230 <__aeabi_dsub>
 8004fa8:	4632      	mov	r2, r6
 8004faa:	463b      	mov	r3, r7
 8004fac:	f7fb f940 	bl	8000230 <__aeabi_dsub>
 8004fb0:	a333      	add	r3, pc, #204	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2f8>)
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460f      	mov	r7, r1
 8004fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fbe:	f7fb faef 	bl	80005a0 <__aeabi_dmul>
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	f7fb f933 	bl	8000230 <__aeabi_dsub>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4606      	mov	r6, r0
 8004fd0:	460f      	mov	r7, r1
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	f7fb f92b 	bl	8000230 <__aeabi_dsub>
 8004fda:	9a05      	ldr	r2, [sp, #20]
 8004fdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b31      	cmp	r3, #49	; 0x31
 8004fe4:	dc06      	bgt.n	8004ff4 <__ieee754_rem_pio2+0x26c>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	46d0      	mov	r8, sl
 8004fec:	46d9      	mov	r9, fp
 8004fee:	e9c4 2300 	strd	r2, r3, [r4]
 8004ff2:	e7a6      	b.n	8004f42 <__ieee754_rem_pio2+0x1ba>
 8004ff4:	a326      	add	r3, pc, #152	; (adr r3, 8005090 <__ieee754_rem_pio2+0x308>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ffe:	f7fb facf 	bl	80005a0 <__aeabi_dmul>
 8005002:	4606      	mov	r6, r0
 8005004:	460f      	mov	r7, r1
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4650      	mov	r0, sl
 800500c:	4659      	mov	r1, fp
 800500e:	f7fb f90f 	bl	8000230 <__aeabi_dsub>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4680      	mov	r8, r0
 8005018:	4689      	mov	r9, r1
 800501a:	4650      	mov	r0, sl
 800501c:	4659      	mov	r1, fp
 800501e:	f7fb f907 	bl	8000230 <__aeabi_dsub>
 8005022:	4632      	mov	r2, r6
 8005024:	463b      	mov	r3, r7
 8005026:	f7fb f903 	bl	8000230 <__aeabi_dsub>
 800502a:	a31b      	add	r3, pc, #108	; (adr r3, 8005098 <__ieee754_rem_pio2+0x310>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	4606      	mov	r6, r0
 8005032:	460f      	mov	r7, r1
 8005034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005038:	f7fb fab2 	bl	80005a0 <__aeabi_dmul>
 800503c:	4632      	mov	r2, r6
 800503e:	463b      	mov	r3, r7
 8005040:	f7fb f8f6 	bl	8000230 <__aeabi_dsub>
 8005044:	4606      	mov	r6, r0
 8005046:	460f      	mov	r7, r1
 8005048:	e75e      	b.n	8004f08 <__ieee754_rem_pio2+0x180>
 800504a:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <__ieee754_rem_pio2+0x330>)
 800504c:	4592      	cmp	sl, r2
 800504e:	dd35      	ble.n	80050bc <__ieee754_rem_pio2+0x334>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	f7fb f8ec 	bl	8000230 <__aeabi_dsub>
 8005058:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800505c:	e9c4 0100 	strd	r0, r1, [r4]
 8005060:	e6a2      	b.n	8004da8 <__ieee754_rem_pio2+0x20>
 8005062:	bf00      	nop
 8005064:	f3af 8000 	nop.w
 8005068:	54400000 	.word	0x54400000
 800506c:	3ff921fb 	.word	0x3ff921fb
 8005070:	1a626331 	.word	0x1a626331
 8005074:	3dd0b461 	.word	0x3dd0b461
 8005078:	1a600000 	.word	0x1a600000
 800507c:	3dd0b461 	.word	0x3dd0b461
 8005080:	2e037073 	.word	0x2e037073
 8005084:	3ba3198a 	.word	0x3ba3198a
 8005088:	6dc9c883 	.word	0x6dc9c883
 800508c:	3fe45f30 	.word	0x3fe45f30
 8005090:	2e000000 	.word	0x2e000000
 8005094:	3ba3198a 	.word	0x3ba3198a
 8005098:	252049c1 	.word	0x252049c1
 800509c:	397b839a 	.word	0x397b839a
 80050a0:	3fe921fb 	.word	0x3fe921fb
 80050a4:	4002d97b 	.word	0x4002d97b
 80050a8:	3ff921fb 	.word	0x3ff921fb
 80050ac:	413921fb 	.word	0x413921fb
 80050b0:	3fe00000 	.word	0x3fe00000
 80050b4:	080064f0 	.word	0x080064f0
 80050b8:	7fefffff 	.word	0x7fefffff
 80050bc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80050c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80050c4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80050c8:	460f      	mov	r7, r1
 80050ca:	4606      	mov	r6, r0
 80050cc:	f7fb fd02 	bl	8000ad4 <__aeabi_d2iz>
 80050d0:	f7fb f9fc 	bl	80004cc <__aeabi_i2d>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4630      	mov	r0, r6
 80050da:	4639      	mov	r1, r7
 80050dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050e0:	f7fb f8a6 	bl	8000230 <__aeabi_dsub>
 80050e4:	2200      	movs	r2, #0
 80050e6:	4b22      	ldr	r3, [pc, #136]	; (8005170 <__ieee754_rem_pio2+0x3e8>)
 80050e8:	f7fb fa5a 	bl	80005a0 <__aeabi_dmul>
 80050ec:	460f      	mov	r7, r1
 80050ee:	4606      	mov	r6, r0
 80050f0:	f7fb fcf0 	bl	8000ad4 <__aeabi_d2iz>
 80050f4:	f7fb f9ea 	bl	80004cc <__aeabi_i2d>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4630      	mov	r0, r6
 80050fe:	4639      	mov	r1, r7
 8005100:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005104:	f7fb f894 	bl	8000230 <__aeabi_dsub>
 8005108:	2200      	movs	r2, #0
 800510a:	4b19      	ldr	r3, [pc, #100]	; (8005170 <__ieee754_rem_pio2+0x3e8>)
 800510c:	f7fb fa48 	bl	80005a0 <__aeabi_dmul>
 8005110:	f04f 0803 	mov.w	r8, #3
 8005114:	2600      	movs	r6, #0
 8005116:	2700      	movs	r7, #0
 8005118:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800511c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005120:	4632      	mov	r2, r6
 8005122:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8005126:	463b      	mov	r3, r7
 8005128:	46c2      	mov	sl, r8
 800512a:	f108 38ff 	add.w	r8, r8, #4294967295
 800512e:	f7fb fc9f 	bl	8000a70 <__aeabi_dcmpeq>
 8005132:	2800      	cmp	r0, #0
 8005134:	d1f4      	bne.n	8005120 <__ieee754_rem_pio2+0x398>
 8005136:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <__ieee754_rem_pio2+0x3ec>)
 8005138:	462a      	mov	r2, r5
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2302      	movs	r3, #2
 800513e:	4621      	mov	r1, r4
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	a806      	add	r0, sp, #24
 8005144:	4653      	mov	r3, sl
 8005146:	f000 f817 	bl	8005178 <__kernel_rem_pio2>
 800514a:	9b04      	ldr	r3, [sp, #16]
 800514c:	4605      	mov	r5, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	f6bf ae51 	bge.w	8004df6 <__ieee754_rem_pio2+0x6e>
 8005154:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800515c:	e9c4 2300 	strd	r2, r3, [r4]
 8005160:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005164:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005168:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800516c:	e703      	b.n	8004f76 <__ieee754_rem_pio2+0x1ee>
 800516e:	bf00      	nop
 8005170:	41700000 	.word	0x41700000
 8005174:	08006570 	.word	0x08006570

08005178 <__kernel_rem_pio2>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005180:	9308      	str	r3, [sp, #32]
 8005182:	9106      	str	r1, [sp, #24]
 8005184:	4bb6      	ldr	r3, [pc, #728]	; (8005460 <__kernel_rem_pio2+0x2e8>)
 8005186:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005188:	f112 0f14 	cmn.w	r2, #20
 800518c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005190:	bfa8      	it	ge
 8005192:	1ed4      	subge	r4, r2, #3
 8005194:	9302      	str	r3, [sp, #8]
 8005196:	9b08      	ldr	r3, [sp, #32]
 8005198:	bfb8      	it	lt
 800519a:	2400      	movlt	r4, #0
 800519c:	f103 33ff 	add.w	r3, r3, #4294967295
 80051a0:	9307      	str	r3, [sp, #28]
 80051a2:	bfa4      	itt	ge
 80051a4:	2318      	movge	r3, #24
 80051a6:	fb94 f4f3 	sdivge	r4, r4, r3
 80051aa:	f06f 0317 	mvn.w	r3, #23
 80051ae:	fb04 3303 	mla	r3, r4, r3, r3
 80051b2:	eb03 0b02 	add.w	fp, r3, r2
 80051b6:	9a07      	ldr	r2, [sp, #28]
 80051b8:	9b02      	ldr	r3, [sp, #8]
 80051ba:	1aa7      	subs	r7, r4, r2
 80051bc:	eb03 0802 	add.w	r8, r3, r2
 80051c0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80051c2:	2500      	movs	r5, #0
 80051c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80051c8:	2200      	movs	r2, #0
 80051ca:	2300      	movs	r3, #0
 80051cc:	9009      	str	r0, [sp, #36]	; 0x24
 80051ce:	ae20      	add	r6, sp, #128	; 0x80
 80051d0:	4545      	cmp	r5, r8
 80051d2:	dd14      	ble.n	80051fe <__kernel_rem_pio2+0x86>
 80051d4:	f04f 0800 	mov.w	r8, #0
 80051d8:	9a08      	ldr	r2, [sp, #32]
 80051da:	ab20      	add	r3, sp, #128	; 0x80
 80051dc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80051e0:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80051e4:	9b02      	ldr	r3, [sp, #8]
 80051e6:	4598      	cmp	r8, r3
 80051e8:	dc35      	bgt.n	8005256 <__kernel_rem_pio2+0xde>
 80051ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ec:	2200      	movs	r2, #0
 80051ee:	f1a3 0908 	sub.w	r9, r3, #8
 80051f2:	2300      	movs	r3, #0
 80051f4:	462f      	mov	r7, r5
 80051f6:	2600      	movs	r6, #0
 80051f8:	e9cd 2300 	strd	r2, r3, [sp]
 80051fc:	e01f      	b.n	800523e <__kernel_rem_pio2+0xc6>
 80051fe:	42ef      	cmn	r7, r5
 8005200:	d40b      	bmi.n	800521a <__kernel_rem_pio2+0xa2>
 8005202:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005206:	e9cd 2300 	strd	r2, r3, [sp]
 800520a:	f7fb f95f 	bl	80004cc <__aeabi_i2d>
 800520e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005212:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005216:	3501      	adds	r5, #1
 8005218:	e7da      	b.n	80051d0 <__kernel_rem_pio2+0x58>
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	e7f8      	b.n	8005212 <__kernel_rem_pio2+0x9a>
 8005220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005224:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005228:	f7fb f9ba 	bl	80005a0 <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005234:	f7fa fffe 	bl	8000234 <__adddf3>
 8005238:	e9cd 0100 	strd	r0, r1, [sp]
 800523c:	3601      	adds	r6, #1
 800523e:	9b07      	ldr	r3, [sp, #28]
 8005240:	3f08      	subs	r7, #8
 8005242:	429e      	cmp	r6, r3
 8005244:	ddec      	ble.n	8005220 <__kernel_rem_pio2+0xa8>
 8005246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800524a:	f108 0801 	add.w	r8, r8, #1
 800524e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8005252:	3508      	adds	r5, #8
 8005254:	e7c6      	b.n	80051e4 <__kernel_rem_pio2+0x6c>
 8005256:	9b02      	ldr	r3, [sp, #8]
 8005258:	aa0c      	add	r2, sp, #48	; 0x30
 800525a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800525e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005260:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005262:	9e02      	ldr	r6, [sp, #8]
 8005264:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005268:	930a      	str	r3, [sp, #40]	; 0x28
 800526a:	ab98      	add	r3, sp, #608	; 0x260
 800526c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005270:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005274:	ab70      	add	r3, sp, #448	; 0x1c0
 8005276:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800527a:	46d0      	mov	r8, sl
 800527c:	46b1      	mov	r9, r6
 800527e:	af0c      	add	r7, sp, #48	; 0x30
 8005280:	9700      	str	r7, [sp, #0]
 8005282:	f1b9 0f00 	cmp.w	r9, #0
 8005286:	f1a8 0808 	sub.w	r8, r8, #8
 800528a:	dc71      	bgt.n	8005370 <__kernel_rem_pio2+0x1f8>
 800528c:	465a      	mov	r2, fp
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	f000 fd35 	bl	8005d00 <scalbn>
 8005296:	2200      	movs	r2, #0
 8005298:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800529c:	4604      	mov	r4, r0
 800529e:	460d      	mov	r5, r1
 80052a0:	f7fb f97e 	bl	80005a0 <__aeabi_dmul>
 80052a4:	f000 fcac 	bl	8005c00 <floor>
 80052a8:	2200      	movs	r2, #0
 80052aa:	4b6e      	ldr	r3, [pc, #440]	; (8005464 <__kernel_rem_pio2+0x2ec>)
 80052ac:	f7fb f978 	bl	80005a0 <__aeabi_dmul>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4620      	mov	r0, r4
 80052b6:	4629      	mov	r1, r5
 80052b8:	f7fa ffba 	bl	8000230 <__aeabi_dsub>
 80052bc:	460d      	mov	r5, r1
 80052be:	4604      	mov	r4, r0
 80052c0:	f7fb fc08 	bl	8000ad4 <__aeabi_d2iz>
 80052c4:	9004      	str	r0, [sp, #16]
 80052c6:	f7fb f901 	bl	80004cc <__aeabi_i2d>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fa ffad 	bl	8000230 <__aeabi_dsub>
 80052d6:	f1bb 0f00 	cmp.w	fp, #0
 80052da:	4680      	mov	r8, r0
 80052dc:	4689      	mov	r9, r1
 80052de:	dd70      	ble.n	80053c2 <__kernel_rem_pio2+0x24a>
 80052e0:	1e72      	subs	r2, r6, #1
 80052e2:	ab0c      	add	r3, sp, #48	; 0x30
 80052e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052e8:	9c04      	ldr	r4, [sp, #16]
 80052ea:	f1cb 0118 	rsb	r1, fp, #24
 80052ee:	fa40 f301 	asr.w	r3, r0, r1
 80052f2:	441c      	add	r4, r3
 80052f4:	408b      	lsls	r3, r1
 80052f6:	1ac0      	subs	r0, r0, r3
 80052f8:	ab0c      	add	r3, sp, #48	; 0x30
 80052fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80052fe:	f1cb 0317 	rsb	r3, fp, #23
 8005302:	9404      	str	r4, [sp, #16]
 8005304:	fa40 f303 	asr.w	r3, r0, r3
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	9b00      	ldr	r3, [sp, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	dd66      	ble.n	80053de <__kernel_rem_pio2+0x266>
 8005310:	2200      	movs	r2, #0
 8005312:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005316:	4614      	mov	r4, r2
 8005318:	9b04      	ldr	r3, [sp, #16]
 800531a:	3301      	adds	r3, #1
 800531c:	9304      	str	r3, [sp, #16]
 800531e:	4296      	cmp	r6, r2
 8005320:	f300 80ac 	bgt.w	800547c <__kernel_rem_pio2+0x304>
 8005324:	f1bb 0f00 	cmp.w	fp, #0
 8005328:	dd07      	ble.n	800533a <__kernel_rem_pio2+0x1c2>
 800532a:	f1bb 0f01 	cmp.w	fp, #1
 800532e:	f000 80b4 	beq.w	800549a <__kernel_rem_pio2+0x322>
 8005332:	f1bb 0f02 	cmp.w	fp, #2
 8005336:	f000 80ba 	beq.w	80054ae <__kernel_rem_pio2+0x336>
 800533a:	9b00      	ldr	r3, [sp, #0]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d14e      	bne.n	80053de <__kernel_rem_pio2+0x266>
 8005340:	4642      	mov	r2, r8
 8005342:	464b      	mov	r3, r9
 8005344:	2000      	movs	r0, #0
 8005346:	4948      	ldr	r1, [pc, #288]	; (8005468 <__kernel_rem_pio2+0x2f0>)
 8005348:	f7fa ff72 	bl	8000230 <__aeabi_dsub>
 800534c:	4680      	mov	r8, r0
 800534e:	4689      	mov	r9, r1
 8005350:	2c00      	cmp	r4, #0
 8005352:	d044      	beq.n	80053de <__kernel_rem_pio2+0x266>
 8005354:	465a      	mov	r2, fp
 8005356:	2000      	movs	r0, #0
 8005358:	4943      	ldr	r1, [pc, #268]	; (8005468 <__kernel_rem_pio2+0x2f0>)
 800535a:	f000 fcd1 	bl	8005d00 <scalbn>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4640      	mov	r0, r8
 8005364:	4649      	mov	r1, r9
 8005366:	f7fa ff63 	bl	8000230 <__aeabi_dsub>
 800536a:	4680      	mov	r8, r0
 800536c:	4689      	mov	r9, r1
 800536e:	e036      	b.n	80053de <__kernel_rem_pio2+0x266>
 8005370:	2200      	movs	r2, #0
 8005372:	4b3e      	ldr	r3, [pc, #248]	; (800546c <__kernel_rem_pio2+0x2f4>)
 8005374:	4620      	mov	r0, r4
 8005376:	4629      	mov	r1, r5
 8005378:	f7fb f912 	bl	80005a0 <__aeabi_dmul>
 800537c:	f7fb fbaa 	bl	8000ad4 <__aeabi_d2iz>
 8005380:	f7fb f8a4 	bl	80004cc <__aeabi_i2d>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800538c:	2200      	movs	r2, #0
 800538e:	4b38      	ldr	r3, [pc, #224]	; (8005470 <__kernel_rem_pio2+0x2f8>)
 8005390:	f7fb f906 	bl	80005a0 <__aeabi_dmul>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4620      	mov	r0, r4
 800539a:	4629      	mov	r1, r5
 800539c:	f7fa ff48 	bl	8000230 <__aeabi_dsub>
 80053a0:	f7fb fb98 	bl	8000ad4 <__aeabi_d2iz>
 80053a4:	9b00      	ldr	r3, [sp, #0]
 80053a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80053aa:	f843 0b04 	str.w	r0, [r3], #4
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80053b8:	f7fa ff3c 	bl	8000234 <__adddf3>
 80053bc:	4604      	mov	r4, r0
 80053be:	460d      	mov	r5, r1
 80053c0:	e75f      	b.n	8005282 <__kernel_rem_pio2+0x10a>
 80053c2:	d105      	bne.n	80053d0 <__kernel_rem_pio2+0x258>
 80053c4:	1e73      	subs	r3, r6, #1
 80053c6:	aa0c      	add	r2, sp, #48	; 0x30
 80053c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80053cc:	15c3      	asrs	r3, r0, #23
 80053ce:	e79b      	b.n	8005308 <__kernel_rem_pio2+0x190>
 80053d0:	2200      	movs	r2, #0
 80053d2:	4b28      	ldr	r3, [pc, #160]	; (8005474 <__kernel_rem_pio2+0x2fc>)
 80053d4:	f7fb fb6a 	bl	8000aac <__aeabi_dcmpge>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d13e      	bne.n	800545a <__kernel_rem_pio2+0x2e2>
 80053dc:	9000      	str	r0, [sp, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	2300      	movs	r3, #0
 80053e2:	4640      	mov	r0, r8
 80053e4:	4649      	mov	r1, r9
 80053e6:	f7fb fb43 	bl	8000a70 <__aeabi_dcmpeq>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	f000 80b1 	beq.w	8005552 <__kernel_rem_pio2+0x3da>
 80053f0:	1e74      	subs	r4, r6, #1
 80053f2:	4623      	mov	r3, r4
 80053f4:	2200      	movs	r2, #0
 80053f6:	9902      	ldr	r1, [sp, #8]
 80053f8:	428b      	cmp	r3, r1
 80053fa:	da5f      	bge.n	80054bc <__kernel_rem_pio2+0x344>
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	d074      	beq.n	80054ea <__kernel_rem_pio2+0x372>
 8005400:	ab0c      	add	r3, sp, #48	; 0x30
 8005402:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005406:	f1ab 0b18 	sub.w	fp, fp, #24
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 809f 	beq.w	800554e <__kernel_rem_pio2+0x3d6>
 8005410:	465a      	mov	r2, fp
 8005412:	2000      	movs	r0, #0
 8005414:	4914      	ldr	r1, [pc, #80]	; (8005468 <__kernel_rem_pio2+0x2f0>)
 8005416:	f000 fc73 	bl	8005d00 <scalbn>
 800541a:	46a2      	mov	sl, r4
 800541c:	4606      	mov	r6, r0
 800541e:	460f      	mov	r7, r1
 8005420:	f04f 0800 	mov.w	r8, #0
 8005424:	ab70      	add	r3, sp, #448	; 0x1c0
 8005426:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800546c <__kernel_rem_pio2+0x2f4>
 800542a:	00e5      	lsls	r5, r4, #3
 800542c:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8005430:	f1ba 0f00 	cmp.w	sl, #0
 8005434:	f280 80c3 	bge.w	80055be <__kernel_rem_pio2+0x446>
 8005438:	4626      	mov	r6, r4
 800543a:	2e00      	cmp	r6, #0
 800543c:	f2c0 80f5 	blt.w	800562a <__kernel_rem_pio2+0x4b2>
 8005440:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <__kernel_rem_pio2+0x300>)
 8005442:	f04f 0a00 	mov.w	sl, #0
 8005446:	9307      	str	r3, [sp, #28]
 8005448:	ab70      	add	r3, sp, #448	; 0x1c0
 800544a:	f04f 0b00 	mov.w	fp, #0
 800544e:	f04f 0800 	mov.w	r8, #0
 8005452:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005456:	1ba7      	subs	r7, r4, r6
 8005458:	e0db      	b.n	8005612 <__kernel_rem_pio2+0x49a>
 800545a:	2302      	movs	r3, #2
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	e757      	b.n	8005310 <__kernel_rem_pio2+0x198>
 8005460:	080066b8 	.word	0x080066b8
 8005464:	40200000 	.word	0x40200000
 8005468:	3ff00000 	.word	0x3ff00000
 800546c:	3e700000 	.word	0x3e700000
 8005470:	41700000 	.word	0x41700000
 8005474:	3fe00000 	.word	0x3fe00000
 8005478:	08006678 	.word	0x08006678
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	b944      	cbnz	r4, 8005492 <__kernel_rem_pio2+0x31a>
 8005480:	b11b      	cbz	r3, 800548a <__kernel_rem_pio2+0x312>
 8005482:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	2301      	movs	r3, #1
 800548a:	461c      	mov	r4, r3
 800548c:	3201      	adds	r2, #1
 800548e:	3704      	adds	r7, #4
 8005490:	e745      	b.n	800531e <__kernel_rem_pio2+0x1a6>
 8005492:	1acb      	subs	r3, r1, r3
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	4623      	mov	r3, r4
 8005498:	e7f7      	b.n	800548a <__kernel_rem_pio2+0x312>
 800549a:	1e72      	subs	r2, r6, #1
 800549c:	ab0c      	add	r3, sp, #48	; 0x30
 800549e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80054a6:	a90c      	add	r1, sp, #48	; 0x30
 80054a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80054ac:	e745      	b.n	800533a <__kernel_rem_pio2+0x1c2>
 80054ae:	1e72      	subs	r2, r6, #1
 80054b0:	ab0c      	add	r3, sp, #48	; 0x30
 80054b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80054ba:	e7f4      	b.n	80054a6 <__kernel_rem_pio2+0x32e>
 80054bc:	a90c      	add	r1, sp, #48	; 0x30
 80054be:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	430a      	orrs	r2, r1
 80054c6:	e796      	b.n	80053f6 <__kernel_rem_pio2+0x27e>
 80054c8:	3401      	adds	r4, #1
 80054ca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d0fa      	beq.n	80054c8 <__kernel_rem_pio2+0x350>
 80054d2:	9b08      	ldr	r3, [sp, #32]
 80054d4:	f106 0801 	add.w	r8, r6, #1
 80054d8:	18f5      	adds	r5, r6, r3
 80054da:	ab20      	add	r3, sp, #128	; 0x80
 80054dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80054e0:	4434      	add	r4, r6
 80054e2:	4544      	cmp	r4, r8
 80054e4:	da04      	bge.n	80054f0 <__kernel_rem_pio2+0x378>
 80054e6:	4626      	mov	r6, r4
 80054e8:	e6bf      	b.n	800526a <__kernel_rem_pio2+0xf2>
 80054ea:	2401      	movs	r4, #1
 80054ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ee:	e7ec      	b.n	80054ca <__kernel_rem_pio2+0x352>
 80054f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f2:	f04f 0900 	mov.w	r9, #0
 80054f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80054fa:	f7fa ffe7 	bl	80004cc <__aeabi_i2d>
 80054fe:	2600      	movs	r6, #0
 8005500:	2700      	movs	r7, #0
 8005502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005504:	e9c5 0100 	strd	r0, r1, [r5]
 8005508:	3b08      	subs	r3, #8
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	9504      	str	r5, [sp, #16]
 800550e:	9b07      	ldr	r3, [sp, #28]
 8005510:	4599      	cmp	r9, r3
 8005512:	dd05      	ble.n	8005520 <__kernel_rem_pio2+0x3a8>
 8005514:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8005518:	f108 0801 	add.w	r8, r8, #1
 800551c:	3508      	adds	r5, #8
 800551e:	e7e0      	b.n	80054e2 <__kernel_rem_pio2+0x36a>
 8005520:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005524:	9900      	ldr	r1, [sp, #0]
 8005526:	f109 0901 	add.w	r9, r9, #1
 800552a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800552e:	9100      	str	r1, [sp, #0]
 8005530:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8005534:	f8cd c010 	str.w	ip, [sp, #16]
 8005538:	f7fb f832 	bl	80005a0 <__aeabi_dmul>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4630      	mov	r0, r6
 8005542:	4639      	mov	r1, r7
 8005544:	f7fa fe76 	bl	8000234 <__adddf3>
 8005548:	4606      	mov	r6, r0
 800554a:	460f      	mov	r7, r1
 800554c:	e7df      	b.n	800550e <__kernel_rem_pio2+0x396>
 800554e:	3c01      	subs	r4, #1
 8005550:	e756      	b.n	8005400 <__kernel_rem_pio2+0x288>
 8005552:	f1cb 0200 	rsb	r2, fp, #0
 8005556:	4640      	mov	r0, r8
 8005558:	4649      	mov	r1, r9
 800555a:	f000 fbd1 	bl	8005d00 <scalbn>
 800555e:	2200      	movs	r2, #0
 8005560:	4ba4      	ldr	r3, [pc, #656]	; (80057f4 <__kernel_rem_pio2+0x67c>)
 8005562:	4604      	mov	r4, r0
 8005564:	460d      	mov	r5, r1
 8005566:	f7fb faa1 	bl	8000aac <__aeabi_dcmpge>
 800556a:	b1f8      	cbz	r0, 80055ac <__kernel_rem_pio2+0x434>
 800556c:	2200      	movs	r2, #0
 800556e:	4ba2      	ldr	r3, [pc, #648]	; (80057f8 <__kernel_rem_pio2+0x680>)
 8005570:	4620      	mov	r0, r4
 8005572:	4629      	mov	r1, r5
 8005574:	f7fb f814 	bl	80005a0 <__aeabi_dmul>
 8005578:	f7fb faac 	bl	8000ad4 <__aeabi_d2iz>
 800557c:	4607      	mov	r7, r0
 800557e:	f7fa ffa5 	bl	80004cc <__aeabi_i2d>
 8005582:	2200      	movs	r2, #0
 8005584:	4b9b      	ldr	r3, [pc, #620]	; (80057f4 <__kernel_rem_pio2+0x67c>)
 8005586:	f7fb f80b 	bl	80005a0 <__aeabi_dmul>
 800558a:	460b      	mov	r3, r1
 800558c:	4602      	mov	r2, r0
 800558e:	4629      	mov	r1, r5
 8005590:	4620      	mov	r0, r4
 8005592:	f7fa fe4d 	bl	8000230 <__aeabi_dsub>
 8005596:	f7fb fa9d 	bl	8000ad4 <__aeabi_d2iz>
 800559a:	1c74      	adds	r4, r6, #1
 800559c:	ab0c      	add	r3, sp, #48	; 0x30
 800559e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80055a2:	f10b 0b18 	add.w	fp, fp, #24
 80055a6:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80055aa:	e731      	b.n	8005410 <__kernel_rem_pio2+0x298>
 80055ac:	4620      	mov	r0, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	f7fb fa90 	bl	8000ad4 <__aeabi_d2iz>
 80055b4:	ab0c      	add	r3, sp, #48	; 0x30
 80055b6:	4634      	mov	r4, r6
 80055b8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80055bc:	e728      	b.n	8005410 <__kernel_rem_pio2+0x298>
 80055be:	ab0c      	add	r3, sp, #48	; 0x30
 80055c0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80055c4:	f7fa ff82 	bl	80004cc <__aeabi_i2d>
 80055c8:	4632      	mov	r2, r6
 80055ca:	463b      	mov	r3, r7
 80055cc:	f7fa ffe8 	bl	80005a0 <__aeabi_dmul>
 80055d0:	4642      	mov	r2, r8
 80055d2:	e86b 0102 	strd	r0, r1, [fp], #-8
 80055d6:	464b      	mov	r3, r9
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fa ffe0 	bl	80005a0 <__aeabi_dmul>
 80055e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055e4:	4606      	mov	r6, r0
 80055e6:	460f      	mov	r7, r1
 80055e8:	e722      	b.n	8005430 <__kernel_rem_pio2+0x2b8>
 80055ea:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80055ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80055f2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80055f6:	f8cd c01c 	str.w	ip, [sp, #28]
 80055fa:	f7fa ffd1 	bl	80005a0 <__aeabi_dmul>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4650      	mov	r0, sl
 8005604:	4659      	mov	r1, fp
 8005606:	f7fa fe15 	bl	8000234 <__adddf3>
 800560a:	4682      	mov	sl, r0
 800560c:	468b      	mov	fp, r1
 800560e:	f108 0801 	add.w	r8, r8, #1
 8005612:	9b02      	ldr	r3, [sp, #8]
 8005614:	4598      	cmp	r8, r3
 8005616:	dc01      	bgt.n	800561c <__kernel_rem_pio2+0x4a4>
 8005618:	45b8      	cmp	r8, r7
 800561a:	dde6      	ble.n	80055ea <__kernel_rem_pio2+0x472>
 800561c:	ab48      	add	r3, sp, #288	; 0x120
 800561e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005622:	e9c7 ab00 	strd	sl, fp, [r7]
 8005626:	3e01      	subs	r6, #1
 8005628:	e707      	b.n	800543a <__kernel_rem_pio2+0x2c2>
 800562a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800562c:	2b02      	cmp	r3, #2
 800562e:	dc09      	bgt.n	8005644 <__kernel_rem_pio2+0x4cc>
 8005630:	2b00      	cmp	r3, #0
 8005632:	dc32      	bgt.n	800569a <__kernel_rem_pio2+0x522>
 8005634:	d05a      	beq.n	80056ec <__kernel_rem_pio2+0x574>
 8005636:	9b04      	ldr	r3, [sp, #16]
 8005638:	f003 0007 	and.w	r0, r3, #7
 800563c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005644:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005646:	2b03      	cmp	r3, #3
 8005648:	d1f5      	bne.n	8005636 <__kernel_rem_pio2+0x4be>
 800564a:	ab48      	add	r3, sp, #288	; 0x120
 800564c:	441d      	add	r5, r3
 800564e:	46aa      	mov	sl, r5
 8005650:	46a3      	mov	fp, r4
 8005652:	f1bb 0f00 	cmp.w	fp, #0
 8005656:	dc76      	bgt.n	8005746 <__kernel_rem_pio2+0x5ce>
 8005658:	46aa      	mov	sl, r5
 800565a:	46a3      	mov	fp, r4
 800565c:	f1bb 0f01 	cmp.w	fp, #1
 8005660:	f300 8090 	bgt.w	8005784 <__kernel_rem_pio2+0x60c>
 8005664:	2700      	movs	r7, #0
 8005666:	463e      	mov	r6, r7
 8005668:	2c01      	cmp	r4, #1
 800566a:	f300 80aa 	bgt.w	80057c2 <__kernel_rem_pio2+0x64a>
 800566e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8005672:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8005676:	9b00      	ldr	r3, [sp, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 80ac 	bne.w	80057d6 <__kernel_rem_pio2+0x65e>
 800567e:	4603      	mov	r3, r0
 8005680:	462a      	mov	r2, r5
 8005682:	9806      	ldr	r0, [sp, #24]
 8005684:	e9c0 2300 	strd	r2, r3, [r0]
 8005688:	4622      	mov	r2, r4
 800568a:	460b      	mov	r3, r1
 800568c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005690:	463a      	mov	r2, r7
 8005692:	4633      	mov	r3, r6
 8005694:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005698:	e7cd      	b.n	8005636 <__kernel_rem_pio2+0x4be>
 800569a:	2000      	movs	r0, #0
 800569c:	46a0      	mov	r8, r4
 800569e:	4601      	mov	r1, r0
 80056a0:	ab48      	add	r3, sp, #288	; 0x120
 80056a2:	441d      	add	r5, r3
 80056a4:	f1b8 0f00 	cmp.w	r8, #0
 80056a8:	da3a      	bge.n	8005720 <__kernel_rem_pio2+0x5a8>
 80056aa:	9b00      	ldr	r3, [sp, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d03e      	beq.n	800572e <__kernel_rem_pio2+0x5b6>
 80056b0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80056b4:	4602      	mov	r2, r0
 80056b6:	462b      	mov	r3, r5
 80056b8:	9d06      	ldr	r5, [sp, #24]
 80056ba:	2601      	movs	r6, #1
 80056bc:	e9c5 2300 	strd	r2, r3, [r5]
 80056c0:	460b      	mov	r3, r1
 80056c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80056c6:	f7fa fdb3 	bl	8000230 <__aeabi_dsub>
 80056ca:	4684      	mov	ip, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	ad48      	add	r5, sp, #288	; 0x120
 80056d0:	42b4      	cmp	r4, r6
 80056d2:	f105 0508 	add.w	r5, r5, #8
 80056d6:	da2c      	bge.n	8005732 <__kernel_rem_pio2+0x5ba>
 80056d8:	9b00      	ldr	r3, [sp, #0]
 80056da:	b10b      	cbz	r3, 80056e0 <__kernel_rem_pio2+0x568>
 80056dc:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80056e0:	4662      	mov	r2, ip
 80056e2:	463b      	mov	r3, r7
 80056e4:	9906      	ldr	r1, [sp, #24]
 80056e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80056ea:	e7a4      	b.n	8005636 <__kernel_rem_pio2+0x4be>
 80056ec:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80056ee:	ab48      	add	r3, sp, #288	; 0x120
 80056f0:	4637      	mov	r7, r6
 80056f2:	441d      	add	r5, r3
 80056f4:	2c00      	cmp	r4, #0
 80056f6:	da09      	bge.n	800570c <__kernel_rem_pio2+0x594>
 80056f8:	9b00      	ldr	r3, [sp, #0]
 80056fa:	b10b      	cbz	r3, 8005700 <__kernel_rem_pio2+0x588>
 80056fc:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005700:	4632      	mov	r2, r6
 8005702:	463b      	mov	r3, r7
 8005704:	9906      	ldr	r1, [sp, #24]
 8005706:	e9c1 2300 	strd	r2, r3, [r1]
 800570a:	e794      	b.n	8005636 <__kernel_rem_pio2+0x4be>
 800570c:	4630      	mov	r0, r6
 800570e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005712:	4639      	mov	r1, r7
 8005714:	f7fa fd8e 	bl	8000234 <__adddf3>
 8005718:	3c01      	subs	r4, #1
 800571a:	4606      	mov	r6, r0
 800571c:	460f      	mov	r7, r1
 800571e:	e7e9      	b.n	80056f4 <__kernel_rem_pio2+0x57c>
 8005720:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005724:	f7fa fd86 	bl	8000234 <__adddf3>
 8005728:	f108 38ff 	add.w	r8, r8, #4294967295
 800572c:	e7ba      	b.n	80056a4 <__kernel_rem_pio2+0x52c>
 800572e:	460d      	mov	r5, r1
 8005730:	e7c0      	b.n	80056b4 <__kernel_rem_pio2+0x53c>
 8005732:	4660      	mov	r0, ip
 8005734:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005738:	4639      	mov	r1, r7
 800573a:	f7fa fd7b 	bl	8000234 <__adddf3>
 800573e:	3601      	adds	r6, #1
 8005740:	4684      	mov	ip, r0
 8005742:	460f      	mov	r7, r1
 8005744:	e7c4      	b.n	80056d0 <__kernel_rem_pio2+0x558>
 8005746:	e9da 6700 	ldrd	r6, r7, [sl]
 800574a:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800574e:	4632      	mov	r2, r6
 8005750:	463b      	mov	r3, r7
 8005752:	4640      	mov	r0, r8
 8005754:	4649      	mov	r1, r9
 8005756:	f7fa fd6d 	bl	8000234 <__adddf3>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005762:	4640      	mov	r0, r8
 8005764:	4649      	mov	r1, r9
 8005766:	f7fa fd63 	bl	8000230 <__aeabi_dsub>
 800576a:	4632      	mov	r2, r6
 800576c:	463b      	mov	r3, r7
 800576e:	f7fa fd61 	bl	8000234 <__adddf3>
 8005772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005776:	e86a 0102 	strd	r0, r1, [sl], #-8
 800577a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800577e:	e9ca 2300 	strd	r2, r3, [sl]
 8005782:	e766      	b.n	8005652 <__kernel_rem_pio2+0x4da>
 8005784:	e9da 8900 	ldrd	r8, r9, [sl]
 8005788:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fa fd4e 	bl	8000234 <__adddf3>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a0:	4630      	mov	r0, r6
 80057a2:	4639      	mov	r1, r7
 80057a4:	f7fa fd44 	bl	8000230 <__aeabi_dsub>
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	f7fa fd42 	bl	8000234 <__adddf3>
 80057b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057b4:	e86a 0102 	strd	r0, r1, [sl], #-8
 80057b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057bc:	e9ca 2300 	strd	r2, r3, [sl]
 80057c0:	e74c      	b.n	800565c <__kernel_rem_pio2+0x4e4>
 80057c2:	4638      	mov	r0, r7
 80057c4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80057c8:	4631      	mov	r1, r6
 80057ca:	f7fa fd33 	bl	8000234 <__adddf3>
 80057ce:	3c01      	subs	r4, #1
 80057d0:	4607      	mov	r7, r0
 80057d2:	460e      	mov	r6, r1
 80057d4:	e748      	b.n	8005668 <__kernel_rem_pio2+0x4f0>
 80057d6:	9b06      	ldr	r3, [sp, #24]
 80057d8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80057dc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80057e0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80057e4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80057e8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80057ec:	601d      	str	r5, [r3, #0]
 80057ee:	615e      	str	r6, [r3, #20]
 80057f0:	e721      	b.n	8005636 <__kernel_rem_pio2+0x4be>
 80057f2:	bf00      	nop
 80057f4:	41700000 	.word	0x41700000
 80057f8:	3e700000 	.word	0x3e700000
 80057fc:	00000000 	.word	0x00000000

08005800 <__kernel_tan>:
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	b08b      	sub	sp, #44	; 0x2c
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4bd9      	ldr	r3, [pc, #868]	; (8005b70 <__kernel_tan+0x370>)
 800580a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800580e:	429e      	cmp	r6, r3
 8005810:	4604      	mov	r4, r0
 8005812:	460d      	mov	r5, r1
 8005814:	4682      	mov	sl, r0
 8005816:	468b      	mov	fp, r1
 8005818:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800581a:	9202      	str	r2, [sp, #8]
 800581c:	9107      	str	r1, [sp, #28]
 800581e:	dc58      	bgt.n	80058d2 <__kernel_tan+0xd2>
 8005820:	f7fb f958 	bl	8000ad4 <__aeabi_d2iz>
 8005824:	4605      	mov	r5, r0
 8005826:	2800      	cmp	r0, #0
 8005828:	d178      	bne.n	800591c <__kernel_tan+0x11c>
 800582a:	1c7b      	adds	r3, r7, #1
 800582c:	4323      	orrs	r3, r4
 800582e:	4333      	orrs	r3, r6
 8005830:	d110      	bne.n	8005854 <__kernel_tan+0x54>
 8005832:	4620      	mov	r0, r4
 8005834:	4659      	mov	r1, fp
 8005836:	f000 f9df 	bl	8005bf8 <fabs>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	2000      	movs	r0, #0
 8005840:	49cc      	ldr	r1, [pc, #816]	; (8005b74 <__kernel_tan+0x374>)
 8005842:	f7fa ffd7 	bl	80007f4 <__aeabi_ddiv>
 8005846:	4682      	mov	sl, r0
 8005848:	468b      	mov	fp, r1
 800584a:	4650      	mov	r0, sl
 800584c:	4659      	mov	r1, fp
 800584e:	b00b      	add	sp, #44	; 0x2c
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	2f01      	cmp	r7, #1
 8005856:	d0f8      	beq.n	800584a <__kernel_tan+0x4a>
 8005858:	4620      	mov	r0, r4
 800585a:	4659      	mov	r1, fp
 800585c:	9a02      	ldr	r2, [sp, #8]
 800585e:	9b00      	ldr	r3, [sp, #0]
 8005860:	f7fa fce8 	bl	8000234 <__adddf3>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	460f      	mov	r7, r1
 800586a:	2000      	movs	r0, #0
 800586c:	49c2      	ldr	r1, [pc, #776]	; (8005b78 <__kernel_tan+0x378>)
 800586e:	f7fa ffc1 	bl	80007f4 <__aeabi_ddiv>
 8005872:	462e      	mov	r6, r5
 8005874:	4689      	mov	r9, r1
 8005876:	4652      	mov	r2, sl
 8005878:	465b      	mov	r3, fp
 800587a:	4680      	mov	r8, r0
 800587c:	462c      	mov	r4, r5
 800587e:	4630      	mov	r0, r6
 8005880:	460d      	mov	r5, r1
 8005882:	4639      	mov	r1, r7
 8005884:	f7fa fcd4 	bl	8000230 <__aeabi_dsub>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	9802      	ldr	r0, [sp, #8]
 800588e:	9900      	ldr	r1, [sp, #0]
 8005890:	f7fa fcce 	bl	8000230 <__aeabi_dsub>
 8005894:	4632      	mov	r2, r6
 8005896:	464b      	mov	r3, r9
 8005898:	f7fa fe82 	bl	80005a0 <__aeabi_dmul>
 800589c:	4632      	mov	r2, r6
 800589e:	4682      	mov	sl, r0
 80058a0:	468b      	mov	fp, r1
 80058a2:	464b      	mov	r3, r9
 80058a4:	4630      	mov	r0, r6
 80058a6:	4639      	mov	r1, r7
 80058a8:	f7fa fe7a 	bl	80005a0 <__aeabi_dmul>
 80058ac:	2200      	movs	r2, #0
 80058ae:	4bb1      	ldr	r3, [pc, #708]	; (8005b74 <__kernel_tan+0x374>)
 80058b0:	f7fa fcc0 	bl	8000234 <__adddf3>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4650      	mov	r0, sl
 80058ba:	4659      	mov	r1, fp
 80058bc:	f7fa fcba 	bl	8000234 <__adddf3>
 80058c0:	4642      	mov	r2, r8
 80058c2:	464b      	mov	r3, r9
 80058c4:	f7fa fe6c 	bl	80005a0 <__aeabi_dmul>
 80058c8:	4622      	mov	r2, r4
 80058ca:	462b      	mov	r3, r5
 80058cc:	f7fa fcb2 	bl	8000234 <__adddf3>
 80058d0:	e7b9      	b.n	8005846 <__kernel_tan+0x46>
 80058d2:	4baa      	ldr	r3, [pc, #680]	; (8005b7c <__kernel_tan+0x37c>)
 80058d4:	429e      	cmp	r6, r3
 80058d6:	dd21      	ble.n	800591c <__kernel_tan+0x11c>
 80058d8:	2900      	cmp	r1, #0
 80058da:	da06      	bge.n	80058ea <__kernel_tan+0xea>
 80058dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80058e0:	469b      	mov	fp, r3
 80058e2:	9b00      	ldr	r3, [sp, #0]
 80058e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	4652      	mov	r2, sl
 80058ec:	a182      	add	r1, pc, #520	; (adr r1, 8005af8 <__kernel_tan+0x2f8>)
 80058ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f2:	465b      	mov	r3, fp
 80058f4:	f7fa fc9c 	bl	8000230 <__aeabi_dsub>
 80058f8:	4604      	mov	r4, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	a180      	add	r1, pc, #512	; (adr r1, 8005b00 <__kernel_tan+0x300>)
 80058fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005902:	9a02      	ldr	r2, [sp, #8]
 8005904:	9b00      	ldr	r3, [sp, #0]
 8005906:	f7fa fc93 	bl	8000230 <__aeabi_dsub>
 800590a:	462b      	mov	r3, r5
 800590c:	4622      	mov	r2, r4
 800590e:	f7fa fc91 	bl	8000234 <__adddf3>
 8005912:	2300      	movs	r3, #0
 8005914:	4682      	mov	sl, r0
 8005916:	468b      	mov	fp, r1
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4652      	mov	r2, sl
 800591e:	465b      	mov	r3, fp
 8005920:	4650      	mov	r0, sl
 8005922:	4659      	mov	r1, fp
 8005924:	f7fa fe3c 	bl	80005a0 <__aeabi_dmul>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4680      	mov	r8, r0
 800592e:	4689      	mov	r9, r1
 8005930:	f7fa fe36 	bl	80005a0 <__aeabi_dmul>
 8005934:	4642      	mov	r2, r8
 8005936:	4604      	mov	r4, r0
 8005938:	460d      	mov	r5, r1
 800593a:	464b      	mov	r3, r9
 800593c:	4650      	mov	r0, sl
 800593e:	4659      	mov	r1, fp
 8005940:	f7fa fe2e 	bl	80005a0 <__aeabi_dmul>
 8005944:	a370      	add	r3, pc, #448	; (adr r3, 8005b08 <__kernel_tan+0x308>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800594e:	4620      	mov	r0, r4
 8005950:	4629      	mov	r1, r5
 8005952:	f7fa fe25 	bl	80005a0 <__aeabi_dmul>
 8005956:	a36e      	add	r3, pc, #440	; (adr r3, 8005b10 <__kernel_tan+0x310>)
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f7fa fc6a 	bl	8000234 <__adddf3>
 8005960:	4622      	mov	r2, r4
 8005962:	462b      	mov	r3, r5
 8005964:	f7fa fe1c 	bl	80005a0 <__aeabi_dmul>
 8005968:	a36b      	add	r3, pc, #428	; (adr r3, 8005b18 <__kernel_tan+0x318>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa fc61 	bl	8000234 <__adddf3>
 8005972:	4622      	mov	r2, r4
 8005974:	462b      	mov	r3, r5
 8005976:	f7fa fe13 	bl	80005a0 <__aeabi_dmul>
 800597a:	a369      	add	r3, pc, #420	; (adr r3, 8005b20 <__kernel_tan+0x320>)
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f7fa fc58 	bl	8000234 <__adddf3>
 8005984:	4622      	mov	r2, r4
 8005986:	462b      	mov	r3, r5
 8005988:	f7fa fe0a 	bl	80005a0 <__aeabi_dmul>
 800598c:	a366      	add	r3, pc, #408	; (adr r3, 8005b28 <__kernel_tan+0x328>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f7fa fc4f 	bl	8000234 <__adddf3>
 8005996:	4622      	mov	r2, r4
 8005998:	462b      	mov	r3, r5
 800599a:	f7fa fe01 	bl	80005a0 <__aeabi_dmul>
 800599e:	a364      	add	r3, pc, #400	; (adr r3, 8005b30 <__kernel_tan+0x330>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fc46 	bl	8000234 <__adddf3>
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	f7fa fdf8 	bl	80005a0 <__aeabi_dmul>
 80059b0:	a361      	add	r3, pc, #388	; (adr r3, 8005b38 <__kernel_tan+0x338>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fa fdef 	bl	80005a0 <__aeabi_dmul>
 80059c2:	a35f      	add	r3, pc, #380	; (adr r3, 8005b40 <__kernel_tan+0x340>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fc34 	bl	8000234 <__adddf3>
 80059cc:	4622      	mov	r2, r4
 80059ce:	462b      	mov	r3, r5
 80059d0:	f7fa fde6 	bl	80005a0 <__aeabi_dmul>
 80059d4:	a35c      	add	r3, pc, #368	; (adr r3, 8005b48 <__kernel_tan+0x348>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f7fa fc2b 	bl	8000234 <__adddf3>
 80059de:	4622      	mov	r2, r4
 80059e0:	462b      	mov	r3, r5
 80059e2:	f7fa fddd 	bl	80005a0 <__aeabi_dmul>
 80059e6:	a35a      	add	r3, pc, #360	; (adr r3, 8005b50 <__kernel_tan+0x350>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f7fa fc22 	bl	8000234 <__adddf3>
 80059f0:	4622      	mov	r2, r4
 80059f2:	462b      	mov	r3, r5
 80059f4:	f7fa fdd4 	bl	80005a0 <__aeabi_dmul>
 80059f8:	a357      	add	r3, pc, #348	; (adr r3, 8005b58 <__kernel_tan+0x358>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fc19 	bl	8000234 <__adddf3>
 8005a02:	4622      	mov	r2, r4
 8005a04:	462b      	mov	r3, r5
 8005a06:	f7fa fdcb 	bl	80005a0 <__aeabi_dmul>
 8005a0a:	a355      	add	r3, pc, #340	; (adr r3, 8005b60 <__kernel_tan+0x360>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fc10 	bl	8000234 <__adddf3>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a1c:	f7fa fc0a 	bl	8000234 <__adddf3>
 8005a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a24:	f7fa fdbc 	bl	80005a0 <__aeabi_dmul>
 8005a28:	9a02      	ldr	r2, [sp, #8]
 8005a2a:	9b00      	ldr	r3, [sp, #0]
 8005a2c:	f7fa fc02 	bl	8000234 <__adddf3>
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	f7fa fdb4 	bl	80005a0 <__aeabi_dmul>
 8005a38:	9a02      	ldr	r2, [sp, #8]
 8005a3a:	9b00      	ldr	r3, [sp, #0]
 8005a3c:	f7fa fbfa 	bl	8000234 <__adddf3>
 8005a40:	a349      	add	r3, pc, #292	; (adr r3, 8005b68 <__kernel_tan+0x368>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	4604      	mov	r4, r0
 8005a48:	460d      	mov	r5, r1
 8005a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a4e:	f7fa fda7 	bl	80005a0 <__aeabi_dmul>
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	f7fa fbed 	bl	8000234 <__adddf3>
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	e9cd 0100 	strd	r0, r1, [sp]
 8005a60:	4602      	mov	r2, r0
 8005a62:	4659      	mov	r1, fp
 8005a64:	4650      	mov	r0, sl
 8005a66:	f7fa fbe5 	bl	8000234 <__adddf3>
 8005a6a:	4b44      	ldr	r3, [pc, #272]	; (8005b7c <__kernel_tan+0x37c>)
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	429e      	cmp	r6, r3
 8005a70:	460d      	mov	r5, r1
 8005a72:	f340 8085 	ble.w	8005b80 <__kernel_tan+0x380>
 8005a76:	4638      	mov	r0, r7
 8005a78:	f7fa fd28 	bl	80004cc <__aeabi_i2d>
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4680      	mov	r8, r0
 8005a80:	4689      	mov	r9, r1
 8005a82:	462b      	mov	r3, r5
 8005a84:	4620      	mov	r0, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	f7fa fd8a 	bl	80005a0 <__aeabi_dmul>
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	4606      	mov	r6, r0
 8005a90:	460f      	mov	r7, r1
 8005a92:	464b      	mov	r3, r9
 8005a94:	4620      	mov	r0, r4
 8005a96:	4629      	mov	r1, r5
 8005a98:	f7fa fbcc 	bl	8000234 <__adddf3>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	f7fa fea6 	bl	80007f4 <__aeabi_ddiv>
 8005aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aac:	f7fa fbc0 	bl	8000230 <__aeabi_dsub>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	f7fa fbba 	bl	8000230 <__aeabi_dsub>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	f7fa fbb8 	bl	8000234 <__adddf3>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4640      	mov	r0, r8
 8005aca:	4649      	mov	r1, r9
 8005acc:	f7fa fbb0 	bl	8000230 <__aeabi_dsub>
 8005ad0:	9b07      	ldr	r3, [sp, #28]
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	179b      	asrs	r3, r3, #30
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	f1c3 0001 	rsb	r0, r3, #1
 8005ade:	460d      	mov	r5, r1
 8005ae0:	f7fa fcf4 	bl	80004cc <__aeabi_i2d>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4629      	mov	r1, r5
 8005aec:	f7fa fd58 	bl	80005a0 <__aeabi_dmul>
 8005af0:	e6a9      	b.n	8005846 <__kernel_tan+0x46>
 8005af2:	bf00      	nop
 8005af4:	f3af 8000 	nop.w
 8005af8:	54442d18 	.word	0x54442d18
 8005afc:	3fe921fb 	.word	0x3fe921fb
 8005b00:	33145c07 	.word	0x33145c07
 8005b04:	3c81a626 	.word	0x3c81a626
 8005b08:	74bf7ad4 	.word	0x74bf7ad4
 8005b0c:	3efb2a70 	.word	0x3efb2a70
 8005b10:	32f0a7e9 	.word	0x32f0a7e9
 8005b14:	3f12b80f 	.word	0x3f12b80f
 8005b18:	1a8d1068 	.word	0x1a8d1068
 8005b1c:	3f3026f7 	.word	0x3f3026f7
 8005b20:	fee08315 	.word	0xfee08315
 8005b24:	3f57dbc8 	.word	0x3f57dbc8
 8005b28:	e96e8493 	.word	0xe96e8493
 8005b2c:	3f8226e3 	.word	0x3f8226e3
 8005b30:	1bb341fe 	.word	0x1bb341fe
 8005b34:	3faba1ba 	.word	0x3faba1ba
 8005b38:	db605373 	.word	0xdb605373
 8005b3c:	bef375cb 	.word	0xbef375cb
 8005b40:	a03792a6 	.word	0xa03792a6
 8005b44:	3f147e88 	.word	0x3f147e88
 8005b48:	f2f26501 	.word	0xf2f26501
 8005b4c:	3f4344d8 	.word	0x3f4344d8
 8005b50:	c9560328 	.word	0xc9560328
 8005b54:	3f6d6d22 	.word	0x3f6d6d22
 8005b58:	8406d637 	.word	0x8406d637
 8005b5c:	3f9664f4 	.word	0x3f9664f4
 8005b60:	1110fe7a 	.word	0x1110fe7a
 8005b64:	3fc11111 	.word	0x3fc11111
 8005b68:	55555563 	.word	0x55555563
 8005b6c:	3fd55555 	.word	0x3fd55555
 8005b70:	3e2fffff 	.word	0x3e2fffff
 8005b74:	3ff00000 	.word	0x3ff00000
 8005b78:	bff00000 	.word	0xbff00000
 8005b7c:	3fe59427 	.word	0x3fe59427
 8005b80:	2f01      	cmp	r7, #1
 8005b82:	d031      	beq.n	8005be8 <__kernel_tan+0x3e8>
 8005b84:	460f      	mov	r7, r1
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	4918      	ldr	r1, [pc, #96]	; (8005bf0 <__kernel_tan+0x3f0>)
 8005b8e:	f7fa fe31 	bl	80007f4 <__aeabi_ddiv>
 8005b92:	2600      	movs	r6, #0
 8005b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	465b      	mov	r3, fp
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	f7fa fb44 	bl	8000230 <__aeabi_dsub>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bb0:	f7fa fb3e 	bl	8000230 <__aeabi_dsub>
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	f7fa fcf2 	bl	80005a0 <__aeabi_dmul>
 8005bbc:	4632      	mov	r2, r6
 8005bbe:	4682      	mov	sl, r0
 8005bc0:	468b      	mov	fp, r1
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	4639      	mov	r1, r7
 8005bc8:	f7fa fcea 	bl	80005a0 <__aeabi_dmul>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <__kernel_tan+0x3f4>)
 8005bd0:	f7fa fb30 	bl	8000234 <__adddf3>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4650      	mov	r0, sl
 8005bda:	4659      	mov	r1, fp
 8005bdc:	f7fa fb2a 	bl	8000234 <__adddf3>
 8005be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005be4:	4634      	mov	r4, r6
 8005be6:	e66d      	b.n	80058c4 <__kernel_tan+0xc4>
 8005be8:	4682      	mov	sl, r0
 8005bea:	468b      	mov	fp, r1
 8005bec:	e62d      	b.n	800584a <__kernel_tan+0x4a>
 8005bee:	bf00      	nop
 8005bf0:	bff00000 	.word	0xbff00000
 8005bf4:	3ff00000 	.word	0x3ff00000

08005bf8 <fabs>:
 8005bf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005bfc:	4770      	bx	lr
	...

08005c00 <floor>:
 8005c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c04:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005c08:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005c0c:	2e13      	cmp	r6, #19
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4607      	mov	r7, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	4605      	mov	r5, r0
 8005c18:	dc33      	bgt.n	8005c82 <floor+0x82>
 8005c1a:	2e00      	cmp	r6, #0
 8005c1c:	da14      	bge.n	8005c48 <floor+0x48>
 8005c1e:	a334      	add	r3, pc, #208	; (adr r3, 8005cf0 <floor+0xf0>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f7fa fb06 	bl	8000234 <__adddf3>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f7fa ff48 	bl	8000ac0 <__aeabi_dcmpgt>
 8005c30:	b138      	cbz	r0, 8005c42 <floor+0x42>
 8005c32:	2c00      	cmp	r4, #0
 8005c34:	da58      	bge.n	8005ce8 <floor+0xe8>
 8005c36:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005c3a:	431d      	orrs	r5, r3
 8005c3c:	d001      	beq.n	8005c42 <floor+0x42>
 8005c3e:	2500      	movs	r5, #0
 8005c40:	4c2d      	ldr	r4, [pc, #180]	; (8005cf8 <floor+0xf8>)
 8005c42:	4623      	mov	r3, r4
 8005c44:	462f      	mov	r7, r5
 8005c46:	e025      	b.n	8005c94 <floor+0x94>
 8005c48:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <floor+0xfc>)
 8005c4a:	fa42 f806 	asr.w	r8, r2, r6
 8005c4e:	ea01 0208 	and.w	r2, r1, r8
 8005c52:	4302      	orrs	r2, r0
 8005c54:	d01e      	beq.n	8005c94 <floor+0x94>
 8005c56:	a326      	add	r3, pc, #152	; (adr r3, 8005cf0 <floor+0xf0>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f7fa faea 	bl	8000234 <__adddf3>
 8005c60:	2200      	movs	r2, #0
 8005c62:	2300      	movs	r3, #0
 8005c64:	f7fa ff2c 	bl	8000ac0 <__aeabi_dcmpgt>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d0ea      	beq.n	8005c42 <floor+0x42>
 8005c6c:	2c00      	cmp	r4, #0
 8005c6e:	bfbe      	ittt	lt
 8005c70:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005c74:	fa43 f606 	asrlt.w	r6, r3, r6
 8005c78:	19a4      	addlt	r4, r4, r6
 8005c7a:	2500      	movs	r5, #0
 8005c7c:	ea24 0408 	bic.w	r4, r4, r8
 8005c80:	e7df      	b.n	8005c42 <floor+0x42>
 8005c82:	2e33      	cmp	r6, #51	; 0x33
 8005c84:	dd0a      	ble.n	8005c9c <floor+0x9c>
 8005c86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005c8a:	d103      	bne.n	8005c94 <floor+0x94>
 8005c8c:	f7fa fad2 	bl	8000234 <__adddf3>
 8005c90:	4607      	mov	r7, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4638      	mov	r0, r7
 8005c96:	4619      	mov	r1, r3
 8005c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005ca4:	fa22 f808 	lsr.w	r8, r2, r8
 8005ca8:	ea18 0f00 	tst.w	r8, r0
 8005cac:	d0f2      	beq.n	8005c94 <floor+0x94>
 8005cae:	a310      	add	r3, pc, #64	; (adr r3, 8005cf0 <floor+0xf0>)
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	f7fa fabe 	bl	8000234 <__adddf3>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f7fa ff00 	bl	8000ac0 <__aeabi_dcmpgt>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d0be      	beq.n	8005c42 <floor+0x42>
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	da02      	bge.n	8005cce <floor+0xce>
 8005cc8:	2e14      	cmp	r6, #20
 8005cca:	d103      	bne.n	8005cd4 <floor+0xd4>
 8005ccc:	3401      	adds	r4, #1
 8005cce:	ea25 0508 	bic.w	r5, r5, r8
 8005cd2:	e7b6      	b.n	8005c42 <floor+0x42>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005cda:	fa03 f606 	lsl.w	r6, r3, r6
 8005cde:	4435      	add	r5, r6
 8005ce0:	42bd      	cmp	r5, r7
 8005ce2:	bf38      	it	cc
 8005ce4:	18e4      	addcc	r4, r4, r3
 8005ce6:	e7f2      	b.n	8005cce <floor+0xce>
 8005ce8:	2500      	movs	r5, #0
 8005cea:	462c      	mov	r4, r5
 8005cec:	e7a9      	b.n	8005c42 <floor+0x42>
 8005cee:	bf00      	nop
 8005cf0:	8800759c 	.word	0x8800759c
 8005cf4:	7e37e43c 	.word	0x7e37e43c
 8005cf8:	bff00000 	.word	0xbff00000
 8005cfc:	000fffff 	.word	0x000fffff

08005d00 <scalbn>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005d06:	4604      	mov	r4, r0
 8005d08:	460d      	mov	r5, r1
 8005d0a:	4617      	mov	r7, r2
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	b996      	cbnz	r6, 8005d36 <scalbn+0x36>
 8005d10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d14:	4303      	orrs	r3, r0
 8005d16:	d039      	beq.n	8005d8c <scalbn+0x8c>
 8005d18:	4b33      	ldr	r3, [pc, #204]	; (8005de8 <scalbn+0xe8>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f7fa fc40 	bl	80005a0 <__aeabi_dmul>
 8005d20:	4b32      	ldr	r3, [pc, #200]	; (8005dec <scalbn+0xec>)
 8005d22:	4604      	mov	r4, r0
 8005d24:	429f      	cmp	r7, r3
 8005d26:	460d      	mov	r5, r1
 8005d28:	da0f      	bge.n	8005d4a <scalbn+0x4a>
 8005d2a:	a32b      	add	r3, pc, #172	; (adr r3, 8005dd8 <scalbn+0xd8>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f7fa fc36 	bl	80005a0 <__aeabi_dmul>
 8005d34:	e006      	b.n	8005d44 <scalbn+0x44>
 8005d36:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005d3a:	4296      	cmp	r6, r2
 8005d3c:	d10a      	bne.n	8005d54 <scalbn+0x54>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	f7fa fa78 	bl	8000234 <__adddf3>
 8005d44:	4604      	mov	r4, r0
 8005d46:	460d      	mov	r5, r1
 8005d48:	e020      	b.n	8005d8c <scalbn+0x8c>
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005d50:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005d54:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005d58:	19b9      	adds	r1, r7, r6
 8005d5a:	4291      	cmp	r1, r2
 8005d5c:	dd0e      	ble.n	8005d7c <scalbn+0x7c>
 8005d5e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005d62:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005d66:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005d6a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005d6e:	4820      	ldr	r0, [pc, #128]	; (8005df0 <scalbn+0xf0>)
 8005d70:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005d74:	a31a      	add	r3, pc, #104	; (adr r3, 8005de0 <scalbn+0xe0>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	e7d9      	b.n	8005d30 <scalbn+0x30>
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	dd08      	ble.n	8005d92 <scalbn+0x92>
 8005d80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d92:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005d96:	da12      	bge.n	8005dbe <scalbn+0xbe>
 8005d98:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d9c:	429f      	cmp	r7, r3
 8005d9e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005da2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8005da6:	dcdc      	bgt.n	8005d62 <scalbn+0x62>
 8005da8:	a30b      	add	r3, pc, #44	; (adr r3, 8005dd8 <scalbn+0xd8>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005db2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005db6:	480f      	ldr	r0, [pc, #60]	; (8005df4 <scalbn+0xf4>)
 8005db8:	f041 011f 	orr.w	r1, r1, #31
 8005dbc:	e7b8      	b.n	8005d30 <scalbn+0x30>
 8005dbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005dc2:	3136      	adds	r1, #54	; 0x36
 8005dc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dc8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005dcc:	4620      	mov	r0, r4
 8005dce:	4629      	mov	r1, r5
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <scalbn+0xf8>)
 8005dd4:	e7ac      	b.n	8005d30 <scalbn+0x30>
 8005dd6:	bf00      	nop
 8005dd8:	c2f8f359 	.word	0xc2f8f359
 8005ddc:	01a56e1f 	.word	0x01a56e1f
 8005de0:	8800759c 	.word	0x8800759c
 8005de4:	7e37e43c 	.word	0x7e37e43c
 8005de8:	43500000 	.word	0x43500000
 8005dec:	ffff3cb0 	.word	0xffff3cb0
 8005df0:	8800759c 	.word	0x8800759c
 8005df4:	c2f8f359 	.word	0xc2f8f359
 8005df8:	3c900000 	.word	0x3c900000

08005dfc <__libc_init_array>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	2600      	movs	r6, #0
 8005e00:	4d0c      	ldr	r5, [pc, #48]	; (8005e34 <__libc_init_array+0x38>)
 8005e02:	4c0d      	ldr	r4, [pc, #52]	; (8005e38 <__libc_init_array+0x3c>)
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	42a6      	cmp	r6, r4
 8005e0a:	d109      	bne.n	8005e20 <__libc_init_array+0x24>
 8005e0c:	f000 f822 	bl	8005e54 <_init>
 8005e10:	2600      	movs	r6, #0
 8005e12:	4d0a      	ldr	r5, [pc, #40]	; (8005e3c <__libc_init_array+0x40>)
 8005e14:	4c0a      	ldr	r4, [pc, #40]	; (8005e40 <__libc_init_array+0x44>)
 8005e16:	1b64      	subs	r4, r4, r5
 8005e18:	10a4      	asrs	r4, r4, #2
 8005e1a:	42a6      	cmp	r6, r4
 8005e1c:	d105      	bne.n	8005e2a <__libc_init_array+0x2e>
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e24:	4798      	blx	r3
 8005e26:	3601      	adds	r6, #1
 8005e28:	e7ee      	b.n	8005e08 <__libc_init_array+0xc>
 8005e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2e:	4798      	blx	r3
 8005e30:	3601      	adds	r6, #1
 8005e32:	e7f2      	b.n	8005e1a <__libc_init_array+0x1e>
 8005e34:	080066c8 	.word	0x080066c8
 8005e38:	080066c8 	.word	0x080066c8
 8005e3c:	080066c8 	.word	0x080066c8
 8005e40:	080066d0 	.word	0x080066d0

08005e44 <memset>:
 8005e44:	4603      	mov	r3, r0
 8005e46:	4402      	add	r2, r0
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d100      	bne.n	8005e4e <memset+0xa>
 8005e4c:	4770      	bx	lr
 8005e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e52:	e7f9      	b.n	8005e48 <memset+0x4>

08005e54 <_init>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr

08005e60 <_fini>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	bf00      	nop
 8005e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e66:	bc08      	pop	{r3}
 8005e68:	469e      	mov	lr, r3
 8005e6a:	4770      	bx	lr
