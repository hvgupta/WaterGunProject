
WaterGunProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  08007670  08007670  00017670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f4c  08007f4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007f4c  08007f4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f4c  08007f4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  08007fcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08007fcc  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001211b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5f  00000000  00000000  000321b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00035018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00035d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bae  00000000  00000000  000369b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105b3  00000000  00000000  0003c55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db88  00000000  00000000  0004cb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec4  00000000  00000000  000ea6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08007654 	.word	0x08007654

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08007654 	.word	0x08007654

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <_ZN8WaterGun18currentInfoDisplayC1Ev>:
#include "infoAndStatus.hpp"

namespace WaterGun{
    /* Declaration of all the currentInfoDisplay class functions */

    currentInfoDisplay::currentInfoDisplay(){
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
        Volume = 100;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2264      	movs	r2, #100	; 0x64
 8000d8c:	601a      	str	r2, [r3, #0]
        Bearing = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
        targetBearing = 0;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
        status = STATUS::OFF_STATE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
    }
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <_ZN8WaterGun18currentInfoDisplay12displayBasicEv>:

    void currentInfoDisplay::displayBasic(){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]
        LCD_DrawString(0,318,"Water");
 8000db4:	4a39      	ldr	r2, [pc, #228]	; (8000e9c <_ZN8WaterGun18currentInfoDisplay12displayBasicEv+0xf0>)
 8000db6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 fc14 	bl	80015e8 <LCD_DrawString>
        LCD_DrawString(17,318,"Level");
 8000dc0:	4a37      	ldr	r2, [pc, #220]	; (8000ea0 <_ZN8WaterGun18currentInfoDisplay12displayBasicEv+0xf4>)
 8000dc2:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000dc6:	2011      	movs	r0, #17
 8000dc8:	f000 fc0e 	bl	80015e8 <LCD_DrawString>

        LCD_DrawString(0,262,"STATUS");
 8000dcc:	4a35      	ldr	r2, [pc, #212]	; (8000ea4 <_ZN8WaterGun18currentInfoDisplay12displayBasicEv+0xf8>)
 8000dce:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 fc08 	bl	80015e8 <LCD_DrawString>

        LCD_DrawString( 0,198,"Current");
 8000dd8:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <_ZN8WaterGun18currentInfoDisplay12displayBasicEv+0xfc>)
 8000dda:	21c6      	movs	r1, #198	; 0xc6
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 fc03 	bl	80015e8 <LCD_DrawString>
        LCD_DrawString(17,198,"Bearing");
 8000de2:	4a32      	ldr	r2, [pc, #200]	; (8000eac <_ZN8WaterGun18currentInfoDisplay12displayBasicEv+0x100>)
 8000de4:	21c6      	movs	r1, #198	; 0xc6
 8000de6:	2011      	movs	r0, #17
 8000de8:	f000 fbfe 	bl	80015e8 <LCD_DrawString>

        LCD_DrawString( 0,126," Target");
 8000dec:	4a30      	ldr	r2, [pc, #192]	; (8000eb0 <_ZN8WaterGun18currentInfoDisplay12displayBasicEv+0x104>)
 8000dee:	217e      	movs	r1, #126	; 0x7e
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 fbf9 	bl	80015e8 <LCD_DrawString>
        LCD_DrawString(17,126,"Bearing");
 8000df6:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <_ZN8WaterGun18currentInfoDisplay12displayBasicEv+0x100>)
 8000df8:	217e      	movs	r1, #126	; 0x7e
 8000dfa:	2011      	movs	r0, #17
 8000dfc:	f000 fbf4 	bl	80015e8 <LCD_DrawString>

        LCD_DrawString(0,54,"DIST");
 8000e00:	4a2c      	ldr	r2, [pc, #176]	; (8000eb4 <_ZN8WaterGun18currentInfoDisplay12displayBasicEv+0x108>)
 8000e02:	2136      	movs	r1, #54	; 0x36
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 fbef 	bl	80015e8 <LCD_DrawString>

        // Below this lines are drawn to make columns 

        LCD_DrawLine(34,319,34,0,0x0000); // hortizontal line for the header
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2222      	movs	r2, #34	; 0x22
 8000e12:	f240 113f 	movw	r1, #319	; 0x13f
 8000e16:	2022      	movs	r0, #34	; 0x22
 8000e18:	f000 fb1e 	bl	8001458 <LCD_DrawLine>
                                            // The info will be between these two lines
        LCD_DrawLine(54,319,54,0,0x0000); // hortizontal line for the info
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2300      	movs	r3, #0
 8000e22:	2236      	movs	r2, #54	; 0x36
 8000e24:	f240 113f 	movw	r1, #319	; 0x13f
 8000e28:	2036      	movs	r0, #54	; 0x36
 8000e2a:	f000 fb15 	bl	8001458 <LCD_DrawLine>

        /*Added by zlashc START*/
        LCD_DrawLine(220,319,220,0,0x0000); // hortizontal line for the Debug message, check if sensor works. Info will be below of this line
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2300      	movs	r3, #0
 8000e34:	22dc      	movs	r2, #220	; 0xdc
 8000e36:	f240 113f 	movw	r1, #319	; 0x13f
 8000e3a:	20dc      	movs	r0, #220	; 0xdc
 8000e3c:	f000 fb0c 	bl	8001458 <LCD_DrawLine>
        LCD_DrawLine(220,160,239,160,0x0000); // vertical line that divide the two Debug message.
 8000e40:	2300      	movs	r3, #0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	22ef      	movs	r2, #239	; 0xef
 8000e48:	21a0      	movs	r1, #160	; 0xa0
 8000e4a:	20dc      	movs	r0, #220	; 0xdc
 8000e4c:	f000 fb04 	bl	8001458 <LCD_DrawLine>

        /*
            Below are vertical lines which divide the table into columns
        */

        LCD_DrawLine(0, 270, 54, 270, 0x0000); 
 8000e50:	2300      	movs	r3, #0
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000e58:	2236      	movs	r2, #54	; 0x36
 8000e5a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 fafa 	bl	8001458 <LCD_DrawLine>
        LCD_DrawLine(0, 206, 54, 206, 0x0000);
 8000e64:	2300      	movs	r3, #0
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	23ce      	movs	r3, #206	; 0xce
 8000e6a:	2236      	movs	r2, #54	; 0x36
 8000e6c:	21ce      	movs	r1, #206	; 0xce
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 faf2 	bl	8001458 <LCD_DrawLine>
        LCD_DrawLine(0, 134, 54, 134, 0x0000);
 8000e74:	2300      	movs	r3, #0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2386      	movs	r3, #134	; 0x86
 8000e7a:	2236      	movs	r2, #54	; 0x36
 8000e7c:	2186      	movs	r1, #134	; 0x86
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 faea 	bl	8001458 <LCD_DrawLine>
        LCD_DrawLine(0,  62, 54,  62, 0x0000);
 8000e84:	2300      	movs	r3, #0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	233e      	movs	r3, #62	; 0x3e
 8000e8a:	2236      	movs	r2, #54	; 0x36
 8000e8c:	213e      	movs	r1, #62	; 0x3e
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 fae2 	bl	8001458 <LCD_DrawLine>

        // each cell has a differnt size, but it is right of 34 (so clear from 35)

    }
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	08007670 	.word	0x08007670
 8000ea0:	08007678 	.word	0x08007678
 8000ea4:	08007680 	.word	0x08007680
 8000ea8:	08007688 	.word	0x08007688
 8000eac:	08007690 	.word	0x08007690
 8000eb0:	08007698 	.word	0x08007698
 8000eb4:	080076a0 	.word	0x080076a0

08000eb8 <_ZN8WaterGun18currentInfoDisplay11displayInfoEv>:
        - bearing
        - target bearing(only show if in tracking mode)
        - the distance of the closest object
        other things to consider, maybe making the board display in landscape instead of potrait
    */
    void currentInfoDisplay::displayInfo(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
        */

        //char* toPrint; //This line is commented by zlashc
    	char toPrint[4]; //This line is added by zlashc

        itos(Volume,toPrint);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4610      	mov	r0, r2
 8000ece:	f000 f859 	bl	8000f84 <itos>
        LCD_Clear(35,271,18,48,0xffff);
 8000ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2330      	movs	r3, #48	; 0x30
 8000eda:	2212      	movs	r2, #18
 8000edc:	f240 110f 	movw	r1, #271	; 0x10f
 8000ee0:	2023      	movs	r0, #35	; 0x23
 8000ee2:	f000 fa96 	bl	8001412 <LCD_Clear>
        LCD_DrawString(35,318,toPrint);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	461a      	mov	r2, r3
 8000eec:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000ef0:	2023      	movs	r0, #35	; 0x23
 8000ef2:	f000 fb79 	bl	80015e8 <LCD_DrawString>

        LCD_Clear(35,207,18,62,0xffff);
 8000ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	233e      	movs	r3, #62	; 0x3e
 8000efe:	2212      	movs	r2, #18
 8000f00:	21cf      	movs	r1, #207	; 0xcf
 8000f02:	2023      	movs	r0, #35	; 0x23
 8000f04:	f000 fa85 	bl	8001412 <LCD_Clear>
        LCD_DrawString(35, 269, STATUSToString(status));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	330c      	adds	r3, #12
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f849 	bl	8000fa4 <STATUSToString>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	f240 110d 	movw	r1, #269	; 0x10d
 8000f1a:	2023      	movs	r0, #35	; 0x23
 8000f1c:	f000 fb64 	bl	80015e8 <LCD_DrawString>

        itos(Bearing,toPrint);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f107 020c 	add.w	r2, r7, #12
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f82a 	bl	8000f84 <itos>
        LCD_DrawString(35,205,toPrint);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	461a      	mov	r2, r3
 8000f36:	21cd      	movs	r1, #205	; 0xcd
 8000f38:	2023      	movs	r0, #35	; 0x23
 8000f3a:	f000 fb55 	bl	80015e8 <LCD_DrawString>

        itos(targetBearing,toPrint);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f107 020c 	add.w	r2, r7, #12
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f81b 	bl	8000f84 <itos>
        LCD_DrawString(35,133,toPrint);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	461a      	mov	r2, r3
 8000f54:	2185      	movs	r1, #133	; 0x85
 8000f56:	2023      	movs	r0, #35	; 0x23
 8000f58:	f000 fb46 	bl	80015e8 <LCD_DrawString>

        itos(closestObject,toPrint);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	461a      	mov	r2, r3
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	4610      	mov	r0, r2
 8000f6a:	f000 f80b 	bl	8000f84 <itos>
        LCD_DrawString(35,61,toPrint);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	461a      	mov	r2, r3
 8000f74:	213d      	movs	r1, #61	; 0x3d
 8000f76:	2023      	movs	r0, #35	; 0x23
 8000f78:	f000 fb36 	bl	80015e8 <LCD_DrawString>

    }
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <itos>:

    /* End of the declaration of class functions */

    // converts a given integer into char*
    void itos(const int a, char* buffer){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
        sprintf(buffer,"%03d",a);
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4903      	ldr	r1, [pc, #12]	; (8000fa0 <itos+0x1c>)
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f005 fee4 	bl	8006d60 <siprintf>
    }
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	080076a8 	.word	0x080076a8

08000fa4 <STATUSToString>:

    const char* STATUSToString(const STATUS& status){	//Modified by zlashc, return type change from char* to const char*
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
        switch (status)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d813      	bhi.n	8000fdc <STATUSToString+0x38>
 8000fb4:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <STATUSToString+0x18>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	08000fcd 	.word	0x08000fcd
 8000fc0:	08000fd9 	.word	0x08000fd9
 8000fc4:	08000fd1 	.word	0x08000fd1
 8000fc8:	08000fd5 	.word	0x08000fd5
        {
        case STATUS::OFF_STATE:
            return "OFF";
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <STATUSToString+0x44>)
 8000fce:	e006      	b.n	8000fde <STATUSToString+0x3a>
        case STATUS::SINGLE_SHOOT_STATE:
            return "SINGLE";
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <STATUSToString+0x48>)
 8000fd2:	e004      	b.n	8000fde <STATUSToString+0x3a>
        case STATUS::CONTINIOUS_SHOOT_STATE:
            return "CONTI";
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <STATUSToString+0x4c>)
 8000fd6:	e002      	b.n	8000fde <STATUSToString+0x3a>
        case STATUS::RELOAD_STATE:
            return "RELOAD";
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <STATUSToString+0x50>)
 8000fda:	e000      	b.n	8000fde <STATUSToString+0x3a>
        default:
            return "error";
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <STATUSToString+0x54>)
        }
    }
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	080076b0 	.word	0x080076b0
 8000fec:	080076b4 	.word	0x080076b4
 8000ff0:	080076bc 	.word	0x080076bc
 8000ff4:	080076c4 	.word	0x080076c4
 8000ff8:	080076cc 	.word	0x080076cc

08000ffc <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	e002      	b.n	800100c <Delay+0x10>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3b01      	subs	r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f9      	bne.n	8001006 <Delay+0xa>
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <LCD_INIT>:

void LCD_INIT ( void )
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001024:	2001      	movs	r0, #1
 8001026:	f000 f829 	bl	800107c <LCD_BackLed_Control>
	LCD_Rst();
 800102a:	f000 f80f 	bl	800104c <LCD_Rst>
	LCD_REG_Config();
 800102e:	f000 f85f 	bl	80010f0 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800103c:	22f0      	movs	r2, #240	; 0xf0
 800103e:	2100      	movs	r1, #0
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f9e6 	bl	8001412 <LCD_Clear>
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <LCD_Rst>:



void LCD_Rst ( void )
{			
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <LCD_Rst+0x28>)
 8001056:	f002 ff96 	bl	8003f86 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <LCD_Rst+0x2c>)
 800105c:	f7ff ffce 	bl	8000ffc <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2102      	movs	r1, #2
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <LCD_Rst+0x28>)
 8001066:	f002 ff8e 	bl	8003f86 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <LCD_Rst+0x2c>)
 800106c:	f7ff ffc6 	bl	8000ffc <Delay>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40011800 	.word	0x40011800
 8001078:	0002bffc 	.word	0x0002bffc

0800107c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <LCD_BackLed_Control+0x34>)
 8001094:	f002 ff77 	bl	8003f86 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001098:	e005      	b.n	80010a6 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <LCD_BackLed_Control+0x34>)
 80010a2:	f002 ff70 	bl	8003f86 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40011400 	.word	0x40011400

080010b4 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80010be:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	8013      	strh	r3, [r2, #0]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <LCD_Write_Data+0x1c>)
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	8013      	strh	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	60020000 	.word	0x60020000

080010f0 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80010f4:	20cf      	movs	r0, #207	; 0xcf
 80010f6:	f7ff ffdd 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff ffe8 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001100:	2081      	movs	r0, #129	; 0x81
 8001102:	f7ff ffe5 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001106:	2030      	movs	r0, #48	; 0x30
 8001108:	f7ff ffe2 	bl	80010d0 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 800110c:	20ed      	movs	r0, #237	; 0xed
 800110e:	f7ff ffd1 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001112:	2064      	movs	r0, #100	; 0x64
 8001114:	f7ff ffdc 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001118:	2003      	movs	r0, #3
 800111a:	f7ff ffd9 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800111e:	2012      	movs	r0, #18
 8001120:	f7ff ffd6 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001124:	2081      	movs	r0, #129	; 0x81
 8001126:	f7ff ffd3 	bl	80010d0 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800112a:	20e8      	movs	r0, #232	; 0xe8
 800112c:	f7ff ffc2 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001130:	2085      	movs	r0, #133	; 0x85
 8001132:	f7ff ffcd 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001136:	2010      	movs	r0, #16
 8001138:	f7ff ffca 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 800113c:	2078      	movs	r0, #120	; 0x78
 800113e:	f7ff ffc7 	bl	80010d0 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001142:	20cb      	movs	r0, #203	; 0xcb
 8001144:	f7ff ffb6 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001148:	2039      	movs	r0, #57	; 0x39
 800114a:	f7ff ffc1 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800114e:	202c      	movs	r0, #44	; 0x2c
 8001150:	f7ff ffbe 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff ffbb 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800115a:	2034      	movs	r0, #52	; 0x34
 800115c:	f7ff ffb8 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001160:	2002      	movs	r0, #2
 8001162:	f7ff ffb5 	bl	80010d0 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001166:	20f7      	movs	r0, #247	; 0xf7
 8001168:	f7ff ffa4 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 800116c:	2020      	movs	r0, #32
 800116e:	f7ff ffaf 	bl	80010d0 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001172:	20ea      	movs	r0, #234	; 0xea
 8001174:	f7ff ff9e 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ffa9 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ffa6 	bl	80010d0 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001184:	20b1      	movs	r0, #177	; 0xb1
 8001186:	f7ff ff95 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff ffa0 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001190:	201b      	movs	r0, #27
 8001192:	f7ff ff9d 	bl	80010d0 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001196:	20b6      	movs	r0, #182	; 0xb6
 8001198:	f7ff ff8c 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 800119c:	200a      	movs	r0, #10
 800119e:	f7ff ff97 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80011a2:	20a2      	movs	r0, #162	; 0xa2
 80011a4:	f7ff ff94 	bl	80010d0 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80011a8:	20c0      	movs	r0, #192	; 0xc0
 80011aa:	f7ff ff83 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80011ae:	2035      	movs	r0, #53	; 0x35
 80011b0:	f7ff ff8e 	bl	80010d0 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80011b4:	20c1      	movs	r0, #193	; 0xc1
 80011b6:	f7ff ff7d 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80011ba:	2011      	movs	r0, #17
 80011bc:	f7ff ff88 	bl	80010d0 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80011c0:	20c5      	movs	r0, #197	; 0xc5
 80011c2:	f7ff ff77 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80011c6:	2045      	movs	r0, #69	; 0x45
 80011c8:	f7ff ff82 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80011cc:	2045      	movs	r0, #69	; 0x45
 80011ce:	f7ff ff7f 	bl	80010d0 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80011d2:	20c7      	movs	r0, #199	; 0xc7
 80011d4:	f7ff ff6e 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80011d8:	20a2      	movs	r0, #162	; 0xa2
 80011da:	f7ff ff79 	bl	80010d0 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80011de:	20f2      	movs	r0, #242	; 0xf2
 80011e0:	f7ff ff68 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff ff73 	bl	80010d0 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80011ea:	2026      	movs	r0, #38	; 0x26
 80011ec:	f7ff ff62 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff ff6d 	bl	80010d0 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80011f6:	20e0      	movs	r0, #224	; 0xe0
 80011f8:	f7ff ff5c 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80011fc:	200f      	movs	r0, #15
 80011fe:	f7ff ff67 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001202:	2026      	movs	r0, #38	; 0x26
 8001204:	f7ff ff64 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001208:	2024      	movs	r0, #36	; 0x24
 800120a:	f7ff ff61 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800120e:	200b      	movs	r0, #11
 8001210:	f7ff ff5e 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001214:	200e      	movs	r0, #14
 8001216:	f7ff ff5b 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800121a:	2009      	movs	r0, #9
 800121c:	f7ff ff58 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001220:	2054      	movs	r0, #84	; 0x54
 8001222:	f7ff ff55 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001226:	20a8      	movs	r0, #168	; 0xa8
 8001228:	f7ff ff52 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 800122c:	2046      	movs	r0, #70	; 0x46
 800122e:	f7ff ff4f 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001232:	200c      	movs	r0, #12
 8001234:	f7ff ff4c 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001238:	2017      	movs	r0, #23
 800123a:	f7ff ff49 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800123e:	2009      	movs	r0, #9
 8001240:	f7ff ff46 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001244:	200f      	movs	r0, #15
 8001246:	f7ff ff43 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800124a:	2007      	movs	r0, #7
 800124c:	f7ff ff40 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff ff3d 	bl	80010d0 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001256:	20e1      	movs	r0, #225	; 0xe1
 8001258:	f7ff ff2c 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ff37 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001262:	2019      	movs	r0, #25
 8001264:	f7ff ff34 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001268:	201b      	movs	r0, #27
 800126a:	f7ff ff31 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800126e:	2004      	movs	r0, #4
 8001270:	f7ff ff2e 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001274:	2010      	movs	r0, #16
 8001276:	f7ff ff2b 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800127a:	2007      	movs	r0, #7
 800127c:	f7ff ff28 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001280:	202a      	movs	r0, #42	; 0x2a
 8001282:	f7ff ff25 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001286:	2047      	movs	r0, #71	; 0x47
 8001288:	f7ff ff22 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 800128c:	2039      	movs	r0, #57	; 0x39
 800128e:	f7ff ff1f 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001292:	2003      	movs	r0, #3
 8001294:	f7ff ff1c 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001298:	2006      	movs	r0, #6
 800129a:	f7ff ff19 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800129e:	2006      	movs	r0, #6
 80012a0:	f7ff ff16 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80012a4:	2030      	movs	r0, #48	; 0x30
 80012a6:	f7ff ff13 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80012aa:	2038      	movs	r0, #56	; 0x38
 80012ac:	f7ff ff10 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80012b0:	200f      	movs	r0, #15
 80012b2:	f7ff ff0d 	bl	80010d0 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80012b6:	2036      	movs	r0, #54	; 0x36
 80012b8:	f7ff fefc 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80012bc:	20c8      	movs	r0, #200	; 0xc8
 80012be:	f7ff ff07 	bl	80010d0 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80012c2:	202a      	movs	r0, #42	; 0x2a
 80012c4:	f7ff fef6 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff ff01 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fefe 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fefb 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80012da:	20ef      	movs	r0, #239	; 0xef
 80012dc:	f7ff fef8 	bl	80010d0 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80012e0:	202b      	movs	r0, #43	; 0x2b
 80012e2:	f7ff fee7 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fef2 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff feef 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80012f2:	2001      	movs	r0, #1
 80012f4:	f7ff feec 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80012f8:	203f      	movs	r0, #63	; 0x3f
 80012fa:	f7ff fee9 	bl	80010d0 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80012fe:	203a      	movs	r0, #58	; 0x3a
 8001300:	f7ff fed8 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001304:	2055      	movs	r0, #85	; 0x55
 8001306:	f7ff fee3 	bl	80010d0 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800130a:	2011      	movs	r0, #17
 800130c:	f7ff fed2 	bl	80010b4 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <LCD_REG_Config+0x230>)
 8001312:	f7ff fe73 	bl	8000ffc <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001316:	2029      	movs	r0, #41	; 0x29
 8001318:	f7ff fecc 	bl	80010b4 <LCD_Write_Cmd>
	
	
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	0002bffc 	.word	0x0002bffc

08001324 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4604      	mov	r4, r0
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	80fb      	strh	r3, [r7, #6]
 8001336:	4603      	mov	r3, r0
 8001338:	80bb      	strh	r3, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]
 800133e:	4613      	mov	r3, r2
 8001340:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001342:	202a      	movs	r0, #42	; 0x2a
 8001344:	f7ff feb6 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff febe 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff feb8 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	4413      	add	r3, r2
 8001366:	3b01      	subs	r3, #1
 8001368:	121b      	asrs	r3, r3, #8
 800136a:	b29b      	uxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff feaf 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001372:	88fa      	ldrh	r2, [r7, #6]
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	3b01      	subs	r3, #1
 800137c:	b29b      	uxth	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fea4 	bl	80010d0 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001388:	202b      	movs	r0, #43	; 0x2b
 800138a:	f7ff fe93 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe9b 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe95 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80013a6:	88ba      	ldrh	r2, [r7, #4]
 80013a8:	883b      	ldrh	r3, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	3b01      	subs	r3, #1
 80013ae:	121b      	asrs	r3, r3, #8
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe8c 	bl	80010d0 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80013b8:	88ba      	ldrh	r2, [r7, #4]
 80013ba:	883b      	ldrh	r3, [r7, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fe81 	bl	80010d0 <LCD_Write_Data>
	
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}

080013d6 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80013e6:	202c      	movs	r0, #44	; 0x2c
 80013e8:	f7ff fe64 	bl	80010b4 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e006      	b.n	8001400 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe6b 	bl	80010d0 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3f4      	bcc.n	80013f2 <LCD_FillColor+0x1c>
		
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001412:	b590      	push	{r4, r7, lr}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	4604      	mov	r4, r0
 800141a:	4608      	mov	r0, r1
 800141c:	4611      	mov	r1, r2
 800141e:	461a      	mov	r2, r3
 8001420:	4623      	mov	r3, r4
 8001422:	80fb      	strh	r3, [r7, #6]
 8001424:	4603      	mov	r3, r0
 8001426:	80bb      	strh	r3, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001430:	883b      	ldrh	r3, [r7, #0]
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	88b9      	ldrh	r1, [r7, #4]
 8001436:	88f8      	ldrh	r0, [r7, #6]
 8001438:	f7ff ff74 	bl	8001324 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	883a      	ldrh	r2, [r7, #0]
 8001440:	fb02 f303 	mul.w	r3, r2, r3
 8001444:	461a      	mov	r2, r3
 8001446:	8b3b      	ldrh	r3, [r7, #24]
 8001448:	4619      	mov	r1, r3
 800144a:	4610      	mov	r0, r2
 800144c:	f7ff ffc3 	bl	80013d6 <LCD_FillColor>
	
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <LCD_DrawLine>:
	
}


void LCD_DrawLine ( uint16_t usC1, uint16_t usP1, uint16_t usC2, uint16_t usP2, uint16_t usColor )
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b08d      	sub	sp, #52	; 0x34
 800145c:	af00      	add	r7, sp, #0
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	461a      	mov	r2, r3
 8001466:	4623      	mov	r3, r4
 8001468:	80fb      	strh	r3, [r7, #6]
 800146a:	4603      	mov	r3, r0
 800146c:	80bb      	strh	r3, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]
 8001472:	4613      	mov	r3, r2
 8001474:	803b      	strh	r3, [r7, #0]
	uint16_t us; 
	uint16_t usC_Current, usP_Current;
	
	int32_t lError_C = 0, lError_P = 0, lDelta_C, lDelta_P, lDistance; 
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
	int32_t lIncrease_C, lIncrease_P; 	
	
	
	lDelta_C = usC2 - usC1;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	61fb      	str	r3, [r7, #28]
	lDelta_P = usP2 - usP1; 
 8001486:	883a      	ldrh	r2, [r7, #0]
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	61bb      	str	r3, [r7, #24]
	
	usC_Current = usC1; 
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	85bb      	strh	r3, [r7, #44]	; 0x2c
	usP_Current = usP1; 
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	
	if ( lDelta_C > 0 ) 
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	dd02      	ble.n	80014a2 <LCD_DrawLine+0x4a>
		lIncrease_C = 1;  
 800149c:	2301      	movs	r3, #1
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	e00b      	b.n	80014ba <LCD_DrawLine+0x62>
	
	else if ( lDelta_C == 0 ) 
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <LCD_DrawLine+0x56>
		lIncrease_C = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	e005      	b.n	80014ba <LCD_DrawLine+0x62>
	
	else 
  	{ 
    		lIncrease_C = -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	613b      	str	r3, [r7, #16]
    		lDelta_C = - lDelta_C;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	425b      	negs	r3, r3
 80014b8:	61fb      	str	r3, [r7, #28]
  	} 

	
	if ( lDelta_P > 0 )
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	dd02      	ble.n	80014c6 <LCD_DrawLine+0x6e>
		lIncrease_P = 1; 
 80014c0:	2301      	movs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e00b      	b.n	80014de <LCD_DrawLine+0x86>
	
	else if ( lDelta_P == 0 )
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <LCD_DrawLine+0x7a>
		lIncrease_P = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e005      	b.n	80014de <LCD_DrawLine+0x86>
	else 
	{
  		lIncrease_P = -1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	60fb      	str	r3, [r7, #12]
    		lDelta_P = - lDelta_P;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	425b      	negs	r3, r3
 80014dc:	61bb      	str	r3, [r7, #24]
 	} 

	if (  lDelta_C > lDelta_P )
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dd02      	ble.n	80014ec <LCD_DrawLine+0x94>
		lDistance = lDelta_C; 
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e001      	b.n	80014f0 <LCD_DrawLine+0x98>
	
	else 
		lDistance = lDelta_P; 
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	617b      	str	r3, [r7, #20]
	
	
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 80014f0:	2300      	movs	r3, #0
 80014f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014f4:	e02b      	b.n	800154e <LCD_DrawLine+0xf6>
	{  
		LCD_DrawDot ( usC_Current, usP_Current, usColor );
 80014f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80014fa:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80014fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f89d 	bl	800163e <LCD_DrawDot>
		
		lError_C += lDelta_C ; 
 8001504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
		lError_P += lDelta_P ; 
 800150c:	6a3a      	ldr	r2, [r7, #32]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4413      	add	r3, r2
 8001512:	623b      	str	r3, [r7, #32]
		
		if ( lError_C > lDistance ) 
 8001514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	dd08      	ble.n	800152e <LCD_DrawLine+0xd6>
		{ 
			lError_C -= lDistance; 
 800151c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
			usC_Current += lIncrease_C; 
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	b29a      	uxth	r2, r3
 8001528:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800152a:	4413      	add	r3, r2
 800152c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}  
		
		if ( lError_P > lDistance ) 
 800152e:	6a3a      	ldr	r2, [r7, #32]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	429a      	cmp	r2, r3
 8001534:	dd08      	ble.n	8001548 <LCD_DrawLine+0xf0>
		{ 
			lError_P -= lDistance; 
 8001536:	6a3a      	ldr	r2, [r7, #32]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	623b      	str	r3, [r7, #32]
			usP_Current += lIncrease_P; 
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	b29a      	uxth	r2, r3
 8001542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001544:	4413      	add	r3, r2
 8001546:	857b      	strh	r3, [r7, #42]	; 0x2a
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 8001548:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800154a:	3301      	adds	r3, #1
 800154c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800154e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	429a      	cmp	r2, r3
 8001556:	ddce      	ble.n	80014f6 <LCD_DrawLine+0x9e>
		} 
		
	}  
	
	
}   
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3734      	adds	r7, #52	; 0x34
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
	...

08001564 <LCD_DrawChar>:


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
 800156e:	460b      	mov	r3, r1
 8001570:	80bb      	strh	r3, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	70fb      	strb	r3, [r7, #3]
	uint8_t ucRelativePositon = cChar - ' ';
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	3b20      	subs	r3, #32
 800157a:	727b      	strb	r3, [r7, #9]
	
	
	for (uint16_t ucColumn = usC; ucColumn < usC + HEIGHT_EN_CHAR; ucColumn++){
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	81fb      	strh	r3, [r7, #14]
 8001580:	e025      	b.n	80015ce <LCD_DrawChar+0x6a>

		uint8_t colInfo = ucAscii_1608[ucRelativePositon][ucColumn-usC];
 8001582:	7a7a      	ldrb	r2, [r7, #9]
 8001584:	89f9      	ldrh	r1, [r7, #14]
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	1acb      	subs	r3, r1, r3
 800158a:	4916      	ldr	r1, [pc, #88]	; (80015e4 <LCD_DrawChar+0x80>)
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	440a      	add	r2, r1
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	737b      	strb	r3, [r7, #13]

		for (uint16_t ucPage = usP; ucPage > usP - WIDTH_EN_CHAR; ucPage--){
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	817b      	strh	r3, [r7, #10]
 800159a:	e010      	b.n	80015be <LCD_DrawChar+0x5a>
			if (colInfo & 0x01){
 800159c:	7b7b      	ldrb	r3, [r7, #13]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <LCD_DrawChar+0x4e>
				LCD_DrawDot(ucColumn,ucPage,0x001F);
 80015a6:	8979      	ldrh	r1, [r7, #10]
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	221f      	movs	r2, #31
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f846 	bl	800163e <LCD_DrawDot>
			}
			colInfo >>= 1;
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	085b      	lsrs	r3, r3, #1
 80015b6:	737b      	strb	r3, [r7, #13]
		for (uint16_t ucPage = usP; ucPage > usP - WIDTH_EN_CHAR; ucPage--){
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	817b      	strh	r3, [r7, #10]
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	1fda      	subs	r2, r3, #7
 80015c2:	897b      	ldrh	r3, [r7, #10]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dde9      	ble.n	800159c <LCD_DrawChar+0x38>
	for (uint16_t ucColumn = usC; ucColumn < usC + HEIGHT_EN_CHAR; ucColumn++){
 80015c8:	89fb      	ldrh	r3, [r7, #14]
 80015ca:	3301      	adds	r3, #1
 80015cc:	81fb      	strh	r3, [r7, #14]
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	f103 020f 	add.w	r2, r3, #15
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dad3      	bge.n	8001582 <LCD_DrawChar+0x1e>
		}
	}
	
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800773c 	.word	0x0800773c

080015e8 <LCD_DrawString>:


void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	603a      	str	r2, [r7, #0]
 80015f2:	80fb      	strh	r3, [r7, #6]
 80015f4:	460b      	mov	r3, r1
 80015f6:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80015f8:	e016      	b.n	8001628 <LCD_DrawString+0x40>
	{
		if ((usC < 0) || (usC + HEIGHT_EN_CHAR >= LCD_Default_Max_COLUMN))
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2bdf      	cmp	r3, #223	; 0xdf
 80015fe:	d818      	bhi.n	8001632 <LCD_DrawString+0x4a>
		{
			return;
		}
		
		if ((usP >= LCD_Default_Max_PAGE) || (usP - WIDTH_EN_CHAR < LCD_DispWindow_Start_PAGE))
 8001600:	88bb      	ldrh	r3, [r7, #4]
 8001602:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001606:	d216      	bcs.n	8001636 <LCD_DrawString+0x4e>
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	2b07      	cmp	r3, #7
 800160c:	d913      	bls.n	8001636 <LCD_DrawString+0x4e>
		{
			return;
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	88b9      	ldrh	r1, [r7, #4]
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffa4 	bl	8001564 <LCD_DrawChar>
		
		pStr ++;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	603b      	str	r3, [r7, #0]
		
		usP -= WIDTH_EN_CHAR;
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	3b08      	subs	r3, #8
 8001626:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e4      	bne.n	80015fa <LCD_DrawString+0x12>
 8001630:	e002      	b.n	8001638 <LCD_DrawString+0x50>
			return;
 8001632:	bf00      	nop
 8001634:	e000      	b.n	8001638 <LCD_DrawString+0x50>
			return;
 8001636:	bf00      	nop
		
	}
	
}
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColour)
{	
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	80fb      	strh	r3, [r7, #6]
 8001648:	460b      	mov	r3, r1
 800164a:	80bb      	strh	r3, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	807b      	strh	r3, [r7, #2]
	/*
	 *  Task 2 : Implement the LCD_DrawDot to turn on a particular dot on the LCD.
	 */
	LCD_OpenWindow(usCOLUMN,usPAGE,1,1);
 8001650:	88b9      	ldrh	r1, [r7, #4]
 8001652:	88f8      	ldrh	r0, [r7, #6]
 8001654:	2301      	movs	r3, #1
 8001656:	2201      	movs	r2, #1
 8001658:	f7ff fe64 	bl	8001324 <LCD_OpenWindow>
	LCD_Write_Cmd(CMD_SetPixel);
 800165c:	202c      	movs	r0, #44	; 0x2c
 800165e:	f7ff fd29 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Data(usColour);
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fd33 	bl	80010d0 <LCD_Write_Data>

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <Set_LED>:
/*LED Relate BEGIN*/
uint8_t LEDs_Data[Total_LEDs][3];
uint8_t LEDs_Data_Temp[Total_LEDs][3];	// For brightness
int dataSent_Finish = 0;				// Flag for DMA control

void Set_LED (int LEDidx, int Red, int Green, int Blue){	//0-255 scale
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
	LEDs_Data[LEDidx][0] = Green;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	b2d8      	uxtb	r0, r3
 8001686:	4911      	ldr	r1, [pc, #68]	; (80016cc <Set_LED+0x58>)
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	440b      	add	r3, r1
 8001692:	4602      	mov	r2, r0
 8001694:	701a      	strb	r2, [r3, #0]
	LEDs_Data[LEDidx][1] = Red;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	b2d8      	uxtb	r0, r3
 800169a:	490c      	ldr	r1, [pc, #48]	; (80016cc <Set_LED+0x58>)
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	3301      	adds	r3, #1
 80016a8:	4602      	mov	r2, r0
 80016aa:	701a      	strb	r2, [r3, #0]
	LEDs_Data[LEDidx][2] = Blue;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2d8      	uxtb	r0, r3
 80016b0:	4906      	ldr	r1, [pc, #24]	; (80016cc <Set_LED+0x58>)
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	3302      	adds	r3, #2
 80016be:	4602      	mov	r2, r0
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000174 	.word	0x20000174

080016d0 <Set_Brightness>:

void Set_Brightness (int brightness){		// 0-100
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	//Make sure value is from 0 to 100
	brightness = (brightness < 0) ? 0 : (brightness > 100) ? 100 : brightness;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db04      	blt.n	80016e8 <Set_Brightness+0x18>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b64      	cmp	r3, #100	; 0x64
 80016e2:	bfa8      	it	ge
 80016e4:	2364      	movge	r3, #100	; 0x64
 80016e6:	e000      	b.n	80016ea <Set_Brightness+0x1a>
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]

	//Tangent for linear scaling
	int brightness_45 = brightness*45/100;	// 0-45
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	011a      	lsls	r2, r3, #4
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	4a33      	ldr	r2, [pc, #204]	; (80017c8 <Set_Brightness+0xf8>)
 80016fa:	fb82 1203 	smull	r1, r2, r2, r3
 80016fe:	1152      	asrs	r2, r2, #5
 8001700:	17db      	asrs	r3, r3, #31
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	60fb      	str	r3, [r7, #12]
	float angle = 90-brightness_45;  	// in degree
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fae3 	bl	8000cd8 <__aeabi_i2f>
 8001712:	4603      	mov	r3, r0
 8001714:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<Total_LEDs; i++){
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b13      	cmp	r3, #19
 800171e:	dc49      	bgt.n	80017b4 <Set_Brightness+0xe4>
		for (int j=0; j<3; j++){
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b02      	cmp	r3, #2
 8001728:	dc40      	bgt.n	80017ac <Set_Brightness+0xdc>
			LEDs_Data_Temp[i][j] = LEDs_Data[i][j] / tan(angle*M_PI / 180);
 800172a:	4928      	ldr	r1, [pc, #160]	; (80017cc <Set_Brightness+0xfc>)
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	18ca      	adds	r2, r1, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fec5 	bl	80004cc <__aeabi_i2d>
 8001742:	4604      	mov	r4, r0
 8001744:	460d      	mov	r5, r1
 8001746:	68b8      	ldr	r0, [r7, #8]
 8001748:	f7fe fed2 	bl	80004f0 <__aeabi_f2d>
 800174c:	a31c      	add	r3, pc, #112	; (adr r3, 80017c0 <Set_Brightness+0xf0>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe ff25 	bl	80005a0 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <Set_Brightness+0x100>)
 8001764:	f7ff f846 	bl	80007f4 <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f004 fa5e 	bl	8005c30 <tan>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4620      	mov	r0, r4
 800177a:	4629      	mov	r1, r5
 800177c:	f7ff f83a 	bl	80007f4 <__aeabi_ddiv>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff f9cc 	bl	8000b24 <__aeabi_d2uiz>
 800178c:	4603      	mov	r3, r0
 800178e:	b2d8      	uxtb	r0, r3
 8001790:	4910      	ldr	r1, [pc, #64]	; (80017d4 <Set_Brightness+0x104>)
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	18ca      	adds	r2, r1, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	4602      	mov	r2, r0
 80017a2:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<3; j++){
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	3301      	adds	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e7bb      	b.n	8001724 <Set_Brightness+0x54>
	for (int i=0; i<Total_LEDs; i++){
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e7b2      	b.n	800171a <Set_Brightness+0x4a>
		}
	}

}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdb0      	pop	{r4, r5, r7, pc}
 80017bc:	f3af 8000 	nop.w
 80017c0:	54442d18 	.word	0x54442d18
 80017c4:	400921fb 	.word	0x400921fb
 80017c8:	51eb851f 	.word	0x51eb851f
 80017cc:	20000174 	.word	0x20000174
 80017d0:	40668000 	.word	0x40668000
 80017d4:	200001b0 	.word	0x200001b0

080017d8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80017e0:	2100      	movs	r1, #0
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80017e4:	f003 fa80 	bl	8004ce8 <HAL_TIM_PWM_Stop_DMA>
	dataSent_Finish = 1;
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200000a0 	.word	0x200000a0
 80017fc:	200001ec 	.word	0x200001ec

08001800 <WS2812B_LED_Data_Send>:

void WS2812B_LED_Data_Send()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8001806:	af00      	add	r7, sp, #0
    uint32_t indx = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint32_t colorData;			//use 32 bits as need transmit 24 bits RGB.
    uint16_t pwmData[24*Total_LEDs + 45];

    for (int i = 0; i < Total_LEDs ; i++){
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8001814:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001818:	2b13      	cmp	r3, #19
 800181a:	dc4b      	bgt.n	80018b4 <WS2812B_LED_Data_Send+0xb4>
    	//24 bit, G7 G6 G5 G4 G3 G2 G1 G0 R7 R6 R5 R4 R3 R2 R1 R0 B7 B6 B5 B4 B3 B2 B1 B0
        colorData = (LEDs_Data_Temp[i][0] << 16) |
 800181c:	493c      	ldr	r1, [pc, #240]	; (8001910 <WS2812B_LED_Data_Send+0x110>)
 800181e:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	440b      	add	r3, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	0419      	lsls	r1, r3, #16
        				(LEDs_Data_Temp[i][1] << 8) |
 800182e:	4838      	ldr	r0, [pc, #224]	; (8001910 <WS2812B_LED_Data_Send+0x110>)
 8001830:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	4403      	add	r3, r0
 800183c:	3301      	adds	r3, #1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	021b      	lsls	r3, r3, #8
        colorData = (LEDs_Data_Temp[i][0] << 16) |
 8001842:	4319      	orrs	r1, r3
									LEDs_Data_Temp[i][2];
 8001844:	4832      	ldr	r0, [pc, #200]	; (8001910 <WS2812B_LED_Data_Send+0x110>)
 8001846:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	4403      	add	r3, r0
 8001852:	3302      	adds	r3, #2
 8001854:	781b      	ldrb	r3, [r3, #0]
        				(LEDs_Data_Temp[i][1] << 8) |
 8001856:	430b      	orrs	r3, r1
        colorData = (LEDs_Data_Temp[i][0] << 16) |
 8001858:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

    	//High bit is sent first, follow data sheet
        for (int j = 23; j >= 0; j--)
 800185c:	2317      	movs	r3, #23
 800185e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001862:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001866:	2b00      	cmp	r3, #0
 8001868:	db1e      	blt.n	80018a8 <WS2812B_LED_Data_Send+0xa8>
            pwmData[indx++] = (colorData & (1 << j)) ? 60 : 30;	// 1s: ~64% of 90, 0s: ~32% of 90
 800186a:	2201      	movs	r2, #1
 800186c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	461a      	mov	r2, r3
 8001876:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <WS2812B_LED_Data_Send+0x84>
 8001880:	213c      	movs	r1, #60	; 0x3c
 8001882:	e000      	b.n	8001886 <WS2812B_LED_Data_Send+0x86>
 8001884:	211e      	movs	r1, #30
 8001886:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001890:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8001894:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8001898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 23; j >= 0; j--)
 800189c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80018a0:	3b01      	subs	r3, #1
 80018a2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80018a6:	e7dc      	b.n	8001862 <WS2812B_LED_Data_Send+0x62>
    for (int i = 0; i < Total_LEDs ; i++){
 80018a8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80018ac:	3301      	adds	r3, #1
 80018ae:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80018b2:	e7af      	b.n	8001814 <WS2812B_LED_Data_Send+0x14>
    }
    //Reset code which is above 50 us of 0s, period of clock is 1.25us
    for (int i = 0; i < 45; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80018ba:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80018be:	2b2c      	cmp	r3, #44	; 0x2c
 80018c0:	dc11      	bgt.n	80018e6 <WS2812B_LED_Data_Send+0xe6>
    	pwmData[indx++] = 0;
 80018c2:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 80018cc:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 80018d0:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 80018d4:	2100      	movs	r1, #0
 80018d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 45; i++)
 80018da:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80018de:	3301      	adds	r3, #1
 80018e0:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80018e4:	e7e9      	b.n	80018ba <WS2812B_LED_Data_Send+0xba>

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80018e6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	463a      	mov	r2, r7
 80018ee:	2100      	movs	r1, #0
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <WS2812B_LED_Data_Send+0x114>)
 80018f2:	f003 f847 	bl	8004984 <HAL_TIM_PWM_Start_DMA>

    while (!dataSent_Finish){
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <WS2812B_LED_Data_Send+0x118>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d100      	bne.n	8001900 <WS2812B_LED_Data_Send+0x100>
 80018fe:	e7fa      	b.n	80018f6 <WS2812B_LED_Data_Send+0xf6>
    	// Wait for data to be sent
    }
    // Reset the flag
    dataSent_Finish = 0;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <WS2812B_LED_Data_Send+0x118>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200001b0 	.word	0x200001b0
 8001914:	200000a0 	.word	0x200000a0
 8001918:	200001ec 	.word	0x200001ec

0800191c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <EXTI0_IRQHandler+0x6c>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <EXTI0_IRQHandler+0x64>
	{
		/*Key1 code BEGIN*/
		//Check current gun mode
		WaterGun::STATUS curStatus = infoDisplay.status;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <EXTI0_IRQHandler+0x70>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	607b      	str	r3, [r7, #4]
		if (curStatus == WaterGun::STATUS::OFF_STATE){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d103      	bne.n	800194c <EXTI0_IRQHandler+0x30>
			infoDisplay.status = WaterGun::STATUS::RELOAD_STATE;	//Status changes by interrupt using K1
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <EXTI0_IRQHandler+0x70>)
 8001946:	2201      	movs	r2, #1
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	e010      	b.n	800196e <EXTI0_IRQHandler+0x52>
		}
		else if (curStatus == WaterGun::STATUS::RELOAD_STATE){
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d103      	bne.n	800195a <EXTI0_IRQHandler+0x3e>
			infoDisplay.status = WaterGun::STATUS::SINGLE_SHOOT_STATE;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <EXTI0_IRQHandler+0x70>)
 8001954:	2202      	movs	r2, #2
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	e009      	b.n	800196e <EXTI0_IRQHandler+0x52>
		  }
		else if (curStatus == WaterGun::STATUS::SINGLE_SHOOT_STATE){
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d103      	bne.n	8001968 <EXTI0_IRQHandler+0x4c>
			infoDisplay.status = WaterGun::STATUS::CONTINIOUS_SHOOT_STATE;
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <EXTI0_IRQHandler+0x70>)
 8001962:	2203      	movs	r2, #3
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	e002      	b.n	800196e <EXTI0_IRQHandler+0x52>
		}
		else{								//CONTINIOUS_SHOOT_STATE
			infoDisplay.status = WaterGun::STATUS::OFF_STATE;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <EXTI0_IRQHandler+0x70>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
		}
		GunState.displayInfo();
 800196e:	4808      	ldr	r0, [pc, #32]	; (8001990 <EXTI0_IRQHandler+0x74>)
 8001970:	f7ff faa2 	bl	8000eb8 <_ZN8WaterGun18currentInfoDisplay11displayInfoEv>
		/*Key1 code END*/
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <EXTI0_IRQHandler+0x6c>)
 8001976:	2201      	movs	r2, #1
 8001978:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 800197a:	2001      	movs	r0, #1
 800197c:	f002 fb1b 	bl	8003fb6 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI0_IRQn 0 */
 // HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40010400 	.word	0x40010400
 800198c:	200001f4 	.word	0x200001f4
 8001990:	2000008c 	.word	0x2000008c

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b094      	sub	sp, #80	; 0x50
 8001998:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199a:	f001 fb6d 	bl	8003078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199e:	f000 fa87 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a2:	f000 fbb1 	bl	8002108 <MX_GPIO_Init>
  MX_DMA_Init();
 80019a6:	f000 fb91 	bl	80020cc <MX_DMA_Init>
  MX_FSMC_Init();
 80019aa:	f000 fc79 	bl	80022a0 <MX_FSMC_Init>
  MX_TIM1_Init();
 80019ae:	f000 facf 	bl	8001f50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80019b2:	f7ff fb34 	bl	800101e <LCD_INIT>

  DEBUG_DELAY();
  LCD_Write_Cmd(0x36);
 80019b6:	2036      	movs	r0, #54	; 0x36
 80019b8:	f7ff fb7c 	bl	80010b4 <LCD_Write_Cmd>
  LCD_Write_Cmd(0xC8);
 80019bc:	20c8      	movs	r0, #200	; 0xc8
 80019be:	f7ff fb79 	bl	80010b4 <LCD_Write_Cmd>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GunState.displayBasic();
 80019c2:	48b2      	ldr	r0, [pc, #712]	; (8001c8c <main+0x2f8>)
 80019c4:	f7ff f9f2 	bl	8000dac <_ZN8WaterGun18currentInfoDisplay12displayBasicEv>

  while (1)
  {

	  GunState.displayInfo();
 80019c8:	48b0      	ldr	r0, [pc, #704]	; (8001c8c <main+0x2f8>)
 80019ca:	f7ff fa75 	bl	8000eb8 <_ZN8WaterGun18currentInfoDisplay11displayInfoEv>
	  /*Don't modify this START*/
	  //Note: shooting mode change using Key1 via interrupt
	  WaterGun::STATUS curStatus = infoDisplay.status;
 80019ce:	4bb0      	ldr	r3, [pc, #704]	; (8001c90 <main+0x2fc>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	60bb      	str	r3, [r7, #8]
	  GunState.status = curStatus;
 80019d4:	4aad      	ldr	r2, [pc, #692]	; (8001c8c <main+0x2f8>)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	60d3      	str	r3, [r2, #12]
	  GunState.displayInfo();
 80019da:	48ac      	ldr	r0, [pc, #688]	; (8001c8c <main+0x2f8>)
 80019dc:	f7ff fa6c 	bl	8000eb8 <_ZN8WaterGun18currentInfoDisplay11displayInfoEv>
	  if (curStatus == WaterGun::STATUS::OFF_STATE){
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d140      	bne.n	8001a68 <main+0xd4>
		 //LED off state motion (Breathing)
		  for (int i=0; i<20; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
 80019ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ec:	2b13      	cmp	r3, #19
 80019ee:	dc10      	bgt.n	8001a12 <main+0x7e>
		  {
			  Set_LED(i, 255-2*i, 255-2*i, 4*i);	//Yellow to less yellow
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a06:	f7ff fe35 	bl	8001674 <Set_LED>
		  for (int i=0; i<20; i++)
 8001a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a10:	e7eb      	b.n	80019ea <main+0x56>
		  }
		  for (int i=0; i<20; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	643b      	str	r3, [r7, #64]	; 0x40
 8001a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a18:	2b13      	cmp	r3, #19
 8001a1a:	dc0f      	bgt.n	8001a3c <main+0xa8>
		  {
			  Set_Brightness(3*i);
 8001a1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fe53 	bl	80016d0 <Set_Brightness>
			  WS2812B_LED_Data_Send();
 8001a2a:	f7ff fee9 	bl	8001800 <WS2812B_LED_Data_Send>
			  HAL_Delay (25);
 8001a2e:	2019      	movs	r0, #25
 8001a30:	f001 fb84 	bl	800313c <HAL_Delay>
		  for (int i=0; i<20; i++)
 8001a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a36:	3301      	adds	r3, #1
 8001a38:	643b      	str	r3, [r7, #64]	; 0x40
 8001a3a:	e7ec      	b.n	8001a16 <main+0x82>
		  }
		  for (int i=19; i>=0; i--)
 8001a3c:	2313      	movs	r3, #19
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f2c0 81ce 	blt.w	8001de4 <main+0x450>
		  {
			  Set_Brightness(3*i);
 8001a48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fe3d 	bl	80016d0 <Set_Brightness>
			  WS2812B_LED_Data_Send();
 8001a56:	f7ff fed3 	bl	8001800 <WS2812B_LED_Data_Send>
			  HAL_Delay (25);
 8001a5a:	2019      	movs	r0, #25
 8001a5c:	f001 fb6e 	bl	800313c <HAL_Delay>
		  for (int i=19; i>=0; i--)
 8001a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a62:	3b01      	subs	r3, #1
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a66:	e7eb      	b.n	8001a40 <main+0xac>
		  }
	  }
	  else if (curStatus == WaterGun::STATUS::RELOAD_STATE){
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	f040 808f 	bne.w	8001b8e <main+0x1fa>
		  //If switch is pressed
		  if (Reloadobj.getTriggerState() == true){
 8001a70:	4888      	ldr	r0, [pc, #544]	; (8001c94 <main+0x300>)
 8001a72:	f000 fdd8 	bl	8002626 <_ZN16reloadingProcess6Reload15getTriggerStateEv>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d049      	beq.n	8001b1a <main+0x186>
			  //LED reload motion
			  for (int i=0; i<10+3; i++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	dc30      	bgt.n	8001af2 <main+0x15e>
			  {
				  if (i<10){
 8001a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	dc0f      	bgt.n	8001ab6 <main+0x122>
					  //Turn on head of middleleft LED
					  Set_LED(9-i, 42, 254, 183);			//Cyan
 8001a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a98:	f1c3 0009 	rsb	r0, r3, #9
 8001a9c:	23b7      	movs	r3, #183	; 0xb7
 8001a9e:	22fe      	movs	r2, #254	; 0xfe
 8001aa0:	212a      	movs	r1, #42	; 0x2a
 8001aa2:	f7ff fde7 	bl	8001674 <Set_LED>
					  //Turn on head of middleright LED
					  Set_LED(10+i, 42, 254, 183);			//Cyan
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	f103 000a 	add.w	r0, r3, #10
 8001aac:	23b7      	movs	r3, #183	; 0xb7
 8001aae:	22fe      	movs	r2, #254	; 0xfe
 8001ab0:	212a      	movs	r1, #42	; 0x2a
 8001ab2:	f7ff fddf 	bl	8001674 <Set_LED>
				  }
				  if ( (i-3) >= 0 ){
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	dd0e      	ble.n	8001ada <main+0x146>
					  //Turn on tail of middleleft LED
					  Set_LED(9-(i-3), 0, 0, 0);
 8001abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abe:	f1c3 000c 	rsb	r0, r3, #12
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f7ff fdd4 	bl	8001674 <Set_LED>
					  //Turn off tail of middleright LED
					  Set_LED(10+(i-3), 0, 0, 0);
 8001acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ace:	1dd8      	adds	r0, r3, #7
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	f7ff fdcd 	bl	8001674 <Set_LED>
				  }
				  Set_Brightness(60);
 8001ada:	203c      	movs	r0, #60	; 0x3c
 8001adc:	f7ff fdf8 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001ae0:	f7ff fe8e 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (77);
 8001ae4:	204d      	movs	r0, #77	; 0x4d
 8001ae6:	f001 fb29 	bl	800313c <HAL_Delay>
			  for (int i=0; i<10+3; i++)
 8001aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aec:	3301      	adds	r3, #1
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001af0:	e7cb      	b.n	8001a8a <main+0xf6>
			  }
			  Reloadobj.gunReloading();
 8001af2:	4868      	ldr	r0, [pc, #416]	; (8001c94 <main+0x300>)
 8001af4:	f000 fc9e 	bl	8002434 <_ZN16reloadingProcess6Reload12gunReloadingEv>
			  singleShotobj.updateCurrentVolume(Reloadobj.getCurrentVolume());
 8001af8:	4866      	ldr	r0, [pc, #408]	; (8001c94 <main+0x300>)
 8001afa:	f000 fda4 	bl	8002646 <_ZN16reloadingProcess6Reload16getCurrentVolumeEv>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4619      	mov	r1, r3
 8001b02:	4865      	ldr	r0, [pc, #404]	; (8001c98 <main+0x304>)
 8001b04:	f000 fe2f 	bl	8002766 <_ZN15shootingProcess5shoot19updateCurrentVolumeEj>
			  continousShotsobj.updateCurrentVolume(Reloadobj.getCurrentVolume());
 8001b08:	4862      	ldr	r0, [pc, #392]	; (8001c94 <main+0x300>)
 8001b0a:	f000 fd9c 	bl	8002646 <_ZN16reloadingProcess6Reload16getCurrentVolumeEv>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4862      	ldr	r0, [pc, #392]	; (8001c9c <main+0x308>)
 8001b14:	f000 fe27 	bl	8002766 <_ZN15shootingProcess5shoot19updateCurrentVolumeEj>
 8001b18:	e164      	b.n	8001de4 <main+0x450>

		  }
		  //If switch not yet pressed
		  else{
			  //LED reload motion (Breathing)
			  for (int i=0; i<20; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	2b13      	cmp	r3, #19
 8001b22:	dc09      	bgt.n	8001b38 <main+0x1a4>
			  {
				  Set_LED(i, 42, 254, 183);					//Cyan
 8001b24:	23b7      	movs	r3, #183	; 0xb7
 8001b26:	22fe      	movs	r2, #254	; 0xfe
 8001b28:	212a      	movs	r1, #42	; 0x2a
 8001b2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b2c:	f7ff fda2 	bl	8001674 <Set_LED>
			  for (int i=0; i<20; i++)
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	3301      	adds	r3, #1
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
 8001b36:	e7f2      	b.n	8001b1e <main+0x18a>
			  }
			  for (int i=0; i<20; i++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	2b13      	cmp	r3, #19
 8001b40:	dc0f      	bgt.n	8001b62 <main+0x1ce>
			  {
				  Set_Brightness(3*i);
 8001b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fdc0 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001b50:	f7ff fe56 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8001b54:	2019      	movs	r0, #25
 8001b56:	f001 faf1 	bl	800313c <HAL_Delay>
			  for (int i=0; i<20; i++)
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b60:	e7ec      	b.n	8001b3c <main+0x1a8>
			  }
			  for (int i=19; i>=0; i--)
 8001b62:	2313      	movs	r3, #19
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f2c0 813b 	blt.w	8001de4 <main+0x450>
			  {
				  Set_Brightness(3*i);
 8001b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fdaa 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001b7c:	f7ff fe40 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8001b80:	2019      	movs	r0, #25
 8001b82:	f001 fadb 	bl	800313c <HAL_Delay>
			  for (int i=19; i>=0; i--)
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8c:	e7eb      	b.n	8001b66 <main+0x1d2>
			  }
		  }
	  }
	  else if (curStatus == WaterGun::STATUS::SINGLE_SHOOT_STATE){
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	f040 809b 	bne.w	8001ccc <main+0x338>
		  //If switch is pressed
		  if(singleShotobj.getTriggerState() == true){
 8001b96:	4840      	ldr	r0, [pc, #256]	; (8001c98 <main+0x304>)
 8001b98:	f000 fdbf 	bl	800271a <_ZN15shootingProcess5shoot15getTriggerStateEv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d04b      	beq.n	8001c44 <main+0x2b0>
			  //LED shoot out motion
			  for (int i=0; i<10+3; i++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	dc2e      	bgt.n	8001c14 <main+0x280>
			  {
				  if (i<10){
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	dc0d      	bgt.n	8001bd8 <main+0x244>
					  //Turn on head of leftmost LED
					  Set_LED(i, 138, 43, 226);			//Blue-purple
 8001bbc:	23e2      	movs	r3, #226	; 0xe2
 8001bbe:	222b      	movs	r2, #43	; 0x2b
 8001bc0:	218a      	movs	r1, #138	; 0x8a
 8001bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bc4:	f7ff fd56 	bl	8001674 <Set_LED>
					  //Turn on head of rightmost LED
					  Set_LED(19-i, 138, 43, 226);		//Blue-purple
 8001bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bca:	f1c3 0013 	rsb	r0, r3, #19
 8001bce:	23e2      	movs	r3, #226	; 0xe2
 8001bd0:	222b      	movs	r2, #43	; 0x2b
 8001bd2:	218a      	movs	r1, #138	; 0x8a
 8001bd4:	f7ff fd4e 	bl	8001674 <Set_LED>
				  }
				  if ( (i-3) >= 0 ){
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	dd0e      	ble.n	8001bfc <main+0x268>
					  //Turn off tail of leftmost LED
					  Set_LED(i-3, 0, 0, 0);
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	1ed8      	subs	r0, r3, #3
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	f7ff fd44 	bl	8001674 <Set_LED>
					  //Turn off tail of rightmost LED
					  Set_LED(19-i+3, 0, 0, 0);
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	f1c3 0016 	rsb	r0, r3, #22
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	f7ff fd3c 	bl	8001674 <Set_LED>
				  }
				  Set_Brightness(70);
 8001bfc:	2046      	movs	r0, #70	; 0x46
 8001bfe:	f7ff fd67 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001c02:	f7ff fdfd 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (77);
 8001c06:	204d      	movs	r0, #77	; 0x4d
 8001c08:	f001 fa98 	bl	800313c <HAL_Delay>
			  for (int i=0; i<10+3; i++)
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	3301      	adds	r3, #1
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c12:	e7cd      	b.n	8001bb0 <main+0x21c>
			  }
			  singleShotobj.gunShotonce();
 8001c14:	4820      	ldr	r0, [pc, #128]	; (8001c98 <main+0x304>)
 8001c16:	f000 fdc9 	bl	80027ac <_ZN15shootingProcess10singleShot11gunShotonceEv>
			  singleShotobj.setTriggerState(false);
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	481e      	ldr	r0, [pc, #120]	; (8001c98 <main+0x304>)
 8001c1e:	f000 fd67 	bl	80026f0 <_ZN15shootingProcess5shoot15setTriggerStateEb>
			  Reloadobj.updateCurrentVolume(singleShotobj.getCurrentVolume());
 8001c22:	481d      	ldr	r0, [pc, #116]	; (8001c98 <main+0x304>)
 8001c24:	f000 fd94 	bl	8002750 <_ZN15shootingProcess5shoot16getCurrentVolumeEv>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4819      	ldr	r0, [pc, #100]	; (8001c94 <main+0x300>)
 8001c2e:	f000 fd15 	bl	800265c <_ZN16reloadingProcess6Reload19updateCurrentVolumeEj>
			  continousShotsobj.updateCurrentVolume(singleShotobj.getCurrentVolume());
 8001c32:	4819      	ldr	r0, [pc, #100]	; (8001c98 <main+0x304>)
 8001c34:	f000 fd8c 	bl	8002750 <_ZN15shootingProcess5shoot16getCurrentVolumeEv>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4817      	ldr	r0, [pc, #92]	; (8001c9c <main+0x308>)
 8001c3e:	f000 fd92 	bl	8002766 <_ZN15shootingProcess5shoot19updateCurrentVolumeEj>
 8001c42:	e0cf      	b.n	8001de4 <main+0x450>
		  }
		  //If switch not yet pressed
		  else{
			  //LED reload motion (Breathing)
			  for (int i=0; i<20; i++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	2b13      	cmp	r3, #19
 8001c4c:	dc09      	bgt.n	8001c62 <main+0x2ce>
			  {
				  Set_LED(i, 138, 43, 226);			//Blue-purple
 8001c4e:	23e2      	movs	r3, #226	; 0xe2
 8001c50:	222b      	movs	r2, #43	; 0x2b
 8001c52:	218a      	movs	r1, #138	; 0x8a
 8001c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c56:	f7ff fd0d 	bl	8001674 <Set_LED>
			  for (int i=0; i<20; i++)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	e7f2      	b.n	8001c48 <main+0x2b4>
			  }
			  for (int i=0; i<20; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	2b13      	cmp	r3, #19
 8001c6a:	dc19      	bgt.n	8001ca0 <main+0x30c>
			  {
				  Set_Brightness(3*i);
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fd2b 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001c7a:	f7ff fdc1 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8001c7e:	2019      	movs	r0, #25
 8001c80:	f001 fa5c 	bl	800313c <HAL_Delay>
			  for (int i=0; i<20; i++)
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	3301      	adds	r3, #1
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	e7ec      	b.n	8001c66 <main+0x2d2>
 8001c8c:	2000008c 	.word	0x2000008c
 8001c90:	200001f4 	.word	0x200001f4
 8001c94:	20000208 	.word	0x20000208
 8001c98:	20000214 	.word	0x20000214
 8001c9c:	20000228 	.word	0x20000228
			  }
			  for (int i=19; i>=0; i--)
 8001ca0:	2313      	movs	r3, #19
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f2c0 809c 	blt.w	8001de4 <main+0x450>
			  {
				  Set_Brightness(3*i);
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fd0b 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001cba:	f7ff fda1 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8001cbe:	2019      	movs	r0, #25
 8001cc0:	f001 fa3c 	bl	800313c <HAL_Delay>
			  for (int i=19; i>=0; i--)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e7eb      	b.n	8001ca4 <main+0x310>
			  }
		  }
	  }
	  else{	//CONTINIOUS_SHOOT_STATE
		  //If switch is pressed
		  if (continousShotsobj.getTriggerState() == true){
 8001ccc:	486e      	ldr	r0, [pc, #440]	; (8001e88 <main+0x4f4>)
 8001cce:	f000 fd24 	bl	800271a <_ZN15shootingProcess5shoot15getTriggerStateEv>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d047      	beq.n	8001d72 <main+0x3de>
			  //LED shoot out motion
			  for (int i=0; i<10+3; i++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	dc2e      	bgt.n	8001d4a <main+0x3b6>
			  {
				  if (i<10){
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b09      	cmp	r3, #9
 8001cf0:	dc0d      	bgt.n	8001d0e <main+0x37a>
					  //Turn on head of leftmost LED
					  Set_LED(i, 255, 105, 100);			//Pink
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	2269      	movs	r2, #105	; 0x69
 8001cf6:	21ff      	movs	r1, #255	; 0xff
 8001cf8:	69b8      	ldr	r0, [r7, #24]
 8001cfa:	f7ff fcbb 	bl	8001674 <Set_LED>
					  //Turn on head of rightmost LED
					  Set_LED(19-i, 255, 105, 100);			//Pink
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f1c3 0013 	rsb	r0, r3, #19
 8001d04:	2364      	movs	r3, #100	; 0x64
 8001d06:	2269      	movs	r2, #105	; 0x69
 8001d08:	21ff      	movs	r1, #255	; 0xff
 8001d0a:	f7ff fcb3 	bl	8001674 <Set_LED>
				  }
				  if ( (i-3) >= 0 ){
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	dd0e      	ble.n	8001d32 <main+0x39e>
					  //Turn off tail of leftmost LED
					  Set_LED(i-3, 0, 0, 0);
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ed8      	subs	r0, r3, #3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	f7ff fca9 	bl	8001674 <Set_LED>
					  //Turn off tail of rightmost LED
					  Set_LED(19-i+3, 0, 0, 0);
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f1c3 0016 	rsb	r0, r3, #22
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	f7ff fca1 	bl	8001674 <Set_LED>
				  }
				  Set_Brightness(70);
 8001d32:	2046      	movs	r0, #70	; 0x46
 8001d34:	f7ff fccc 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001d38:	f7ff fd62 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (77);
 8001d3c:	204d      	movs	r0, #77	; 0x4d
 8001d3e:	f001 f9fd 	bl	800313c <HAL_Delay>
			  for (int i=0; i<10+3; i++)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	e7cd      	b.n	8001ce6 <main+0x352>
			  }
			  continousShotsobj.gunShotcontinous();
 8001d4a:	484f      	ldr	r0, [pc, #316]	; (8001e88 <main+0x4f4>)
 8001d4c:	f000 fe2e 	bl	80029ac <_ZN15shootingProcess14continousShots16gunShotcontinousEv>
			  Reloadobj.updateCurrentVolume(continousShotsobj.getCurrentVolume());
 8001d50:	484d      	ldr	r0, [pc, #308]	; (8001e88 <main+0x4f4>)
 8001d52:	f000 fcfd 	bl	8002750 <_ZN15shootingProcess5shoot16getCurrentVolumeEv>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	484c      	ldr	r0, [pc, #304]	; (8001e8c <main+0x4f8>)
 8001d5c:	f000 fc7e 	bl	800265c <_ZN16reloadingProcess6Reload19updateCurrentVolumeEj>
			  singleShotobj.updateCurrentVolume(continousShotsobj.getCurrentVolume());
 8001d60:	4849      	ldr	r0, [pc, #292]	; (8001e88 <main+0x4f4>)
 8001d62:	f000 fcf5 	bl	8002750 <_ZN15shootingProcess5shoot16getCurrentVolumeEv>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4849      	ldr	r0, [pc, #292]	; (8001e90 <main+0x4fc>)
 8001d6c:	f000 fcfb 	bl	8002766 <_ZN15shootingProcess5shoot19updateCurrentVolumeEj>
 8001d70:	e038      	b.n	8001de4 <main+0x450>
		  }
		  //If switch not yet pressed
		  else{
			  //LED reload motion (Breathing)
			  for (int i=0; i<20; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b13      	cmp	r3, #19
 8001d7a:	dc09      	bgt.n	8001d90 <main+0x3fc>
			  {
				  Set_LED(i, 255, 105, 100);			//Pink
 8001d7c:	2364      	movs	r3, #100	; 0x64
 8001d7e:	2269      	movs	r2, #105	; 0x69
 8001d80:	21ff      	movs	r1, #255	; 0xff
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff fc76 	bl	8001674 <Set_LED>
			  for (int i=0; i<20; i++)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e7f2      	b.n	8001d76 <main+0x3e2>
			  }
			  for (int i=0; i<20; i++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b13      	cmp	r3, #19
 8001d98:	dc0f      	bgt.n	8001dba <main+0x426>
			  {
				  Set_Brightness(3*i);
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fc94 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001da8:	f7ff fd2a 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8001dac:	2019      	movs	r0, #25
 8001dae:	f001 f9c5 	bl	800313c <HAL_Delay>
			  for (int i=0; i<20; i++)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3301      	adds	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	e7ec      	b.n	8001d94 <main+0x400>
			  }
			  for (int i=19; i>=0; i--)
 8001dba:	2313      	movs	r3, #19
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0f      	blt.n	8001de4 <main+0x450>
			  {
				  Set_Brightness(3*i);
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fc7f 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8001dd2:	f7ff fd15 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8001dd6:	2019      	movs	r0, #25
 8001dd8:	f001 f9b0 	bl	800313c <HAL_Delay>
			  for (int i=19; i>=0; i--)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e7ec      	b.n	8001dbe <main+0x42a>
			  }
		  }
	  }

	  GunState.Volume = Reloadobj.getCurrentVolume()*100/400;	//Update the volume, note: CurrentVolume from reloadobj, continousShotsobj, singleShotobj are same.
 8001de4:	4829      	ldr	r0, [pc, #164]	; (8001e8c <main+0x4f8>)
 8001de6:	f000 fc2e 	bl	8002646 <_ZN16reloadingProcess6Reload16getCurrentVolumeEv>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2264      	movs	r2, #100	; 0x64
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	4a28      	ldr	r2, [pc, #160]	; (8001e94 <main+0x500>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	09db      	lsrs	r3, r3, #7
 8001dfa:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <main+0x504>)
 8001dfc:	6013      	str	r3, [r2, #0]
	  /*Don't modify this END*/

	  /*Water level: bug testing code Start*/
	  GPIO_PinState pinUpperBottle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e02:	4826      	ldr	r0, [pc, #152]	; (8001e9c <main+0x508>)
 8001e04:	f002 f8a8 	bl	8003f58 <HAL_GPIO_ReadPin>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
	  GPIO_PinState pinLowerBottle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8001e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e10:	4822      	ldr	r0, [pc, #136]	; (8001e9c <main+0x508>)
 8001e12:	f002 f8a1 	bl	8003f58 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	71bb      	strb	r3, [r7, #6]
	  LCD_Clear(222,318-16*8,16,16*8,0xffff);
 8001e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	2210      	movs	r2, #16
 8001e24:	21be      	movs	r1, #190	; 0xbe
 8001e26:	20de      	movs	r0, #222	; 0xde
 8001e28:	f7ff faf3 	bl	8001412 <LCD_Clear>
	  if (pinUpperBottle == GPIO_PIN_RESET && pinLowerBottle == GPIO_PIN_RESET){
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <main+0x4b2>
 8001e32:	79bb      	ldrb	r3, [r7, #6]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <main+0x4b2>
		  LCD_DrawString(222,318,"Too much water");
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <main+0x50c>)
 8001e3a:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001e3e:	20de      	movs	r0, #222	; 0xde
 8001e40:	f7ff fbd2 	bl	80015e8 <LCD_DrawString>
 8001e44:	e01f      	b.n	8001e86 <main+0x4f2>
	  }
	  else if(pinUpperBottle == GPIO_PIN_SET && pinLowerBottle == GPIO_PIN_RESET){
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d109      	bne.n	8001e60 <main+0x4cc>
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <main+0x4cc>
		  LCD_DrawString(222,318,"Have some water");
 8001e52:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <main+0x510>)
 8001e54:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001e58:	20de      	movs	r0, #222	; 0xde
 8001e5a:	f7ff fbc5 	bl	80015e8 <LCD_DrawString>
 8001e5e:	e012      	b.n	8001e86 <main+0x4f2>
	  }
	  else if(pinUpperBottle == GPIO_PIN_SET && pinLowerBottle == GPIO_PIN_SET){
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d109      	bne.n	8001e7a <main+0x4e6>
 8001e66:	79bb      	ldrb	r3, [r7, #6]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <main+0x4e6>
		  LCD_DrawString(222,318,"Not enough water");
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <main+0x514>)
 8001e6e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001e72:	20de      	movs	r0, #222	; 0xde
 8001e74:	f7ff fbb8 	bl	80015e8 <LCD_DrawString>
 8001e78:	e005      	b.n	8001e86 <main+0x4f2>
	  }
	  else
		  LCD_DrawString(222,356,"Impossible");
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <main+0x518>)
 8001e7c:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8001e80:	20de      	movs	r0, #222	; 0xde
 8001e82:	f7ff fbb1 	bl	80015e8 <LCD_DrawString>

//	  LCD_DrawEllipse(120,160,75,25,BLACK);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001e86:	e59f      	b.n	80019c8 <main+0x34>
 8001e88:	20000228 	.word	0x20000228
 8001e8c:	20000208 	.word	0x20000208
 8001e90:	20000214 	.word	0x20000214
 8001e94:	51eb851f 	.word	0x51eb851f
 8001e98:	2000008c 	.word	0x2000008c
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	080076d4 	.word	0x080076d4
 8001ea4:	080076e4 	.word	0x080076e4
 8001ea8:	080076f4 	.word	0x080076f4
 8001eac:	08007708 	.word	0x08007708

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b090      	sub	sp, #64	; 0x40
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	f107 0318 	add.w	r3, r7, #24
 8001eba:	2228      	movs	r2, #40	; 0x28
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 ff46 	bl	8006d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef4:	f107 0318 	add.w	r3, r7, #24
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 f867 	bl	8003fcc <HAL_RCC_OscConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001f0e:	f000 fa31 	bl	8002374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f12:	230f      	movs	r3, #15
 8001f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f16:	2302      	movs	r3, #2
 8001f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 facf 	bl	80044d0 <HAL_RCC_ClockConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f42:	f000 fa17 	bl	8002374 <Error_Handler>
  }
}
 8001f46:	bf00      	nop
 8001f48:	3740      	adds	r7, #64	; 0x40
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b096      	sub	sp, #88	; 0x58
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
 8001f7e:	615a      	str	r2, [r3, #20]
 8001f80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2220      	movs	r2, #32
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fee1 	bl	8006d50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f8e:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001f90:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <MX_TIM1_Init+0x178>)
 8001f92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f94:	4b4b      	ldr	r3, [pc, #300]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001fa2:	2259      	movs	r2, #89	; 0x59
 8001fa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fac:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fb8:	4842      	ldr	r0, [pc, #264]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001fba:	f002 fc3c 	bl	8004836 <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001fce:	f000 f9d1 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4839      	ldr	r0, [pc, #228]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001fe0:	f003 f80a 	bl	8004ff8 <HAL_TIM_ConfigClockSource>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ff4:	f000 f9be 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ff8:	4832      	ldr	r0, [pc, #200]	; (80020c4 <MX_TIM1_Init+0x174>)
 8001ffa:	f002 fc6b 	bl	80048d4 <HAL_TIM_PWM_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800200e:	f000 f9b1 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800201a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800201e:	4619      	mov	r1, r3
 8002020:	4828      	ldr	r0, [pc, #160]	; (80020c4 <MX_TIM1_Init+0x174>)
 8002022:	f003 fc71 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8002036:	f000 f99d 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203a:	2360      	movs	r3, #96	; 0x60
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	4819      	ldr	r0, [pc, #100]	; (80020c4 <MX_TIM1_Init+0x174>)
 8002060:	f002 ff0c 	bl	8004e7c <HAL_TIM_PWM_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002074:	f000 f97e 	bl	8002374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800208c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002090:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	4619      	mov	r1, r3
 800209a:	480a      	ldr	r0, [pc, #40]	; (80020c4 <MX_TIM1_Init+0x174>)
 800209c:	f003 fca0 	bl	80059e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2301      	movne	r3, #1
 80020a8:	2300      	moveq	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80020b0:	f000 f960 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <MX_TIM1_Init+0x174>)
 80020b6:	f000 fe01 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 80020ba:	bf00      	nop
 80020bc:	3758      	adds	r7, #88	; 0x58
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200000a0 	.word	0x200000a0
 80020c8:	40012c00 	.word	0x40012c00

080020cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_DMA_Init+0x38>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <MX_DMA_Init+0x38>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6153      	str	r3, [r2, #20]
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_DMA_Init+0x38>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	200c      	movs	r0, #12
 80020f0:	f001 f91f 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020f4:	200c      	movs	r0, #12
 80020f6:	f001 f938 	bl	800336a <HAL_NVIC_EnableIRQ>

}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000

08002108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210e:	f107 0318 	add.w	r3, r7, #24
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800211c:	4b59      	ldr	r3, [pc, #356]	; (8002284 <MX_GPIO_Init+0x17c>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a58      	ldr	r2, [pc, #352]	; (8002284 <MX_GPIO_Init+0x17c>)
 8002122:	f043 0310 	orr.w	r3, r3, #16
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b56      	ldr	r3, [pc, #344]	; (8002284 <MX_GPIO_Init+0x17c>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b53      	ldr	r3, [pc, #332]	; (8002284 <MX_GPIO_Init+0x17c>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <MX_GPIO_Init+0x17c>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <MX_GPIO_Init+0x17c>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800214c:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <MX_GPIO_Init+0x17c>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a4c      	ldr	r2, [pc, #304]	; (8002284 <MX_GPIO_Init+0x17c>)
 8002152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b4a      	ldr	r3, [pc, #296]	; (8002284 <MX_GPIO_Init+0x17c>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002164:	4b47      	ldr	r3, [pc, #284]	; (8002284 <MX_GPIO_Init+0x17c>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a46      	ldr	r2, [pc, #280]	; (8002284 <MX_GPIO_Init+0x17c>)
 800216a:	f043 0320 	orr.w	r3, r3, #32
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b44      	ldr	r3, [pc, #272]	; (8002284 <MX_GPIO_Init+0x17c>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217c:	4b41      	ldr	r3, [pc, #260]	; (8002284 <MX_GPIO_Init+0x17c>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a40      	ldr	r2, [pc, #256]	; (8002284 <MX_GPIO_Init+0x17c>)
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <MX_GPIO_Init+0x17c>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219a:	483b      	ldr	r0, [pc, #236]	; (8002288 <MX_GPIO_Init+0x180>)
 800219c:	f001 fef3 	bl	8003f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80021a6:	4839      	ldr	r0, [pc, #228]	; (800228c <MX_GPIO_Init+0x184>)
 80021a8:	f001 feed 	bl	8003f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2102      	movs	r1, #2
 80021b0:	4837      	ldr	r0, [pc, #220]	; (8002290 <MX_GPIO_Init+0x188>)
 80021b2:	f001 fee8 	bl	8003f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b6:	2301      	movs	r3, #1
 80021b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <MX_GPIO_Init+0x18c>)
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 0318 	add.w	r3, r7, #24
 80021c6:	4619      	mov	r1, r3
 80021c8:	4833      	ldr	r0, [pc, #204]	; (8002298 <MX_GPIO_Init+0x190>)
 80021ca:	f001 fd31 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	4619      	mov	r1, r3
 80021e6:	4828      	ldr	r0, [pc, #160]	; (8002288 <MX_GPIO_Init+0x180>)
 80021e8:	f001 fd22 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <MX_GPIO_Init+0x18c>)
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	4619      	mov	r1, r3
 8002200:	4826      	ldr	r0, [pc, #152]	; (800229c <MX_GPIO_Init+0x194>)
 8002202:	f001 fd15 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002206:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002214:	f107 0318 	add.w	r3, r7, #24
 8002218:	4619      	mov	r1, r3
 800221a:	4820      	ldr	r0, [pc, #128]	; (800229c <MX_GPIO_Init+0x194>)
 800221c:	f001 fd08 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002226:	2301      	movs	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0318 	add.w	r3, r7, #24
 8002236:	4619      	mov	r1, r3
 8002238:	4814      	ldr	r0, [pc, #80]	; (800228c <MX_GPIO_Init+0x184>)
 800223a:	f001 fcf9 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002242:	2301      	movs	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	4619      	mov	r1, r3
 8002254:	480e      	ldr	r0, [pc, #56]	; (8002290 <MX_GPIO_Init+0x188>)
 8002256:	f001 fceb 	bl	8003c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2006      	movs	r0, #6
 8002260:	f001 f867 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002264:	2006      	movs	r0, #6
 8002266:	f001 f880 	bl	800336a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2017      	movs	r0, #23
 8002270:	f001 f85f 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002274:	2017      	movs	r0, #23
 8002276:	f001 f878 	bl	800336a <HAL_NVIC_EnableIRQ>

}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	40011400 	.word	0x40011400
 800228c:	40010c00 	.word	0x40010c00
 8002290:	40011800 	.word	0x40011800
 8002294:	10110000 	.word	0x10110000
 8002298:	40010800 	.word	0x40010800
 800229c:	40011000 	.word	0x40011000

080022a0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	615a      	str	r2, [r3, #20]
 80022b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022ba:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80022be:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <MX_FSMC_Init+0xcc>)
 80022c4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022da:	2210      	movs	r2, #16
 80022dc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <MX_FSMC_Init+0xc8>)
 80022f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022fc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <MX_FSMC_Init+0xc8>)
 8002300:	2200      	movs	r2, #0
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <MX_FSMC_Init+0xc8>)
 8002306:	2200      	movs	r2, #0
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <MX_FSMC_Init+0xc8>)
 800230c:	2200      	movs	r2, #0
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <MX_FSMC_Init+0xc8>)
 8002312:	2200      	movs	r2, #0
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002316:	230f      	movs	r3, #15
 8002318:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800231a:	230f      	movs	r3, #15
 800231c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800231e:	23ff      	movs	r3, #255	; 0xff
 8002320:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002322:	230f      	movs	r3, #15
 8002324:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002326:	2310      	movs	r3, #16
 8002328:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800232a:	2311      	movs	r3, #17
 800232c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	4619      	mov	r1, r3
 8002338:	480b      	ldr	r0, [pc, #44]	; (8002368 <MX_FSMC_Init+0xc8>)
 800233a:	f002 fa2f 	bl	800479c <HAL_SRAM_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 800234e:	f000 f811 	bl	8002374 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <MX_FSMC_Init+0xd0>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a06      	ldr	r2, [pc, #24]	; (8002370 <MX_FSMC_Init+0xd0>)
 8002358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235c:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800235e:	bf00      	nop
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000012c 	.word	0x2000012c
 800236c:	a0000104 	.word	0xa0000104
 8002370:	40010000 	.word	0x40010000

08002374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002378:	b672      	cpsid	i
}
 800237a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800237c:	e7fe      	b.n	800237c <Error_Handler+0x8>
	...

08002380 <_Z41__static_initialization_and_destruction_0ii>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

#ifdef __cplusplus
}
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d107      	bne.n	80023a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002396:	4293      	cmp	r3, r2
 8002398:	d102      	bne.n	80023a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
static WaterGun::currentInfoDisplay GunState;
 800239a:	4803      	ldr	r0, [pc, #12]	; (80023a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800239c:	f7fe fcf0 	bl	8000d80 <_ZN8WaterGun18currentInfoDisplayC1Ev>
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000008c 	.word	0x2000008c

080023ac <_GLOBAL__sub_I_htim1>:
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7ff ffe3 	bl	8002380 <_Z41__static_initialization_and_destruction_0ii>
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZN16reloadingProcess6ReloadC1Ejj>:
#include "stdio.h"
#include "infoAndStatus.hpp"

namespace reloadingProcess{

    Reload::Reload(const mililitres maxVol, mililitres curVol):currentVolume(curVol),maxVolume(maxVol){
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	609a      	str	r2, [r3, #8]
        triggerState = false;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
    }
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
	...

080023e8 <_ZN16reloadingProcess6Reload16reachedMaxAmountEv>:

    bool Reload::reachedMaxAmount(){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    	GPIO_PinState pinUpperBottle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 80023f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f4:	480e      	ldr	r0, [pc, #56]	; (8002430 <_ZN16reloadingProcess6Reload16reachedMaxAmountEv+0x48>)
 80023f6:	f001 fdaf 	bl	8003f58 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]
    	GPIO_PinState pinLowerBottle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 80023fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002402:	480b      	ldr	r0, [pc, #44]	; (8002430 <_ZN16reloadingProcess6Reload16reachedMaxAmountEv+0x48>)
 8002404:	f001 fda8 	bl	8003f58 <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	73bb      	strb	r3, [r7, #14]
    	if (pinUpperBottle == GPIO_PIN_RESET && pinLowerBottle == GPIO_PIN_RESET){
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <_ZN16reloadingProcess6Reload16reachedMaxAmountEv+0x3c>
 8002412:	7bbb      	ldrb	r3, [r7, #14]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <_ZN16reloadingProcess6Reload16reachedMaxAmountEv+0x3c>
    		this->currentVolume = this->maxVolume;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	605a      	str	r2, [r3, #4]
    		return true;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <_ZN16reloadingProcess6Reload16reachedMaxAmountEv+0x3e>
        }
    	return false;
 8002424:	2300      	movs	r3, #0
    }
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40011000 	.word	0x40011000

08002434 <_ZN16reloadingProcess6Reload12gunReloadingEv>:
    void Reload::gunReloading(){
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
    	while (!reachedMaxAmount() && triggerState){
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ffd3 	bl	80023e8 <_ZN16reloadingProcess6Reload16reachedMaxAmountEv>
 8002442:	4603      	mov	r3, r0
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <_ZN16reloadingProcess6Reload12gunReloadingEv+0x26>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <_ZN16reloadingProcess6Reload12gunReloadingEv+0x26>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <_ZN16reloadingProcess6Reload12gunReloadingEv+0x28>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d07e      	beq.n	800255e <_ZN16reloadingProcess6Reload12gunReloadingEv+0x12a>
			//Turn on the reloading water pump
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);		//In3 on
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002466:	4862      	ldr	r0, [pc, #392]	; (80025f0 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x1bc>)
 8002468:	f001 fd8d 	bl	8003f86 <HAL_GPIO_WritePin>
			//Turn off the shooting water pump
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);	//In1 off
 800246c:	2200      	movs	r2, #0
 800246e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002472:	485f      	ldr	r0, [pc, #380]	; (80025f0 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x1bc>)
 8002474:	f001 fd87 	bl	8003f86 <HAL_GPIO_WritePin>

			//LED strip animation
			//LED reload motion
			for (int i=0; i<10+3; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	dc30      	bgt.n	80024e4 <_ZN16reloadingProcess6Reload12gunReloadingEv+0xb0>
			{
			  if (i<10){
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	2b09      	cmp	r3, #9
 8002486:	dc0f      	bgt.n	80024a8 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x74>
				  //Turn on head of middleleft LED
				  Set_LED(9-i, 42, 254, 183);			//Cyan
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0009 	rsb	r0, r3, #9
 800248e:	23b7      	movs	r3, #183	; 0xb7
 8002490:	22fe      	movs	r2, #254	; 0xfe
 8002492:	212a      	movs	r1, #42	; 0x2a
 8002494:	f7ff f8ee 	bl	8001674 <Set_LED>
				  //Turn on head of middleright LED
				  Set_LED(10+i, 42, 254, 183);			//Cyan
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f103 000a 	add.w	r0, r3, #10
 800249e:	23b7      	movs	r3, #183	; 0xb7
 80024a0:	22fe      	movs	r2, #254	; 0xfe
 80024a2:	212a      	movs	r1, #42	; 0x2a
 80024a4:	f7ff f8e6 	bl	8001674 <Set_LED>
			  }
			  if ( (i-3) >= 0 ){
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	dd0e      	ble.n	80024cc <_ZN16reloadingProcess6Reload12gunReloadingEv+0x98>
				  //Turn on tail of middleleft LED
				  Set_LED(9-(i-3), 0, 0, 0);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f1c3 000c 	rsb	r0, r3, #12
 80024b4:	2300      	movs	r3, #0
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	f7ff f8db 	bl	8001674 <Set_LED>
				  //Turn off tail of middleright LED
				  Set_LED(10+(i-3), 0, 0, 0);
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	1dd8      	adds	r0, r3, #7
 80024c2:	2300      	movs	r3, #0
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	f7ff f8d4 	bl	8001674 <Set_LED>
			  }
			  Set_Brightness(60);
 80024cc:	203c      	movs	r0, #60	; 0x3c
 80024ce:	f7ff f8ff 	bl	80016d0 <Set_Brightness>
			  WS2812B_LED_Data_Send();
 80024d2:	f7ff f995 	bl	8001800 <WS2812B_LED_Data_Send>
			  HAL_Delay (19);
 80024d6:	2013      	movs	r0, #19
 80024d8:	f000 fe30 	bl	800313c <HAL_Delay>
			for (int i=0; i<10+3; i++)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3301      	adds	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e7cb      	b.n	800247c <_ZN16reloadingProcess6Reload12gunReloadingEv+0x48>
			}
			//pump for 19*13 = 247 ms

			//Update currentVolume
			int inputflow_rate = 1800; 			//ml/min	come from testing
 80024e4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80024e8:	60fb      	str	r3, [r7, #12]
			this->currentVolume += inputflow_rate/(60*(1000/247));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4940      	ldr	r1, [pc, #256]	; (80025f4 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x1c0>)
 80024f2:	fb81 0103 	smull	r0, r1, r1, r3
 80024f6:	4419      	add	r1, r3
 80024f8:	11c9      	asrs	r1, r1, #7
 80024fa:	17db      	asrs	r3, r3, #31
 80024fc:	1acb      	subs	r3, r1, r3
 80024fe:	441a      	add	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	605a      	str	r2, [r3, #4]
			if (this->currentVolume > maxVolume){
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	d903      	bls.n	8002518 <_ZN16reloadingProcess6Reload12gunReloadingEv+0xe4>
				this->currentVolume = maxVolume;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	605a      	str	r2, [r3, #4]
			}
			/*Test: Not favourable but allow dynamically changing the water level*/
			char toPrint[4]; //This line is added by zlashc
	        WaterGun::itos(this->currentVolume*100/400,toPrint);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2264      	movs	r2, #100	; 0x64
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x1c4>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	09db      	lsrs	r3, r3, #7
 800252a:	461a      	mov	r2, r3
 800252c:	f107 0308 	add.w	r3, r7, #8
 8002530:	4619      	mov	r1, r3
 8002532:	4610      	mov	r0, r2
 8002534:	f7fe fd26 	bl	8000f84 <itos>
	        LCD_Clear(35,271,18,48,0xffff);
 8002538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2330      	movs	r3, #48	; 0x30
 8002540:	2212      	movs	r2, #18
 8002542:	f240 110f 	movw	r1, #271	; 0x10f
 8002546:	2023      	movs	r0, #35	; 0x23
 8002548:	f7fe ff63 	bl	8001412 <LCD_Clear>
	        LCD_DrawString(35,318,toPrint);
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	461a      	mov	r2, r3
 8002552:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002556:	2023      	movs	r0, #35	; 0x23
 8002558:	f7ff f846 	bl	80015e8 <LCD_DrawString>
    	while (!reachedMaxAmount() && triggerState){
 800255c:	e76e      	b.n	800243c <_ZN16reloadingProcess6Reload12gunReloadingEv+0x8>
			/*End*/

		}
    	//Turn off the reloading water pump
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);		//In3 off
 800255e:	2200      	movs	r2, #0
 8002560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002564:	4822      	ldr	r0, [pc, #136]	; (80025f0 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x1bc>)
 8002566:	f001 fd0e 	bl	8003f86 <HAL_GPIO_WritePin>

    	if (reachedMaxAmount()){
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ff3c 	bl	80023e8 <_ZN16reloadingProcess6Reload16reachedMaxAmountEv>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d038      	beq.n	80025e8 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x1b4>
    		//Remind that water is full (LED set to green)
			//LED warning motion (Breathing)
			for (int i=0; i<20; i++)
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b13      	cmp	r3, #19
 800257e:	dc09      	bgt.n	8002594 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x160>
			{
				Set_LED(i, 20, 255, 40);			//Green
 8002580:	2328      	movs	r3, #40	; 0x28
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	2114      	movs	r1, #20
 8002586:	69b8      	ldr	r0, [r7, #24]
 8002588:	f7ff f874 	bl	8001674 <Set_LED>
			for (int i=0; i<20; i++)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3301      	adds	r3, #1
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e7f2      	b.n	800257a <_ZN16reloadingProcess6Reload12gunReloadingEv+0x146>
			}
			for (int i=0; i<20; i++)
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b13      	cmp	r3, #19
 800259c:	dc0f      	bgt.n	80025be <_ZN16reloadingProcess6Reload12gunReloadingEv+0x18a>
			{
			  Set_Brightness(3*i);
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f892 	bl	80016d0 <Set_Brightness>
			  WS2812B_LED_Data_Send();
 80025ac:	f7ff f928 	bl	8001800 <WS2812B_LED_Data_Send>
			  HAL_Delay (25);
 80025b0:	2019      	movs	r0, #25
 80025b2:	f000 fdc3 	bl	800313c <HAL_Delay>
			for (int i=0; i<20; i++)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e7ec      	b.n	8002598 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x164>
			}
			for (int i=19; i>=0; i--)
 80025be:	2313      	movs	r3, #19
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0f      	blt.n	80025e8 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x1b4>
			{
			  Set_Brightness(3*i);
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f87d 	bl	80016d0 <Set_Brightness>
			  WS2812B_LED_Data_Send();
 80025d6:	f7ff f913 	bl	8001800 <WS2812B_LED_Data_Send>
			  HAL_Delay (25);
 80025da:	2019      	movs	r0, #25
 80025dc:	f000 fdae 	bl	800313c <HAL_Delay>
			for (int i=19; i>=0; i--)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e7ec      	b.n	80025c2 <_ZN16reloadingProcess6Reload12gunReloadingEv+0x18e>
			}

    	}
    }
 80025e8:	bf00      	nop
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40010c00 	.word	0x40010c00
 80025f4:	88888889 	.word	0x88888889
 80025f8:	51eb851f 	.word	0x51eb851f

080025fc <_ZN16reloadingProcess6Reload15setTriggerStateEb>:
    void Reload::setTriggerState(bool on){
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
    	if (on){
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <_ZN16reloadingProcess6Reload15setTriggerStateEb+0x1a>
    		this->triggerState = true;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
    	}
    	else{
    		this->triggerState = false;
    	}
    }
 8002614:	e002      	b.n	800261c <_ZN16reloadingProcess6Reload15setTriggerStateEb+0x20>
    		this->triggerState = false;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    }
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <_ZN16reloadingProcess6Reload15getTriggerStateEv>:
    bool Reload::getTriggerState(){
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
    	return triggerState==true;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
    }
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <_ZN16reloadingProcess6Reload16getCurrentVolumeEv>:
    mililitres Reload::getCurrentVolume(){
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
    	return this->currentVolume;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
    }
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <_ZN16reloadingProcess6Reload19updateCurrentVolumeEj>:
    void Reload::updateCurrentVolume(mililitres curVol){
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
    	this->currentVolume = curVol;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	605a      	str	r2, [r3, #4]
    }
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <_ZN15shootingProcess5shootC1Ejji>:
#include <stdio.h>
#include "infoAndStatus.hpp"

namespace shootingProcess{

    shoot::shoot(mililitres curVol,const HAL_Ticks pT,const int waterOutFlow):pulseTime(pT),waterFlowRate(waterOutFlow),currentVolume(curVol){
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	609a      	str	r2, [r3, #8]
        triggerState = false;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	731a      	strb	r2, [r3, #12]
    }
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <_ZN15shootingProcess5shoot11enoughWaterEv>:

    bool shoot::enoughWater(){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    	GPIO_PinState pinUpperBottle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 80026b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <_ZN15shootingProcess5shoot11enoughWaterEv+0x44>)
 80026b6:	f001 fc4f 	bl	8003f58 <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState pinLowerBottle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 80026be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026c2:	480a      	ldr	r0, [pc, #40]	; (80026ec <_ZN15shootingProcess5shoot11enoughWaterEv+0x44>)
 80026c4:	f001 fc48 	bl	8003f58 <HAL_GPIO_ReadPin>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73bb      	strb	r3, [r7, #14]
		if (pinUpperBottle == GPIO_PIN_SET && pinLowerBottle == GPIO_PIN_SET){
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <_ZN15shootingProcess5shoot11enoughWaterEv+0x3a>
 80026d2:	7bbb      	ldrb	r3, [r7, #14]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d104      	bne.n	80026e2 <_ZN15shootingProcess5shoot11enoughWaterEv+0x3a>
			this->currentVolume = 0;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
			return false;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <_ZN15shootingProcess5shoot11enoughWaterEv+0x3c>
		}
		return true;
 80026e2:	2301      	movs	r3, #1
    }
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40011000 	.word	0x40011000

080026f0 <_ZN15shootingProcess5shoot15setTriggerStateEb>:

    void shoot::setTriggerState(bool on){
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
    	if (on){
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <_ZN15shootingProcess5shoot15setTriggerStateEb+0x1a>
    		this->triggerState = true;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	731a      	strb	r2, [r3, #12]
    	}
    	else{
    		this->triggerState = false;
    	}
    }
 8002708:	e002      	b.n	8002710 <_ZN15shootingProcess5shoot15setTriggerStateEb+0x20>
    		this->triggerState = false;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	731a      	strb	r2, [r3, #12]
    }
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <_ZN15shootingProcess5shoot15getTriggerStateEv>:
    bool shoot::getTriggerState(){
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
    	return triggerState==true;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7b1b      	ldrb	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
    }
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <_ZN15shootingProcess5shoot12getPulseTimeEv>:
    HAL_Ticks shoot::getPulseTime(){
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
		return this->pulseTime;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
	}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <_ZN15shootingProcess5shoot16getCurrentVolumeEv>:
    mililitres shoot::getCurrentVolume(){
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    	return this->currentVolume;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
    }
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <_ZN15shootingProcess5shoot19updateCurrentVolumeEj>:
    void shoot::updateCurrentVolume(mililitres curVol){
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
    	this->currentVolume = curVol;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	609a      	str	r2, [r3, #8]
    }
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <_ZN15shootingProcess10singleShotC1Ejjji>:
    singleShot::singleShot(mililitres curVol, const HAL_Ticks pT, const HAL_Ticks cd, const int waterOutFlow):shoot(curVol,pT,waterOutFlow),cooldownTime(cd){
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	f7ff ff6e 	bl	8002676 <_ZN15shootingProcess5shootC1Ejji>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	611a      	str	r2, [r3, #16]
    }
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <_ZN15shootingProcess10singleShot11gunShotonceEv>:
    void singleShot::gunShotonce(){
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	6078      	str	r0, [r7, #4]
    	if(getTriggerState()){
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffaf 	bl	800271a <_ZN15shootingProcess5shoot15getTriggerStateEv>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80d4 	beq.w	800296c <_ZN15shootingProcess10singleShot11gunShotonceEv+0x1c0>
    		if(enoughWater()){
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff6e 	bl	80026a8 <_ZN15shootingProcess5shoot11enoughWaterEv>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8093 	beq.w	80028fa <_ZN15shootingProcess10singleShot11gunShotonceEv+0x14e>
    			//Turn off the reloading water pump
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);		//In3 off
 80027d4:	2200      	movs	r2, #0
 80027d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027da:	4866      	ldr	r0, [pc, #408]	; (8002974 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x1c8>)
 80027dc:	f001 fbd3 	bl	8003f86 <HAL_GPIO_WritePin>
				//Turn on the shooting water pump
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);			//In1 on
 80027e0:	2201      	movs	r2, #1
 80027e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e6:	4863      	ldr	r0, [pc, #396]	; (8002974 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x1c8>)
 80027e8:	f001 fbcd 	bl	8003f86 <HAL_GPIO_WritePin>

				//LED strip animation
				//LED shoot out motion
				for (int i=0; i<10+3; i++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	dc37      	bgt.n	8002866 <_ZN15shootingProcess10singleShot11gunShotonceEv+0xba>
				{
				  if (i<10){
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	dc0d      	bgt.n	8002818 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x6c>
					  //Turn on head of leftmost LED
					  Set_LED(i, 138, 43, 226);			//Blue-purple
 80027fc:	23e2      	movs	r3, #226	; 0xe2
 80027fe:	222b      	movs	r2, #43	; 0x2b
 8002800:	218a      	movs	r1, #138	; 0x8a
 8002802:	69f8      	ldr	r0, [r7, #28]
 8002804:	f7fe ff36 	bl	8001674 <Set_LED>
					  //Turn on head of rightmost LED
					  Set_LED(19-i, 138, 43, 226);		//Blue-purple
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1c3 0013 	rsb	r0, r3, #19
 800280e:	23e2      	movs	r3, #226	; 0xe2
 8002810:	222b      	movs	r2, #43	; 0x2b
 8002812:	218a      	movs	r1, #138	; 0x8a
 8002814:	f7fe ff2e 	bl	8001674 <Set_LED>
				  }
				  if ( (i-3) >= 0 ){
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b02      	cmp	r3, #2
 800281c:	dd0e      	ble.n	800283c <_ZN15shootingProcess10singleShot11gunShotonceEv+0x90>
					  //Turn off tail of leftmost LED
					  Set_LED(i-3, 0, 0, 0);
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	1ed8      	subs	r0, r3, #3
 8002822:	2300      	movs	r3, #0
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	f7fe ff24 	bl	8001674 <Set_LED>
					  //Turn off tail of rightmost LED
					  Set_LED(19-i+3, 0, 0, 0);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0016 	rsb	r0, r3, #22
 8002832:	2300      	movs	r3, #0
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	f7fe ff1c 	bl	8001674 <Set_LED>
				  }
				  Set_Brightness(70);
 800283c:	2046      	movs	r0, #70	; 0x46
 800283e:	f7fe ff47 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8002842:	f7fe ffdd 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (getPulseTime()/13);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff76 	bl	800273a <_ZN15shootingProcess5shoot12getPulseTimeEv>
 800284e:	4603      	mov	r3, r0
 8002850:	4a49      	ldr	r2, [pc, #292]	; (8002978 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x1cc>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fc6f 	bl	800313c <HAL_Delay>
				for (int i=0; i<10+3; i++)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	e7c4      	b.n	80027f0 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x44>
				}

				//pump for getPulseTime()
				//Update currentVolume
				int Vafter = this->currentVolume - waterFlowRate/(60*(1000/getPulseTime()));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689c      	ldr	r4, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	461d      	mov	r5, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff61 	bl	800273a <_ZN15shootingProcess5shoot12getPulseTimeEv>
 8002878:	4603      	mov	r3, r0
 800287a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800287e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	fbb5 f3f3 	udiv	r3, r5, r3
 800288e:	1ae3      	subs	r3, r4, r3
 8002890:	60fb      	str	r3, [r7, #12]
				this->currentVolume = (Vafter < 0 )? 0 : Vafter;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	609a      	str	r2, [r3, #8]

				/*Test: Not favourable but allow dynamically changing the water level*/
				char toPrint[4]; //This line is added by zlashc
		        WaterGun::itos(this->currentVolume*100/400,toPrint);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2264      	movs	r2, #100	; 0x64
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	4a34      	ldr	r2, [pc, #208]	; (800297c <_ZN15shootingProcess10singleShot11gunShotonceEv+0x1d0>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	09db      	lsrs	r3, r3, #7
 80028b0:	461a      	mov	r2, r3
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7fe fb63 	bl	8000f84 <itos>
		        LCD_Clear(35,271,18,48,0xffff);
 80028be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2330      	movs	r3, #48	; 0x30
 80028c6:	2212      	movs	r2, #18
 80028c8:	f240 110f 	movw	r1, #271	; 0x10f
 80028cc:	2023      	movs	r0, #35	; 0x23
 80028ce:	f7fe fda0 	bl	8001412 <LCD_Clear>
		        LCD_DrawString(35,318,toPrint);
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80028dc:	2023      	movs	r0, #35	; 0x23
 80028de:	f7fe fe83 	bl	80015e8 <LCD_DrawString>
				/*End*/

				//Turn off the shooting water pump
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);		//In1 off
 80028e2:	2200      	movs	r2, #0
 80028e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e8:	4822      	ldr	r0, [pc, #136]	; (8002974 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x1c8>)
 80028ea:	f001 fb4c 	bl	8003f86 <HAL_GPIO_WritePin>
				HAL_Delay(this->cooldownTime);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fc22 	bl	800313c <HAL_Delay>
				  WS2812B_LED_Data_Send();
				  HAL_Delay (25);
				}
    		}
    	}
    }
 80028f8:	e038      	b.n	800296c <_ZN15shootingProcess10singleShot11gunShotonceEv+0x1c0>
				for (int i=0; i<20; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b13      	cmp	r3, #19
 8002902:	dc09      	bgt.n	8002918 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x16c>
					Set_LED(i, 255, 20, 40);			//RED
 8002904:	2328      	movs	r3, #40	; 0x28
 8002906:	2214      	movs	r2, #20
 8002908:	21ff      	movs	r1, #255	; 0xff
 800290a:	69b8      	ldr	r0, [r7, #24]
 800290c:	f7fe feb2 	bl	8001674 <Set_LED>
				for (int i=0; i<20; i++)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	3301      	adds	r3, #1
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	e7f2      	b.n	80028fe <_ZN15shootingProcess10singleShot11gunShotonceEv+0x152>
				for (int i=0; i<20; i++)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b13      	cmp	r3, #19
 8002920:	dc0f      	bgt.n	8002942 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x196>
				  Set_Brightness(3*i);
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fed0 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8002930:	f7fe ff66 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8002934:	2019      	movs	r0, #25
 8002936:	f000 fc01 	bl	800313c <HAL_Delay>
				for (int i=0; i<20; i++)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e7ec      	b.n	800291c <_ZN15shootingProcess10singleShot11gunShotonceEv+0x170>
				for (int i=19; i>=0; i--)
 8002942:	2313      	movs	r3, #19
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0f      	blt.n	800296c <_ZN15shootingProcess10singleShot11gunShotonceEv+0x1c0>
				  Set_Brightness(3*i);
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe febb 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 800295a:	f7fe ff51 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 800295e:	2019      	movs	r0, #25
 8002960:	f000 fbec 	bl	800313c <HAL_Delay>
				for (int i=19; i>=0; i--)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	3b01      	subs	r3, #1
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e7ec      	b.n	8002946 <_ZN15shootingProcess10singleShot11gunShotonceEv+0x19a>
    }
 800296c:	bf00      	nop
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bdb0      	pop	{r4, r5, r7, pc}
 8002974:	40010c00 	.word	0x40010c00
 8002978:	4ec4ec4f 	.word	0x4ec4ec4f
 800297c:	51eb851f 	.word	0x51eb851f

08002980 <_ZN15shootingProcess14continousShotsC1Ejjji>:

    continousShots::continousShots(mililitres curVol, const HAL_Ticks pT, const HAL_Ticks delay, const int waterOutFlow):shoot(curVol,pT,waterOutFlow),delayBetween2Pulse(delay){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	f7ff fe6e 	bl	8002676 <_ZN15shootingProcess5shootC1Ejji>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	611a      	str	r2, [r3, #16]
    }
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <_ZN15shootingProcess14continousShots16gunShotcontinousEv>:

    void continousShots::gunShotcontinous(){
 80029ac:	b5b0      	push	{r4, r5, r7, lr}
 80029ae:	b08c      	sub	sp, #48	; 0x30
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	6078      	str	r0, [r7, #4]
    	while(getTriggerState()){
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff feaf 	bl	800271a <_ZN15shootingProcess5shoot15getTriggerStateEv>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80f5 	beq.w	8002bae <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x202>
    		if(enoughWater()){
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fe6e 	bl	80026a8 <_ZN15shootingProcess5shoot11enoughWaterEv>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8091 	beq.w	8002af6 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x14a>
    			//Turn off the reloading water pump
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);		//In3 off
 80029d4:	2200      	movs	r2, #0
 80029d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029da:	4877      	ldr	r0, [pc, #476]	; (8002bb8 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x20c>)
 80029dc:	f001 fad3 	bl	8003f86 <HAL_GPIO_WritePin>
				//Turn on the shooting water pump
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);			//In1 on
 80029e0:	2201      	movs	r2, #1
 80029e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029e6:	4874      	ldr	r0, [pc, #464]	; (8002bb8 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x20c>)
 80029e8:	f001 facd 	bl	8003f86 <HAL_GPIO_WritePin>

				//LED strip animation
				//LED shoot out motion
				for (int i=0; i<10+3; i++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	dc35      	bgt.n	8002a62 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0xb6>
				{
				  if (i<10){
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	dc0b      	bgt.n	8002a14 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x68>
					  //Turn on head of leftmost LED
					  Set_LED(i, 255, 105, 100);			//Pink
 80029fc:	2364      	movs	r3, #100	; 0x64
 80029fe:	2269      	movs	r2, #105	; 0x69
 8002a00:	21ff      	movs	r1, #255	; 0xff
 8002a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a04:	f7fe fe36 	bl	8001674 <Set_LED>
					  //Turn on head of rightmost LED
					  Set_LED(i, 255, 105, 100);			//Pink
 8002a08:	2364      	movs	r3, #100	; 0x64
 8002a0a:	2269      	movs	r2, #105	; 0x69
 8002a0c:	21ff      	movs	r1, #255	; 0xff
 8002a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a10:	f7fe fe30 	bl	8001674 <Set_LED>
				  }
				  if ( (i-3) >= 0 ){
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	dd0e      	ble.n	8002a38 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x8c>
					  //Turn off tail of leftmost LED
					  Set_LED(i-3, 0, 0, 0);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1ed8      	subs	r0, r3, #3
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	f7fe fe26 	bl	8001674 <Set_LED>
					  //Turn off tail of rightmost LED
					  Set_LED(19-i+3, 0, 0, 0);
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	f1c3 0016 	rsb	r0, r3, #22
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	f7fe fe1e 	bl	8001674 <Set_LED>
				  }
				  Set_Brightness(70);
 8002a38:	2046      	movs	r0, #70	; 0x46
 8002a3a:	f7fe fe49 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8002a3e:	f7fe fedf 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (getPulseTime()/13);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fe78 	bl	800273a <_ZN15shootingProcess5shoot12getPulseTimeEv>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x210>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fb71 	bl	800313c <HAL_Delay>
				for (int i=0; i<10+3; i++)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	e7c6      	b.n	80029f0 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x44>
				}

				//pump for getPulseTime()
				//Update currentVolume
				int Vafter = this->currentVolume - waterFlowRate/(60*(1000/getPulseTime()));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689c      	ldr	r4, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fe63 	bl	800273a <_ZN15shootingProcess5shoot12getPulseTimeEv>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	fbb5 f3f3 	udiv	r3, r5, r3
 8002a8a:	1ae3      	subs	r3, r4, r3
 8002a8c:	617b      	str	r3, [r7, #20]
				this->currentVolume = (Vafter < 0 )? 0 : Vafter;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]

				/*Test: Not favourable but allow dynamically changing the water level*/
				char toPrint[4]; //This line is added by zlashc
		        WaterGun::itos(this->currentVolume*100/400,toPrint);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2264      	movs	r2, #100	; 0x64
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	4a46      	ldr	r2, [pc, #280]	; (8002bc0 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x214>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	09db      	lsrs	r3, r3, #7
 8002aac:	461a      	mov	r2, r3
 8002aae:	f107 0310 	add.w	r3, r7, #16
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f7fe fa65 	bl	8000f84 <itos>
		        LCD_Clear(35,271,18,48,0xffff);
 8002aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2330      	movs	r3, #48	; 0x30
 8002ac2:	2212      	movs	r2, #18
 8002ac4:	f240 110f 	movw	r1, #271	; 0x10f
 8002ac8:	2023      	movs	r0, #35	; 0x23
 8002aca:	f7fe fca2 	bl	8001412 <LCD_Clear>
		        LCD_DrawString(35,318,toPrint);
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002ad8:	2023      	movs	r0, #35	; 0x23
 8002ada:	f7fe fd85 	bl	80015e8 <LCD_DrawString>
				/*End*/

				//Turn off the shooting water pump
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);		//In3 off
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ae4:	4834      	ldr	r0, [pc, #208]	; (8002bb8 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x20c>)
 8002ae6:	f001 fa4e 	bl	8003f86 <HAL_GPIO_WritePin>
				HAL_Delay(this->delayBetween2Pulse);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fb24 	bl	800313c <HAL_Delay>
 8002af4:	e75e      	b.n	80029b4 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x8>
    		}
    		else{
    			//Remind to refill water (LED set to red)
    			//LED warning motion (Breathing)
				for (int i=0; i<20; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2b13      	cmp	r3, #19
 8002afe:	dc09      	bgt.n	8002b14 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x168>
				{
					Set_LED(i, 255, 20, 40);			//RED
 8002b00:	2328      	movs	r3, #40	; 0x28
 8002b02:	2214      	movs	r2, #20
 8002b04:	21ff      	movs	r1, #255	; 0xff
 8002b06:	6a38      	ldr	r0, [r7, #32]
 8002b08:	f7fe fdb4 	bl	8001674 <Set_LED>
				for (int i=0; i<20; i++)
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	e7f2      	b.n	8002afa <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x14e>
				}
				for (int i=0; i<20; i++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b13      	cmp	r3, #19
 8002b1c:	dc0f      	bgt.n	8002b3e <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x192>
				{
				  Set_Brightness(3*i);
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fdd2 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8002b2c:	f7fe fe68 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8002b30:	2019      	movs	r0, #25
 8002b32:	f000 fb03 	bl	800313c <HAL_Delay>
				for (int i=0; i<20; i++)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	e7ec      	b.n	8002b18 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x16c>
				}
				for (int i=19; i>=0; i--)
 8002b3e:	2313      	movs	r3, #19
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0f      	blt.n	8002b68 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x1bc>
				{
				  Set_Brightness(3*i);
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fdbd 	bl	80016d0 <Set_Brightness>
				  WS2812B_LED_Data_Send();
 8002b56:	f7fe fe53 	bl	8001800 <WS2812B_LED_Data_Send>
				  HAL_Delay (25);
 8002b5a:	2019      	movs	r0, #25
 8002b5c:	f000 faee 	bl	800313c <HAL_Delay>
				for (int i=19; i>=0; i--)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	e7ec      	b.n	8002b42 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x196>
				}

				/*Test: Not favourable but allow dynamically changing the water level*/
				char toPrint[4]; //This line is added by zlashc
		        WaterGun::itos(this->currentVolume*100/400,toPrint);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2264      	movs	r2, #100	; 0x64
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x214>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	09db      	lsrs	r3, r3, #7
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f107 030c 	add.w	r3, r7, #12
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f7fe f9fe 	bl	8000f84 <itos>
		        LCD_Clear(35,271,18,48,0xffff);
 8002b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2330      	movs	r3, #48	; 0x30
 8002b90:	2212      	movs	r2, #18
 8002b92:	f240 110f 	movw	r1, #271	; 0x10f
 8002b96:	2023      	movs	r0, #35	; 0x23
 8002b98:	f7fe fc3b 	bl	8001412 <LCD_Clear>
		        LCD_DrawString(35,318,toPrint);
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002ba6:	2023      	movs	r0, #35	; 0x23
 8002ba8:	f7fe fd1e 	bl	80015e8 <LCD_DrawString>
    	while(getTriggerState()){
 8002bac:	e702      	b.n	80029b4 <_ZN15shootingProcess14continousShots16gunShotcontinousEv+0x8>
				/*End*/
    		}
    	}
    }
 8002bae:	bf00      	nop
 8002bb0:	3728      	adds	r7, #40	; 0x28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40010c00 	.word	0x40010c00
 8002bbc:	4ec4ec4f 	.word	0x4ec4ec4f
 8002bc0:	51eb851f 	.word	0x51eb851f

08002bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_MspInit+0x5c>)
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_MspInit+0x5c>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6193      	str	r3, [r2, #24]
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_MspInit+0x5c>)
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_MspInit+0x5c>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_MspInit+0x5c>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	61d3      	str	r3, [r2, #28]
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_MspInit+0x5c>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_MspInit+0x60>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <HAL_MspInit+0x60>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40010000 	.word	0x40010000

08002c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <HAL_TIM_Base_MspInit+0x84>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d133      	bne.n	8002ca2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_TIM_Base_MspInit+0x88>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <HAL_TIM_Base_MspInit+0x88>)
 8002c40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c44:	6193      	str	r3, [r2, #24]
 8002c46:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_TIM_Base_MspInit+0x88>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_TIM_Base_MspInit+0x90>)
 8002c56:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c70:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c78:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002c86:	480b      	ldr	r0, [pc, #44]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c88:	f000 fb8a 	bl	80033a0 <HAL_DMA_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8002c92:	f7ff fb6f 	bl	8002374 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c9c:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <HAL_TIM_Base_MspInit+0x8c>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	200000e8 	.word	0x200000e8
 8002cb8:	4002001c 	.word	0x4002001c

08002cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <HAL_TIM_MspPostInit+0x5c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d118      	bne.n	8002d0e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_TIM_MspPostInit+0x60>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_TIM_MspPostInit+0x60>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	6193      	str	r3, [r2, #24]
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_TIM_MspPostInit+0x60>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4619      	mov	r1, r3
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <HAL_TIM_MspPostInit+0x64>)
 8002d0a:	f000 ff91 	bl	8003c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d0e:	bf00      	nop
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40010800 	.word	0x40010800

08002d24 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_FSMC_MspInit+0x78>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d129      	bne.n	8002d94 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_FSMC_MspInit+0x78>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_FSMC_MspInit+0x7c>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <HAL_FSMC_MspInit+0x7c>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6153      	str	r3, [r2, #20]
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_FSMC_MspInit+0x7c>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002d5e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002d62:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	4619      	mov	r1, r3
 8002d72:	480c      	ldr	r0, [pc, #48]	; (8002da4 <HAL_FSMC_MspInit+0x80>)
 8002d74:	f000 ff5c 	bl	8003c30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002d78:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002d7c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4806      	ldr	r0, [pc, #24]	; (8002da8 <HAL_FSMC_MspInit+0x84>)
 8002d8e:	f000 ff4f 	bl	8003c30 <HAL_GPIO_Init>
 8002d92:	e000      	b.n	8002d96 <HAL_FSMC_MspInit+0x72>
    return;
 8002d94:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200001f0 	.word	0x200001f0
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40011800 	.word	0x40011800
 8002da8:	40011400 	.word	0x40011400

08002dac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002db4:	f7ff ffb6 	bl	8002d24 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <NMI_Handler+0x4>

08002dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <HardFault_Handler+0x4>

08002dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <MemManage_Handler+0x4>

08002dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd6:	e7fe      	b.n	8002dd6 <BusFault_Handler+0x4>

08002dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ddc:	e7fe      	b.n	8002ddc <UsageFault_Handler+0x4>

08002dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e06:	f000 f97d 	bl	8003104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <DMA1_Channel2_IRQHandler+0x10>)
 8002e16:	f000 fca1 	bl	800375c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200000e8 	.word	0x200000e8

08002e24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <EXTI9_5_IRQHandler+0xf0>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d065      	beq.n	8002f0c <EXTI9_5_IRQHandler+0xe8>
	{
		/*Switch code BEGIN*/

		//Switch is pressed action
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) ==  GPIO_PIN_RESET){
 8002e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e44:	4834      	ldr	r0, [pc, #208]	; (8002f18 <EXTI9_5_IRQHandler+0xf4>)
 8002e46:	f001 f887 	bl	8003f58 <HAL_GPIO_ReadPin>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d028      	beq.n	8002eac <EXTI9_5_IRQHandler+0x88>

			//Check current gun mode
			WaterGun::STATUS curStatus = infoDisplay.status;
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <EXTI9_5_IRQHandler+0xf8>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	603b      	str	r3, [r7, #0]
			if (curStatus == WaterGun::STATUS::OFF_STATE){
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d013      	beq.n	8002e8e <EXTI9_5_IRQHandler+0x6a>
				//Do nothing
			}
			else if (curStatus == WaterGun::STATUS::RELOAD_STATE){
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d104      	bne.n	8002e76 <EXTI9_5_IRQHandler+0x52>
				Reloadobj.setTriggerState(true);
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	482c      	ldr	r0, [pc, #176]	; (8002f20 <EXTI9_5_IRQHandler+0xfc>)
 8002e70:	f7ff fbc4 	bl	80025fc <_ZN16reloadingProcess6Reload15setTriggerStateEb>
 8002e74:	e00b      	b.n	8002e8e <EXTI9_5_IRQHandler+0x6a>
			  }
			else if (curStatus == WaterGun::STATUS::SINGLE_SHOOT_STATE){
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d104      	bne.n	8002e86 <EXTI9_5_IRQHandler+0x62>
				/*Add here*/
				singleShotobj.setTriggerState(true);
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4829      	ldr	r0, [pc, #164]	; (8002f24 <EXTI9_5_IRQHandler+0x100>)
 8002e80:	f7ff fc36 	bl	80026f0 <_ZN15shootingProcess5shoot15setTriggerStateEb>
 8002e84:	e003      	b.n	8002e8e <EXTI9_5_IRQHandler+0x6a>
			}
			else{								//CONTINIOUS_SHOOT_STATE
				/*Add here*/
				continousShotsobj.setTriggerState(true);
 8002e86:	2101      	movs	r1, #1
 8002e88:	4827      	ldr	r0, [pc, #156]	; (8002f28 <EXTI9_5_IRQHandler+0x104>)
 8002e8a:	f7ff fc31 	bl	80026f0 <_ZN15shootingProcess5shoot15setTriggerStateEb>
			}

			//Print
			LCD_Clear(222,84-10*8,16,10*8,0xffff);
 8002e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	2350      	movs	r3, #80	; 0x50
 8002e96:	2210      	movs	r2, #16
 8002e98:	2104      	movs	r1, #4
 8002e9a:	20de      	movs	r0, #222	; 0xde
 8002e9c:	f7fe fab9 	bl	8001412 <LCD_Clear>
			LCD_DrawString(222,84,"Switch on");
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <EXTI9_5_IRQHandler+0x108>)
 8002ea2:	2154      	movs	r1, #84	; 0x54
 8002ea4:	20de      	movs	r0, #222	; 0xde
 8002ea6:	f7fe fb9f 	bl	80015e8 <LCD_DrawString>
 8002eaa:	e027      	b.n	8002efc <EXTI9_5_IRQHandler+0xd8>
		}
		//Switch is released action
		else{
			//Check current gun mode
			WaterGun::STATUS curStatus = infoDisplay.status;
 8002eac:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <EXTI9_5_IRQHandler+0xf8>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	607b      	str	r3, [r7, #4]
			if (curStatus == WaterGun::STATUS::OFF_STATE){
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <EXTI9_5_IRQHandler+0xbc>
				//Do nothing
			}
			else if (curStatus == WaterGun::STATUS::RELOAD_STATE){
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d104      	bne.n	8002ec8 <EXTI9_5_IRQHandler+0xa4>
				Reloadobj.setTriggerState(false);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4817      	ldr	r0, [pc, #92]	; (8002f20 <EXTI9_5_IRQHandler+0xfc>)
 8002ec2:	f7ff fb9b 	bl	80025fc <_ZN16reloadingProcess6Reload15setTriggerStateEb>
 8002ec6:	e00b      	b.n	8002ee0 <EXTI9_5_IRQHandler+0xbc>
			  }
			else if (curStatus == WaterGun::STATUS::SINGLE_SHOOT_STATE){
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d104      	bne.n	8002ed8 <EXTI9_5_IRQHandler+0xb4>
				/*Add here*/
				singleShotobj.setTriggerState(false);
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4814      	ldr	r0, [pc, #80]	; (8002f24 <EXTI9_5_IRQHandler+0x100>)
 8002ed2:	f7ff fc0d 	bl	80026f0 <_ZN15shootingProcess5shoot15setTriggerStateEb>
 8002ed6:	e003      	b.n	8002ee0 <EXTI9_5_IRQHandler+0xbc>
			}
			else{								//CONTINIOUS_SHOOT_STATE
				/*Add here*/
				continousShotsobj.setTriggerState(false);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4813      	ldr	r0, [pc, #76]	; (8002f28 <EXTI9_5_IRQHandler+0x104>)
 8002edc:	f7ff fc08 	bl	80026f0 <_ZN15shootingProcess5shoot15setTriggerStateEb>
			}

			//Print
			LCD_Clear(222,84-10*8,16,10*8,0xffff);
 8002ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2350      	movs	r3, #80	; 0x50
 8002ee8:	2210      	movs	r2, #16
 8002eea:	2104      	movs	r1, #4
 8002eec:	20de      	movs	r0, #222	; 0xde
 8002eee:	f7fe fa90 	bl	8001412 <LCD_Clear>
			LCD_DrawString(222,84,"Switch off");
 8002ef2:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <EXTI9_5_IRQHandler+0x10c>)
 8002ef4:	2154      	movs	r1, #84	; 0x54
 8002ef6:	20de      	movs	r0, #222	; 0xde
 8002ef8:	f7fe fb76 	bl	80015e8 <LCD_DrawString>
		}
		/*Switch code END*/
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <EXTI9_5_IRQHandler+0xf0>)
 8002efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f02:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
 8002f04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f08:	f001 f855 	bl	8003fb6 <HAL_GPIO_EXTI_Callback>
	/* USER CODE END EXTI9_5_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40010400 	.word	0x40010400
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	200001f4 	.word	0x200001f4
 8002f20:	20000208 	.word	0x20000208
 8002f24:	20000214 	.word	0x20000214
 8002f28:	20000228 	.word	0x20000228
 8002f2c:	08007714 	.word	0x08007714
 8002f30:	08007720 	.word	0x08007720

08002f34 <_Z41__static_initialization_and_destruction_0ii>:

/* USER CODE BEGIN 1 */
#ifdef __cplusplus
}
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d123      	bne.n	8002f8c <_Z41__static_initialization_and_destruction_0ii+0x58>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d11e      	bne.n	8002f8c <_Z41__static_initialization_and_destruction_0ii+0x58>
WaterGun::currentInfoDisplay infoDisplay;
 8002f4e:	4811      	ldr	r0, [pc, #68]	; (8002f94 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002f50:	f7fd ff16 	bl	8000d80 <_ZN8WaterGun18currentInfoDisplayC1Ev>
reloadingProcess::Reload Reloadobj(400,0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002f5a:	480f      	ldr	r0, [pc, #60]	; (8002f98 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002f5c:	f7ff fa2e 	bl	80023bc <_ZN16reloadingProcess6ReloadC1Ejj>
shootingProcess::singleShot singleShotobj(0, 1000, 500, 1000);
 8002f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f6e:	2100      	movs	r1, #0
 8002f70:	480a      	ldr	r0, [pc, #40]	; (8002f9c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002f72:	f7ff fc05 	bl	8002780 <_ZN15shootingProcess10singleShotC1Ejjji>
shootingProcess::continousShots continousShotsobj(0, 700, 500, 1000);
 8002f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f80:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002f84:	2100      	movs	r1, #0
 8002f86:	4806      	ldr	r0, [pc, #24]	; (8002fa0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002f88:	f7ff fcfa 	bl	8002980 <_ZN15shootingProcess14continousShotsC1Ejjji>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200001f4 	.word	0x200001f4
 8002f98:	20000208 	.word	0x20000208
 8002f9c:	20000214 	.word	0x20000214
 8002fa0:	20000228 	.word	0x20000228

08002fa4 <_GLOBAL__sub_I_infoDisplay>:
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fac:	2001      	movs	r0, #1
 8002fae:	f7ff ffc1 	bl	8002f34 <_Z41__static_initialization_and_destruction_0ii>
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <_sbrk+0x5c>)
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <_sbrk+0x60>)
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <_sbrk+0x64>)
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <_sbrk+0x68>)
 8002fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d207      	bcs.n	8002ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe4:	f003 fe8a 	bl	8006cfc <__errno>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	220c      	movs	r2, #12
 8002fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e009      	b.n	8003008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <_sbrk+0x64>)
 8003004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20010000 	.word	0x20010000
 8003014:	00000400 	.word	0x00000400
 8003018:	2000023c 	.word	0x2000023c
 800301c:	20000258 	.word	0x20000258

08003020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
bl SystemInit
 800302c:	f7ff fff8 	bl	8003020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003030:	480b      	ldr	r0, [pc, #44]	; (8003060 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003032:	490c      	ldr	r1, [pc, #48]	; (8003064 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003038:	e002      	b.n	8003040 <LoopCopyDataInit>

0800303a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800303c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303e:	3304      	adds	r3, #4

08003040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003044:	d3f9      	bcc.n	800303a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003048:	4c09      	ldr	r4, [pc, #36]	; (8003070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800304c:	e001      	b.n	8003052 <LoopFillZerobss>

0800304e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003050:	3204      	adds	r2, #4

08003052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003054:	d3fb      	bcc.n	800304e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003056:	f003 fe57 	bl	8006d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800305a:	f7fe fc9b 	bl	8001994 <main>
  bx lr
 800305e:	4770      	bx	lr
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003068:	08007f5c 	.word	0x08007f5c
  ldr r2, =_sbss
 800306c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003070:	20000254 	.word	0x20000254

08003074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC1_2_IRQHandler>
	...

08003078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_Init+0x28>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_Init+0x28>)
 8003082:	f043 0310 	orr.w	r3, r3, #16
 8003086:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003088:	2003      	movs	r0, #3
 800308a:	f000 f947 	bl	800331c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800308e:	200f      	movs	r0, #15
 8003090:	f000 f808 	bl	80030a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003094:	f7ff fd96 	bl	8002bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_InitTick+0x54>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_InitTick+0x58>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f95f 	bl	8003386 <HAL_SYSTICK_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00e      	b.n	80030f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d80a      	bhi.n	80030ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d8:	2200      	movs	r2, #0
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	f000 f927 	bl	8003332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030e4:	4a06      	ldr	r2, [pc, #24]	; (8003100 <HAL_InitTick+0x5c>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000008 	.word	0x20000008
 8003100:	20000004 	.word	0x20000004

08003104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_IncTick+0x1c>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_IncTick+0x20>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4413      	add	r3, r2
 8003114:	4a03      	ldr	r2, [pc, #12]	; (8003124 <HAL_IncTick+0x20>)
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	20000008 	.word	0x20000008
 8003124:	20000240 	.word	0x20000240

08003128 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <HAL_GetTick+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	20000240 	.word	0x20000240

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff fff0 	bl	8003128 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d005      	beq.n	8003162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_Delay+0x44>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003162:	bf00      	nop
 8003164:	f7ff ffe0 	bl	8003128 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d8f7      	bhi.n	8003164 <HAL_Delay+0x28>
  {
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000008 	.word	0x20000008

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4906      	ldr	r1, [pc, #24]	; (800321c <__NVIC_EnableIRQ+0x34>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e8:	d301      	bcc.n	80032ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00f      	b.n	800330e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <SysTick_Config+0x40>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f6:	210f      	movs	r1, #15
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f7ff ff90 	bl	8003220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <SysTick_Config+0x40>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SysTick_Config+0x40>)
 8003308:	2207      	movs	r2, #7
 800330a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000e010 	.word	0xe000e010

0800331c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff2d 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff42 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff90 	bl	8003274 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5f 	bl	8003220 <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff35 	bl	80031e8 <__NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa2 	bl	80032d8 <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e059      	b.n	800346a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <HAL_DMA_Init+0xd4>)
 80033be:	429a      	cmp	r2, r3
 80033c0:	d80f      	bhi.n	80033e2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_DMA_Init+0xd8>)
 80033ca:	4413      	add	r3, r2
 80033cc:	4a2b      	ldr	r2, [pc, #172]	; (800347c <HAL_DMA_Init+0xdc>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	009a      	lsls	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a28      	ldr	r2, [pc, #160]	; (8003480 <HAL_DMA_Init+0xe0>)
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
 80033e0:	e00e      	b.n	8003400 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b26      	ldr	r3, [pc, #152]	; (8003484 <HAL_DMA_Init+0xe4>)
 80033ea:	4413      	add	r3, r2
 80033ec:	4a23      	ldr	r2, [pc, #140]	; (800347c <HAL_DMA_Init+0xdc>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	009a      	lsls	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a22      	ldr	r2, [pc, #136]	; (8003488 <HAL_DMA_Init+0xe8>)
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003416:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800341a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40020407 	.word	0x40020407
 8003478:	bffdfff8 	.word	0xbffdfff8
 800347c:	cccccccd 	.word	0xcccccccd
 8003480:	40020000 	.word	0x40020000
 8003484:	bffdfbf8 	.word	0xbffdfbf8
 8003488:	40020400 	.word	0x40020400

0800348c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_DMA_Start_IT+0x20>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e04a      	b.n	8003542 <HAL_DMA_Start_IT+0xb6>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d13a      	bne.n	8003534 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fb76 	bl	8003bd4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 020e 	orr.w	r2, r2, #14
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e00f      	b.n	8003522 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0204 	bic.w	r2, r2, #4
 8003510:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 020a 	orr.w	r2, r2, #10
 8003520:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e005      	b.n	8003540 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800353c:	2302      	movs	r3, #2
 800353e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800355e:	2b02      	cmp	r3, #2
 8003560:	d005      	beq.n	800356e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2204      	movs	r2, #4
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e0d6      	b.n	800371c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020e 	bic.w	r2, r2, #14
 800357c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b64      	ldr	r3, [pc, #400]	; (8003728 <HAL_DMA_Abort_IT+0x1dc>)
 8003596:	429a      	cmp	r2, r3
 8003598:	d958      	bls.n	800364c <HAL_DMA_Abort_IT+0x100>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a63      	ldr	r2, [pc, #396]	; (800372c <HAL_DMA_Abort_IT+0x1e0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04f      	beq.n	8003644 <HAL_DMA_Abort_IT+0xf8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a61      	ldr	r2, [pc, #388]	; (8003730 <HAL_DMA_Abort_IT+0x1e4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d048      	beq.n	8003640 <HAL_DMA_Abort_IT+0xf4>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a60      	ldr	r2, [pc, #384]	; (8003734 <HAL_DMA_Abort_IT+0x1e8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d040      	beq.n	800363a <HAL_DMA_Abort_IT+0xee>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5e      	ldr	r2, [pc, #376]	; (8003738 <HAL_DMA_Abort_IT+0x1ec>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d038      	beq.n	8003634 <HAL_DMA_Abort_IT+0xe8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5d      	ldr	r2, [pc, #372]	; (800373c <HAL_DMA_Abort_IT+0x1f0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d030      	beq.n	800362e <HAL_DMA_Abort_IT+0xe2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5b      	ldr	r2, [pc, #364]	; (8003740 <HAL_DMA_Abort_IT+0x1f4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d028      	beq.n	8003628 <HAL_DMA_Abort_IT+0xdc>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a53      	ldr	r2, [pc, #332]	; (8003728 <HAL_DMA_Abort_IT+0x1dc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d020      	beq.n	8003622 <HAL_DMA_Abort_IT+0xd6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_DMA_Abort_IT+0x1f8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_DMA_Abort_IT+0xd2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_DMA_Abort_IT+0x1fc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d012      	beq.n	800361a <HAL_DMA_Abort_IT+0xce>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_DMA_Abort_IT+0x200>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00a      	beq.n	8003614 <HAL_DMA_Abort_IT+0xc8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a53      	ldr	r2, [pc, #332]	; (8003750 <HAL_DMA_Abort_IT+0x204>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d102      	bne.n	800360e <HAL_DMA_Abort_IT+0xc2>
 8003608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800360c:	e01b      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 800360e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003612:	e018      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 8003614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003618:	e015      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 800361a:	2310      	movs	r3, #16
 800361c:	e013      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 800361e:	2301      	movs	r3, #1
 8003620:	e011      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 8003622:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003626:	e00e      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 8003628:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800362c:	e00b      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 800362e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003632:	e008      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 8003634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003638:	e005      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 800363a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800363e:	e002      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 8003640:	2310      	movs	r3, #16
 8003642:	e000      	b.n	8003646 <HAL_DMA_Abort_IT+0xfa>
 8003644:	2301      	movs	r3, #1
 8003646:	4a43      	ldr	r2, [pc, #268]	; (8003754 <HAL_DMA_Abort_IT+0x208>)
 8003648:	6053      	str	r3, [r2, #4]
 800364a:	e057      	b.n	80036fc <HAL_DMA_Abort_IT+0x1b0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a36      	ldr	r2, [pc, #216]	; (800372c <HAL_DMA_Abort_IT+0x1e0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04f      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x1aa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a35      	ldr	r2, [pc, #212]	; (8003730 <HAL_DMA_Abort_IT+0x1e4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d048      	beq.n	80036f2 <HAL_DMA_Abort_IT+0x1a6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a33      	ldr	r2, [pc, #204]	; (8003734 <HAL_DMA_Abort_IT+0x1e8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d040      	beq.n	80036ec <HAL_DMA_Abort_IT+0x1a0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a32      	ldr	r2, [pc, #200]	; (8003738 <HAL_DMA_Abort_IT+0x1ec>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d038      	beq.n	80036e6 <HAL_DMA_Abort_IT+0x19a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a30      	ldr	r2, [pc, #192]	; (800373c <HAL_DMA_Abort_IT+0x1f0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d030      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x194>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <HAL_DMA_Abort_IT+0x1f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d028      	beq.n	80036da <HAL_DMA_Abort_IT+0x18e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a26      	ldr	r2, [pc, #152]	; (8003728 <HAL_DMA_Abort_IT+0x1dc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d020      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x188>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <HAL_DMA_Abort_IT+0x1f8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d019      	beq.n	80036d0 <HAL_DMA_Abort_IT+0x184>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_DMA_Abort_IT+0x1fc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d012      	beq.n	80036cc <HAL_DMA_Abort_IT+0x180>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a28      	ldr	r2, [pc, #160]	; (800374c <HAL_DMA_Abort_IT+0x200>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00a      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x17a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a26      	ldr	r2, [pc, #152]	; (8003750 <HAL_DMA_Abort_IT+0x204>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d102      	bne.n	80036c0 <HAL_DMA_Abort_IT+0x174>
 80036ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036be:	e01b      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036c4:	e018      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ca:	e015      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036cc:	2310      	movs	r3, #16
 80036ce:	e013      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e011      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d8:	e00e      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036de:	e00b      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e4:	e008      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ea:	e005      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f0:	e002      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036f2:	2310      	movs	r3, #16
 80036f4:	e000      	b.n	80036f8 <HAL_DMA_Abort_IT+0x1ac>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_DMA_Abort_IT+0x20c>)
 80036fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
    } 
  }
  return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40020080 	.word	0x40020080
 800372c:	40020008 	.word	0x40020008
 8003730:	4002001c 	.word	0x4002001c
 8003734:	40020030 	.word	0x40020030
 8003738:	40020044 	.word	0x40020044
 800373c:	40020058 	.word	0x40020058
 8003740:	4002006c 	.word	0x4002006c
 8003744:	40020408 	.word	0x40020408
 8003748:	4002041c 	.word	0x4002041c
 800374c:	40020430 	.word	0x40020430
 8003750:	40020444 	.word	0x40020444
 8003754:	40020400 	.word	0x40020400
 8003758:	40020000 	.word	0x40020000

0800375c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2204      	movs	r2, #4
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80f1 	beq.w	8003968 <HAL_DMA_IRQHandler+0x20c>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80eb 	beq.w	8003968 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_DMA_IRQHandler+0x1d8>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d958      	bls.n	800386e <HAL_DMA_IRQHandler+0x112>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a5d      	ldr	r2, [pc, #372]	; (8003938 <HAL_DMA_IRQHandler+0x1dc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d04f      	beq.n	8003866 <HAL_DMA_IRQHandler+0x10a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a5c      	ldr	r2, [pc, #368]	; (800393c <HAL_DMA_IRQHandler+0x1e0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d048      	beq.n	8003862 <HAL_DMA_IRQHandler+0x106>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5a      	ldr	r2, [pc, #360]	; (8003940 <HAL_DMA_IRQHandler+0x1e4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d040      	beq.n	800385c <HAL_DMA_IRQHandler+0x100>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a59      	ldr	r2, [pc, #356]	; (8003944 <HAL_DMA_IRQHandler+0x1e8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d038      	beq.n	8003856 <HAL_DMA_IRQHandler+0xfa>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a57      	ldr	r2, [pc, #348]	; (8003948 <HAL_DMA_IRQHandler+0x1ec>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d030      	beq.n	8003850 <HAL_DMA_IRQHandler+0xf4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a56      	ldr	r2, [pc, #344]	; (800394c <HAL_DMA_IRQHandler+0x1f0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d028      	beq.n	800384a <HAL_DMA_IRQHandler+0xee>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a4d      	ldr	r2, [pc, #308]	; (8003934 <HAL_DMA_IRQHandler+0x1d8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d020      	beq.n	8003844 <HAL_DMA_IRQHandler+0xe8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_DMA_IRQHandler+0x1f4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d019      	beq.n	8003840 <HAL_DMA_IRQHandler+0xe4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a50      	ldr	r2, [pc, #320]	; (8003954 <HAL_DMA_IRQHandler+0x1f8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d012      	beq.n	800383c <HAL_DMA_IRQHandler+0xe0>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a4f      	ldr	r2, [pc, #316]	; (8003958 <HAL_DMA_IRQHandler+0x1fc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00a      	beq.n	8003836 <HAL_DMA_IRQHandler+0xda>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a4d      	ldr	r2, [pc, #308]	; (800395c <HAL_DMA_IRQHandler+0x200>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d102      	bne.n	8003830 <HAL_DMA_IRQHandler+0xd4>
 800382a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800382e:	e01b      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 8003830:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003834:	e018      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 8003836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800383a:	e015      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	e013      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 8003840:	2304      	movs	r3, #4
 8003842:	e011      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 8003844:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003848:	e00e      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 800384a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800384e:	e00b      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 8003850:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003854:	e008      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 8003856:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800385a:	e005      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 800385c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003860:	e002      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 8003862:	2340      	movs	r3, #64	; 0x40
 8003864:	e000      	b.n	8003868 <HAL_DMA_IRQHandler+0x10c>
 8003866:	2304      	movs	r3, #4
 8003868:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <HAL_DMA_IRQHandler+0x204>)
 800386a:	6053      	str	r3, [r2, #4]
 800386c:	e057      	b.n	800391e <HAL_DMA_IRQHandler+0x1c2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a31      	ldr	r2, [pc, #196]	; (8003938 <HAL_DMA_IRQHandler+0x1dc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04f      	beq.n	8003918 <HAL_DMA_IRQHandler+0x1bc>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2f      	ldr	r2, [pc, #188]	; (800393c <HAL_DMA_IRQHandler+0x1e0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d048      	beq.n	8003914 <HAL_DMA_IRQHandler+0x1b8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <HAL_DMA_IRQHandler+0x1e4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_DMA_IRQHandler+0x1b2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <HAL_DMA_IRQHandler+0x1e8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d038      	beq.n	8003908 <HAL_DMA_IRQHandler+0x1ac>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <HAL_DMA_IRQHandler+0x1ec>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d030      	beq.n	8003902 <HAL_DMA_IRQHandler+0x1a6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <HAL_DMA_IRQHandler+0x1f0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d028      	beq.n	80038fc <HAL_DMA_IRQHandler+0x1a0>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a21      	ldr	r2, [pc, #132]	; (8003934 <HAL_DMA_IRQHandler+0x1d8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d020      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x19a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a25      	ldr	r2, [pc, #148]	; (8003950 <HAL_DMA_IRQHandler+0x1f4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d019      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x196>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a24      	ldr	r2, [pc, #144]	; (8003954 <HAL_DMA_IRQHandler+0x1f8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d012      	beq.n	80038ee <HAL_DMA_IRQHandler+0x192>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a22      	ldr	r2, [pc, #136]	; (8003958 <HAL_DMA_IRQHandler+0x1fc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00a      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x18c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a21      	ldr	r2, [pc, #132]	; (800395c <HAL_DMA_IRQHandler+0x200>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d102      	bne.n	80038e2 <HAL_DMA_IRQHandler+0x186>
 80038dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038e0:	e01b      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 80038e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038e6:	e018      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 80038e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ec:	e015      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 80038ee:	2340      	movs	r3, #64	; 0x40
 80038f0:	e013      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e011      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 80038f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038fa:	e00e      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 80038fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003900:	e00b      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 8003902:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003906:	e008      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 8003908:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800390c:	e005      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 800390e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003912:	e002      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 8003914:	2340      	movs	r3, #64	; 0x40
 8003916:	e000      	b.n	800391a <HAL_DMA_IRQHandler+0x1be>
 8003918:	2304      	movs	r3, #4
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <HAL_DMA_IRQHandler+0x208>)
 800391c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8136 	beq.w	8003b94 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003930:	e130      	b.n	8003b94 <HAL_DMA_IRQHandler+0x438>
 8003932:	bf00      	nop
 8003934:	40020080 	.word	0x40020080
 8003938:	40020008 	.word	0x40020008
 800393c:	4002001c 	.word	0x4002001c
 8003940:	40020030 	.word	0x40020030
 8003944:	40020044 	.word	0x40020044
 8003948:	40020058 	.word	0x40020058
 800394c:	4002006c 	.word	0x4002006c
 8003950:	40020408 	.word	0x40020408
 8003954:	4002041c 	.word	0x4002041c
 8003958:	40020430 	.word	0x40020430
 800395c:	40020444 	.word	0x40020444
 8003960:	40020400 	.word	0x40020400
 8003964:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2202      	movs	r2, #2
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80dd 	beq.w	8003b34 <HAL_DMA_IRQHandler+0x3d8>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80d7 	beq.w	8003b34 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 020a 	bic.w	r2, r2, #10
 80039a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b7b      	ldr	r3, [pc, #492]	; (8003ba0 <HAL_DMA_IRQHandler+0x444>)
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d958      	bls.n	8003a6a <HAL_DMA_IRQHandler+0x30e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a79      	ldr	r2, [pc, #484]	; (8003ba4 <HAL_DMA_IRQHandler+0x448>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04f      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x306>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a78      	ldr	r2, [pc, #480]	; (8003ba8 <HAL_DMA_IRQHandler+0x44c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d048      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x302>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a76      	ldr	r2, [pc, #472]	; (8003bac <HAL_DMA_IRQHandler+0x450>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d040      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x2fc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a75      	ldr	r2, [pc, #468]	; (8003bb0 <HAL_DMA_IRQHandler+0x454>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d038      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2f6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a73      	ldr	r2, [pc, #460]	; (8003bb4 <HAL_DMA_IRQHandler+0x458>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d030      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x2f0>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a72      	ldr	r2, [pc, #456]	; (8003bb8 <HAL_DMA_IRQHandler+0x45c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d028      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x2ea>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a69      	ldr	r2, [pc, #420]	; (8003ba0 <HAL_DMA_IRQHandler+0x444>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d020      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x2e4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6e      	ldr	r2, [pc, #440]	; (8003bbc <HAL_DMA_IRQHandler+0x460>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d019      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x2e0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6c      	ldr	r2, [pc, #432]	; (8003bc0 <HAL_DMA_IRQHandler+0x464>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d012      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x2dc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6b      	ldr	r2, [pc, #428]	; (8003bc4 <HAL_DMA_IRQHandler+0x468>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00a      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x2d6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a69      	ldr	r2, [pc, #420]	; (8003bc8 <HAL_DMA_IRQHandler+0x46c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d102      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x2d0>
 8003a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a2a:	e01b      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a30:	e018      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a36:	e015      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a38:	2320      	movs	r3, #32
 8003a3a:	e013      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e011      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a44:	e00e      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a4a:	e00b      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a50:	e008      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a56:	e005      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5c:	e002      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e000      	b.n	8003a64 <HAL_DMA_IRQHandler+0x308>
 8003a62:	2302      	movs	r3, #2
 8003a64:	4a59      	ldr	r2, [pc, #356]	; (8003bcc <HAL_DMA_IRQHandler+0x470>)
 8003a66:	6053      	str	r3, [r2, #4]
 8003a68:	e057      	b.n	8003b1a <HAL_DMA_IRQHandler+0x3be>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ba4 <HAL_DMA_IRQHandler+0x448>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d04f      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x3b8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a4b      	ldr	r2, [pc, #300]	; (8003ba8 <HAL_DMA_IRQHandler+0x44c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d048      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x3b4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4a      	ldr	r2, [pc, #296]	; (8003bac <HAL_DMA_IRQHandler+0x450>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d040      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x3ae>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a48      	ldr	r2, [pc, #288]	; (8003bb0 <HAL_DMA_IRQHandler+0x454>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d038      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x3a8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a47      	ldr	r2, [pc, #284]	; (8003bb4 <HAL_DMA_IRQHandler+0x458>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d030      	beq.n	8003afe <HAL_DMA_IRQHandler+0x3a2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <HAL_DMA_IRQHandler+0x45c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d028      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x39c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a3d      	ldr	r2, [pc, #244]	; (8003ba0 <HAL_DMA_IRQHandler+0x444>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d020      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x396>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a41      	ldr	r2, [pc, #260]	; (8003bbc <HAL_DMA_IRQHandler+0x460>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d019      	beq.n	8003aee <HAL_DMA_IRQHandler+0x392>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a40      	ldr	r2, [pc, #256]	; (8003bc0 <HAL_DMA_IRQHandler+0x464>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d012      	beq.n	8003aea <HAL_DMA_IRQHandler+0x38e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3e      	ldr	r2, [pc, #248]	; (8003bc4 <HAL_DMA_IRQHandler+0x468>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00a      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x388>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3d      	ldr	r2, [pc, #244]	; (8003bc8 <HAL_DMA_IRQHandler+0x46c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d102      	bne.n	8003ade <HAL_DMA_IRQHandler+0x382>
 8003ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003adc:	e01b      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae2:	e018      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae8:	e015      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003aea:	2320      	movs	r3, #32
 8003aec:	e013      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e011      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af6:	e00e      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003af8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003afc:	e00b      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b02:	e008      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b08:	e005      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0e:	e002      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003b10:	2320      	movs	r3, #32
 8003b12:	e000      	b.n	8003b16 <HAL_DMA_IRQHandler+0x3ba>
 8003b14:	2302      	movs	r3, #2
 8003b16:	4a2e      	ldr	r2, [pc, #184]	; (8003bd0 <HAL_DMA_IRQHandler+0x474>)
 8003b18:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d034      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b32:	e02f      	b.n	8003b94 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2208      	movs	r2, #8
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d028      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x43a>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d023      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 020e 	bic.w	r2, r2, #14
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
    }
  }
  return;
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
}
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40020080 	.word	0x40020080
 8003ba4:	40020008 	.word	0x40020008
 8003ba8:	4002001c 	.word	0x4002001c
 8003bac:	40020030 	.word	0x40020030
 8003bb0:	40020044 	.word	0x40020044
 8003bb4:	40020058 	.word	0x40020058
 8003bb8:	4002006c 	.word	0x4002006c
 8003bbc:	40020408 	.word	0x40020408
 8003bc0:	4002041c 	.word	0x4002041c
 8003bc4:	40020430 	.word	0x40020430
 8003bc8:	40020444 	.word	0x40020444
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40020000 	.word	0x40020000

08003bd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d108      	bne.n	8003c14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c12:	e007      	b.n	8003c24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b08b      	sub	sp, #44	; 0x2c
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c42:	e179      	b.n	8003f38 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c44:	2201      	movs	r2, #1
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f040 8168 	bne.w	8003f32 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a96      	ldr	r2, [pc, #600]	; (8003ec0 <HAL_GPIO_Init+0x290>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d05e      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c6c:	4a94      	ldr	r2, [pc, #592]	; (8003ec0 <HAL_GPIO_Init+0x290>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d875      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c72:	4a94      	ldr	r2, [pc, #592]	; (8003ec4 <HAL_GPIO_Init+0x294>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d058      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c78:	4a92      	ldr	r2, [pc, #584]	; (8003ec4 <HAL_GPIO_Init+0x294>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d86f      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c7e:	4a92      	ldr	r2, [pc, #584]	; (8003ec8 <HAL_GPIO_Init+0x298>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d052      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c84:	4a90      	ldr	r2, [pc, #576]	; (8003ec8 <HAL_GPIO_Init+0x298>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d869      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c8a:	4a90      	ldr	r2, [pc, #576]	; (8003ecc <HAL_GPIO_Init+0x29c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04c      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c90:	4a8e      	ldr	r2, [pc, #568]	; (8003ecc <HAL_GPIO_Init+0x29c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d863      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c96:	4a8e      	ldr	r2, [pc, #568]	; (8003ed0 <HAL_GPIO_Init+0x2a0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d046      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c9c:	4a8c      	ldr	r2, [pc, #560]	; (8003ed0 <HAL_GPIO_Init+0x2a0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d85d      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003ca2:	2b12      	cmp	r3, #18
 8003ca4:	d82a      	bhi.n	8003cfc <HAL_GPIO_Init+0xcc>
 8003ca6:	2b12      	cmp	r3, #18
 8003ca8:	d859      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <HAL_GPIO_Init+0x80>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003d2b 	.word	0x08003d2b
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003d17 	.word	0x08003d17
 8003cbc:	08003d59 	.word	0x08003d59
 8003cc0:	08003d5f 	.word	0x08003d5f
 8003cc4:	08003d5f 	.word	0x08003d5f
 8003cc8:	08003d5f 	.word	0x08003d5f
 8003ccc:	08003d5f 	.word	0x08003d5f
 8003cd0:	08003d5f 	.word	0x08003d5f
 8003cd4:	08003d5f 	.word	0x08003d5f
 8003cd8:	08003d5f 	.word	0x08003d5f
 8003cdc:	08003d5f 	.word	0x08003d5f
 8003ce0:	08003d5f 	.word	0x08003d5f
 8003ce4:	08003d5f 	.word	0x08003d5f
 8003ce8:	08003d5f 	.word	0x08003d5f
 8003cec:	08003d5f 	.word	0x08003d5f
 8003cf0:	08003d5f 	.word	0x08003d5f
 8003cf4:	08003d0d 	.word	0x08003d0d
 8003cf8:	08003d21 	.word	0x08003d21
 8003cfc:	4a75      	ldr	r2, [pc, #468]	; (8003ed4 <HAL_GPIO_Init+0x2a4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d02:	e02c      	b.n	8003d5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	623b      	str	r3, [r7, #32]
          break;
 8003d0a:	e029      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	3304      	adds	r3, #4
 8003d12:	623b      	str	r3, [r7, #32]
          break;
 8003d14:	e024      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	623b      	str	r3, [r7, #32]
          break;
 8003d1e:	e01f      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	330c      	adds	r3, #12
 8003d26:	623b      	str	r3, [r7, #32]
          break;
 8003d28:	e01a      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d32:	2304      	movs	r3, #4
 8003d34:	623b      	str	r3, [r7, #32]
          break;
 8003d36:	e013      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d40:	2308      	movs	r3, #8
 8003d42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	611a      	str	r2, [r3, #16]
          break;
 8003d4a:	e009      	b.n	8003d60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	615a      	str	r2, [r3, #20]
          break;
 8003d56:	e003      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	623b      	str	r3, [r7, #32]
          break;
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          break;
 8003d5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2bff      	cmp	r3, #255	; 0xff
 8003d64:	d801      	bhi.n	8003d6a <HAL_GPIO_Init+0x13a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	e001      	b.n	8003d6e <HAL_GPIO_Init+0x13e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d802      	bhi.n	8003d7c <HAL_GPIO_Init+0x14c>
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	e002      	b.n	8003d82 <HAL_GPIO_Init+0x152>
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	3b08      	subs	r3, #8
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	210f      	movs	r1, #15
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80c1 	beq.w	8003f32 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003db0:	4b49      	ldr	r3, [pc, #292]	; (8003ed8 <HAL_GPIO_Init+0x2a8>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4a48      	ldr	r2, [pc, #288]	; (8003ed8 <HAL_GPIO_Init+0x2a8>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6193      	str	r3, [r2, #24]
 8003dbc:	4b46      	ldr	r3, [pc, #280]	; (8003ed8 <HAL_GPIO_Init+0x2a8>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dc8:	4a44      	ldr	r2, [pc, #272]	; (8003edc <HAL_GPIO_Init+0x2ac>)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3c      	ldr	r2, [pc, #240]	; (8003ee0 <HAL_GPIO_Init+0x2b0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01f      	beq.n	8003e34 <HAL_GPIO_Init+0x204>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3b      	ldr	r2, [pc, #236]	; (8003ee4 <HAL_GPIO_Init+0x2b4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d019      	beq.n	8003e30 <HAL_GPIO_Init+0x200>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <HAL_GPIO_Init+0x2b8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_GPIO_Init+0x1fc>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a39      	ldr	r2, [pc, #228]	; (8003eec <HAL_GPIO_Init+0x2bc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00d      	beq.n	8003e28 <HAL_GPIO_Init+0x1f8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a38      	ldr	r2, [pc, #224]	; (8003ef0 <HAL_GPIO_Init+0x2c0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <HAL_GPIO_Init+0x1f4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a37      	ldr	r2, [pc, #220]	; (8003ef4 <HAL_GPIO_Init+0x2c4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_GPIO_Init+0x1f0>
 8003e1c:	2305      	movs	r3, #5
 8003e1e:	e00a      	b.n	8003e36 <HAL_GPIO_Init+0x206>
 8003e20:	2306      	movs	r3, #6
 8003e22:	e008      	b.n	8003e36 <HAL_GPIO_Init+0x206>
 8003e24:	2304      	movs	r3, #4
 8003e26:	e006      	b.n	8003e36 <HAL_GPIO_Init+0x206>
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e004      	b.n	8003e36 <HAL_GPIO_Init+0x206>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e002      	b.n	8003e36 <HAL_GPIO_Init+0x206>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_GPIO_Init+0x206>
 8003e34:	2300      	movs	r3, #0
 8003e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e38:	f002 0203 	and.w	r2, r2, #3
 8003e3c:	0092      	lsls	r2, r2, #2
 8003e3e:	4093      	lsls	r3, r2
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e46:	4925      	ldr	r1, [pc, #148]	; (8003edc <HAL_GPIO_Init+0x2ac>)
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d006      	beq.n	8003e6e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4924      	ldr	r1, [pc, #144]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]
 8003e6c:	e006      	b.n	8003e7c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	4920      	ldr	r1, [pc, #128]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e88:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	491a      	ldr	r1, [pc, #104]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	e006      	b.n	8003ea4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	4916      	ldr	r1, [pc, #88]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d025      	beq.n	8003efc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	4910      	ldr	r1, [pc, #64]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]
 8003ebc:	e025      	b.n	8003f0a <HAL_GPIO_Init+0x2da>
 8003ebe:	bf00      	nop
 8003ec0:	10320000 	.word	0x10320000
 8003ec4:	10310000 	.word	0x10310000
 8003ec8:	10220000 	.word	0x10220000
 8003ecc:	10210000 	.word	0x10210000
 8003ed0:	10120000 	.word	0x10120000
 8003ed4:	10110000 	.word	0x10110000
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40010800 	.word	0x40010800
 8003ee4:	40010c00 	.word	0x40010c00
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	40011400 	.word	0x40011400
 8003ef0:	40011800 	.word	0x40011800
 8003ef4:	40011c00 	.word	0x40011c00
 8003ef8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_GPIO_Init+0x324>)
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	4913      	ldr	r1, [pc, #76]	; (8003f54 <HAL_GPIO_Init+0x324>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <HAL_GPIO_Init+0x324>)
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	490e      	ldr	r1, [pc, #56]	; (8003f54 <HAL_GPIO_Init+0x324>)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60cb      	str	r3, [r1, #12]
 8003f22:	e006      	b.n	8003f32 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_GPIO_Init+0x324>)
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	4909      	ldr	r1, [pc, #36]	; (8003f54 <HAL_GPIO_Init+0x324>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	3301      	adds	r3, #1
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f47f ae7e 	bne.w	8003c44 <HAL_GPIO_Init+0x14>
  }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	372c      	adds	r7, #44	; 0x2c
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	40010400 	.word	0x40010400

08003f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	887b      	ldrh	r3, [r7, #2]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e001      	b.n	8003f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	807b      	strh	r3, [r7, #2]
 8003f92:	4613      	mov	r3, r2
 8003f94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f96:	787b      	ldrb	r3, [r7, #1]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f9c:	887a      	ldrh	r2, [r7, #2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fa2:	e003      	b.n	8003fac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	041a      	lsls	r2, r3, #16
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	611a      	str	r2, [r3, #16]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr
	...

08003fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e272      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8087 	beq.w	80040fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fec:	4b92      	ldr	r3, [pc, #584]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d00c      	beq.n	8004012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ff8:	4b8f      	ldr	r3, [pc, #572]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b08      	cmp	r3, #8
 8004002:	d112      	bne.n	800402a <HAL_RCC_OscConfig+0x5e>
 8004004:	4b8c      	ldr	r3, [pc, #560]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004010:	d10b      	bne.n	800402a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004012:	4b89      	ldr	r3, [pc, #548]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d06c      	beq.n	80040f8 <HAL_RCC_OscConfig+0x12c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d168      	bne.n	80040f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e24c      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x76>
 8004034:	4b80      	ldr	r3, [pc, #512]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a7f      	ldr	r2, [pc, #508]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e02e      	b.n	80040a0 <HAL_RCC_OscConfig+0xd4>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x98>
 800404a:	4b7b      	ldr	r3, [pc, #492]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a7a      	ldr	r2, [pc, #488]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b78      	ldr	r3, [pc, #480]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a77      	ldr	r2, [pc, #476]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800405c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e01d      	b.n	80040a0 <HAL_RCC_OscConfig+0xd4>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0xbc>
 800406e:	4b72      	ldr	r3, [pc, #456]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a71      	ldr	r2, [pc, #452]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6e      	ldr	r2, [pc, #440]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0xd4>
 8004088:	4b6b      	ldr	r3, [pc, #428]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6a      	ldr	r2, [pc, #424]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a67      	ldr	r2, [pc, #412]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7ff f83e 	bl	8003128 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7ff f83a 	bl	8003128 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e200      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0xe4>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7ff f82a 	bl	8003128 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7ff f826 	bl	8003128 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1ec      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	4b53      	ldr	r3, [pc, #332]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x10c>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d063      	beq.n	80041ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004106:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004112:	4b49      	ldr	r3, [pc, #292]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b08      	cmp	r3, #8
 800411c:	d11c      	bne.n	8004158 <HAL_RCC_OscConfig+0x18c>
 800411e:	4b46      	ldr	r3, [pc, #280]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d116      	bne.n	8004158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412a:	4b43      	ldr	r3, [pc, #268]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCC_OscConfig+0x176>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e1c0      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4939      	ldr	r1, [pc, #228]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	e03a      	b.n	80041ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004160:	4b36      	ldr	r3, [pc, #216]	; (800423c <HAL_RCC_OscConfig+0x270>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004166:	f7fe ffdf 	bl	8003128 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416e:	f7fe ffdb 	bl	8003128 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e1a1      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4927      	ldr	r1, [pc, #156]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]
 80041a0:	e015      	b.n	80041ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a2:	4b26      	ldr	r3, [pc, #152]	; (800423c <HAL_RCC_OscConfig+0x270>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fe ffbe 	bl	8003128 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fe ffba 	bl	8003128 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e180      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d03a      	beq.n	8004250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d019      	beq.n	8004216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <HAL_RCC_OscConfig+0x274>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e8:	f7fe ff9e 	bl	8003128 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fe ff9a 	bl	8003128 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e160      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_RCC_OscConfig+0x26c>)
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800420e:	2001      	movs	r0, #1
 8004210:	f000 faa6 	bl	8004760 <RCC_Delay>
 8004214:	e01c      	b.n	8004250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_RCC_OscConfig+0x274>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421c:	f7fe ff84 	bl	8003128 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004222:	e00f      	b.n	8004244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004224:	f7fe ff80 	bl	8003128 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d908      	bls.n	8004244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e146      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	42420000 	.word	0x42420000
 8004240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004244:	4b92      	ldr	r3, [pc, #584]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e9      	bne.n	8004224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80a6 	beq.w	80043aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004262:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10d      	bne.n	800428a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	4b88      	ldr	r3, [pc, #544]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4a87      	ldr	r2, [pc, #540]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	61d3      	str	r3, [r2, #28]
 800427a:	4b85      	ldr	r3, [pc, #532]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b82      	ldr	r3, [pc, #520]	; (8004494 <HAL_RCC_OscConfig+0x4c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d118      	bne.n	80042c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004296:	4b7f      	ldr	r3, [pc, #508]	; (8004494 <HAL_RCC_OscConfig+0x4c8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a7e      	ldr	r2, [pc, #504]	; (8004494 <HAL_RCC_OscConfig+0x4c8>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fe ff41 	bl	8003128 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042aa:	f7fe ff3d 	bl	8003128 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b64      	cmp	r3, #100	; 0x64
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e103      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	4b75      	ldr	r3, [pc, #468]	; (8004494 <HAL_RCC_OscConfig+0x4c8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x312>
 80042d0:	4b6f      	ldr	r3, [pc, #444]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4a6e      	ldr	r2, [pc, #440]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6213      	str	r3, [r2, #32]
 80042dc:	e02d      	b.n	800433a <HAL_RCC_OscConfig+0x36e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x334>
 80042e6:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4a69      	ldr	r2, [pc, #420]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6213      	str	r3, [r2, #32]
 80042f2:	4b67      	ldr	r3, [pc, #412]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	4a66      	ldr	r2, [pc, #408]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6213      	str	r3, [r2, #32]
 80042fe:	e01c      	b.n	800433a <HAL_RCC_OscConfig+0x36e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b05      	cmp	r3, #5
 8004306:	d10c      	bne.n	8004322 <HAL_RCC_OscConfig+0x356>
 8004308:	4b61      	ldr	r3, [pc, #388]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4a60      	ldr	r2, [pc, #384]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	6213      	str	r3, [r2, #32]
 8004314:	4b5e      	ldr	r3, [pc, #376]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	4a5d      	ldr	r2, [pc, #372]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6213      	str	r3, [r2, #32]
 8004320:	e00b      	b.n	800433a <HAL_RCC_OscConfig+0x36e>
 8004322:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	4a5a      	ldr	r2, [pc, #360]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	6213      	str	r3, [r2, #32]
 800432e:	4b58      	ldr	r3, [pc, #352]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4a57      	ldr	r2, [pc, #348]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004334:	f023 0304 	bic.w	r3, r3, #4
 8004338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d015      	beq.n	800436e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fe fef1 	bl	8003128 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fe feed 	bl	8003128 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0b1      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004360:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ee      	beq.n	800434a <HAL_RCC_OscConfig+0x37e>
 800436c:	e014      	b.n	8004398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fe fedb 	bl	8003128 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fe fed7 	bl	8003128 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	; 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e09b      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438c:	4b40      	ldr	r3, [pc, #256]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ee      	bne.n	8004376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d105      	bne.n	80043aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439e:	4b3c      	ldr	r3, [pc, #240]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	4a3b      	ldr	r2, [pc, #236]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8087 	beq.w	80044c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043b4:	4b36      	ldr	r3, [pc, #216]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d061      	beq.n	8004484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d146      	bne.n	8004456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c8:	4b33      	ldr	r3, [pc, #204]	; (8004498 <HAL_RCC_OscConfig+0x4cc>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fe feab 	bl	8003128 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fe fea7 	bl	8003128 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e06d      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f0      	bne.n	80043d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d108      	bne.n	8004410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4921      	ldr	r1, [pc, #132]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004410:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a19      	ldr	r1, [r3, #32]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	430b      	orrs	r3, r1
 8004422:	491b      	ldr	r1, [pc, #108]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_OscConfig+0x4cc>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442e:	f7fe fe7b 	bl	8003128 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004436:	f7fe fe77 	bl	8003128 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e03d      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004448:	4b11      	ldr	r3, [pc, #68]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x46a>
 8004454:	e035      	b.n	80044c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <HAL_RCC_OscConfig+0x4cc>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fe fe64 	bl	8003128 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004464:	f7fe fe60 	bl	8003128 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e026      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCC_OscConfig+0x4c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x498>
 8004482:	e01e      	b.n	80044c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d107      	bne.n	800449c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e019      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
 8004490:	40021000 	.word	0x40021000
 8004494:	40007000 	.word	0x40007000
 8004498:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCC_OscConfig+0x500>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000

080044d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0d0      	b.n	8004686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e4:	4b6a      	ldr	r3, [pc, #424]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d910      	bls.n	8004514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b67      	ldr	r3, [pc, #412]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 0207 	bic.w	r2, r3, #7
 80044fa:	4965      	ldr	r1, [pc, #404]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	4b63      	ldr	r3, [pc, #396]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0b8      	b.n	8004686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d020      	beq.n	8004562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800452c:	4b59      	ldr	r3, [pc, #356]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a58      	ldr	r2, [pc, #352]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004544:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a52      	ldr	r2, [pc, #328]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 800454a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800454e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004550:	4b50      	ldr	r3, [pc, #320]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	494d      	ldr	r1, [pc, #308]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d040      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d115      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e07f      	b.n	8004686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458e:	4b41      	ldr	r3, [pc, #260]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e073      	b.n	8004686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06b      	b.n	8004686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ae:	4b39      	ldr	r3, [pc, #228]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f023 0203 	bic.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4936      	ldr	r1, [pc, #216]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c0:	f7fe fdb2 	bl	8003128 <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	e00a      	b.n	80045de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c8:	f7fe fdae 	bl	8003128 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e053      	b.n	8004686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 020c 	and.w	r2, r3, #12
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d1eb      	bne.n	80045c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d210      	bcs.n	8004620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 0207 	bic.w	r2, r3, #7
 8004606:	4922      	ldr	r1, [pc, #136]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e032      	b.n	8004686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4916      	ldr	r1, [pc, #88]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800464a:	4b12      	ldr	r3, [pc, #72]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	490e      	ldr	r1, [pc, #56]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 800465a:	4313      	orrs	r3, r2
 800465c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800465e:	f000 f821 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8004662:	4602      	mov	r2, r0
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	490a      	ldr	r1, [pc, #40]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004670:	5ccb      	ldrb	r3, [r1, r3]
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <HAL_RCC_ClockConfig+0x1cc>)
 8004678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1d0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fd10 	bl	80030a4 <HAL_InitTick>

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40022000 	.word	0x40022000
 8004694:	40021000 	.word	0x40021000
 8004698:	08007d2c 	.word	0x08007d2c
 800469c:	20000000 	.word	0x20000000
 80046a0:	20000004 	.word	0x20000004

080046a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	b490      	push	{r4, r7}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80046aa:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_RCC_GetSysClockFreq+0xac>)
 80046ac:	1d3c      	adds	r4, r7, #4
 80046ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80046b4:	f240 2301 	movw	r3, #513	; 0x201
 80046b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	2300      	movs	r3, #0
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046ce:	4b21      	ldr	r3, [pc, #132]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb0>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d002      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x40>
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0x46>
 80046e2:	e02b      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046e6:	623b      	str	r3, [r7, #32]
      break;
 80046e8:	e02b      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	0c9b      	lsrs	r3, r3, #18
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3328      	adds	r3, #40	; 0x28
 80046f4:	443b      	add	r3, r7
 80046f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d012      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004706:	4b13      	ldr	r3, [pc, #76]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	0c5b      	lsrs	r3, r3, #17
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	3328      	adds	r3, #40	; 0x28
 8004712:	443b      	add	r3, r7
 8004714:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004718:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4a0e      	ldr	r2, [pc, #56]	; (8004758 <HAL_RCC_GetSysClockFreq+0xb4>)
 800471e:	fb03 f202 	mul.w	r2, r3, r2
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
 800472a:	e004      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	623b      	str	r3, [r7, #32]
      break;
 800473a:	e002      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCC_GetSysClockFreq+0xb4>)
 800473e:	623b      	str	r3, [r7, #32]
      break;
 8004740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004742:	6a3b      	ldr	r3, [r7, #32]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3728      	adds	r7, #40	; 0x28
 8004748:	46bd      	mov	sp, r7
 800474a:	bc90      	pop	{r4, r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	0800772c 	.word	0x0800772c
 8004754:	40021000 	.word	0x40021000
 8004758:	007a1200 	.word	0x007a1200
 800475c:	003d0900 	.word	0x003d0900

08004760 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <RCC_Delay+0x34>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <RCC_Delay+0x38>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	0a5b      	lsrs	r3, r3, #9
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800477c:	bf00      	nop
  }
  while (Delay --);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1e5a      	subs	r2, r3, #1
 8004782:	60fa      	str	r2, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f9      	bne.n	800477c <RCC_Delay+0x1c>
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	20000000 	.word	0x20000000
 8004798:	10624dd3 	.word	0x10624dd3

0800479c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_SRAM_Init+0x1c>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b6:	d101      	bne.n	80047bc <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e038      	b.n	800482e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7fe faeb 	bl	8002dac <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3308      	adds	r3, #8
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f001 f94f 	bl	8005a84 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	461a      	mov	r2, r3
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	f001 f9b1 	bl	8005b58 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6858      	ldr	r0, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	f001 f9dc 	bl	8005bc0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	6892      	ldr	r2, [r2, #8]
 8004810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	6892      	ldr	r2, [r2, #8]
 800481c:	f041 0101 	orr.w	r1, r1, #1
 8004820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e041      	b.n	80048cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fe f9e3 	bl	8002c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f000 fd67 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e041      	b.n	800496a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f839 	bl	8004972 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 fd18 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <HAL_TIM_PWM_Start_DMA+0x28>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e022      	b.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x6e>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d109      	bne.n	80049c6 <HAL_TIM_PWM_Start_DMA+0x42>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e015      	b.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x6e>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d109      	bne.n	80049e0 <HAL_TIM_PWM_Start_DMA+0x5c>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e008      	b.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x6e>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
 80049f8:	e162      	b.n	8004cc0 <HAL_TIM_PWM_Start_DMA+0x33c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_TIM_PWM_Start_DMA+0x90>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e022      	b.n	8004a5a <HAL_TIM_PWM_Start_DMA+0xd6>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d109      	bne.n	8004a2e <HAL_TIM_PWM_Start_DMA+0xaa>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	bf0c      	ite	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	2300      	movne	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	e015      	b.n	8004a5a <HAL_TIM_PWM_Start_DMA+0xd6>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d109      	bne.n	8004a48 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e008      	b.n	8004a5a <HAL_TIM_PWM_Start_DMA+0xd6>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	bf0c      	ite	eq
 8004a54:	2301      	moveq	r3, #1
 8004a56:	2300      	movne	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d024      	beq.n	8004aa8 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start_DMA+0xea>
 8004a64:	887b      	ldrh	r3, [r7, #2]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e128      	b.n	8004cc0 <HAL_TIM_PWM_Start_DMA+0x33c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start_DMA+0xfa>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7c:	e016      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x128>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start_DMA+0x10a>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8c:	e00e      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x128>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start_DMA+0x11a>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a9c:	e006      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x128>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aa6:	e001      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e109      	b.n	8004cc0 <HAL_TIM_PWM_Start_DMA+0x33c>
  }

  switch (Channel)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	f200 80ae 	bhi.w	8004c10 <HAL_TIM_PWM_Start_DMA+0x28c>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <HAL_TIM_PWM_Start_DMA+0x138>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004c11 	.word	0x08004c11
 8004ac4:	08004c11 	.word	0x08004c11
 8004ac8:	08004c11 	.word	0x08004c11
 8004acc:	08004b39 	.word	0x08004b39
 8004ad0:	08004c11 	.word	0x08004c11
 8004ad4:	08004c11 	.word	0x08004c11
 8004ad8:	08004c11 	.word	0x08004c11
 8004adc:	08004b81 	.word	0x08004b81
 8004ae0:	08004c11 	.word	0x08004c11
 8004ae4:	08004c11 	.word	0x08004c11
 8004ae8:	08004c11 	.word	0x08004c11
 8004aec:	08004bc9 	.word	0x08004bc9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	4a74      	ldr	r2, [pc, #464]	; (8004cc8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	4a73      	ldr	r2, [pc, #460]	; (8004ccc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	4a72      	ldr	r2, [pc, #456]	; (8004cd0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3334      	adds	r3, #52	; 0x34
 8004b14:	461a      	mov	r2, r3
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	f7fe fcb8 	bl	800348c <HAL_DMA_Start_IT>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0cc      	b.n	8004cc0 <HAL_TIM_PWM_Start_DMA+0x33c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b34:	60da      	str	r2, [r3, #12]
      break;
 8004b36:	e06c      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	4a62      	ldr	r2, [pc, #392]	; (8004cc8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	4a61      	ldr	r2, [pc, #388]	; (8004ccc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	4a60      	ldr	r2, [pc, #384]	; (8004cd0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3338      	adds	r3, #56	; 0x38
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	f7fe fc94 	bl	800348c <HAL_DMA_Start_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0a8      	b.n	8004cc0 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b7c:	60da      	str	r2, [r3, #12]
      break;
 8004b7e:	e048      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	4a50      	ldr	r2, [pc, #320]	; (8004cc8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	4a4f      	ldr	r2, [pc, #316]	; (8004ccc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a4e      	ldr	r2, [pc, #312]	; (8004cd0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	333c      	adds	r3, #60	; 0x3c
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	f7fe fc70 	bl	800348c <HAL_DMA_Start_IT>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e084      	b.n	8004cc0 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc4:	60da      	str	r2, [r3, #12]
      break;
 8004bc6:	e024      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	4a3e      	ldr	r2, [pc, #248]	; (8004cc8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ccc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3340      	adds	r3, #64	; 0x40
 8004bec:	461a      	mov	r2, r3
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	f7fe fc4c 	bl	800348c <HAL_DMA_Start_IT>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e060      	b.n	8004cc0 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c0c:	60da      	str	r2, [r3, #12]
      break;
 8004c0e:	e000      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004c10:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fe50 	bl	80058c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2b      	ldr	r2, [pc, #172]	; (8004cd4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_PWM_Start_DMA+0x2b4>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_TIM_PWM_Start_DMA+0x2b6>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_TIM_PWM_Start_DMA+0x2ca>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_TIM_PWM_Start_DMA+0x306>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_TIM_PWM_Start_DMA+0x306>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d00e      	beq.n	8004c8a <HAL_TIM_PWM_Start_DMA+0x306>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <HAL_TIM_PWM_Start_DMA+0x358>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_TIM_PWM_Start_DMA+0x306>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_PWM_Start_DMA+0x306>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_TIM_PWM_Start_DMA+0x360>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d111      	bne.n	8004cae <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d010      	beq.n	8004cbe <HAL_TIM_PWM_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	e007      	b.n	8004cbe <HAL_TIM_PWM_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	08005237 	.word	0x08005237
 8004ccc:	080052df 	.word	0x080052df
 8004cd0:	080051a5 	.word	0x080051a5
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00

08004ce8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d855      	bhi.n	8004da4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8004cf8:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08004da5 	.word	0x08004da5
 8004d08:	08004da5 	.word	0x08004da5
 8004d0c:	08004da5 	.word	0x08004da5
 8004d10:	08004d51 	.word	0x08004d51
 8004d14:	08004da5 	.word	0x08004da5
 8004d18:	08004da5 	.word	0x08004da5
 8004d1c:	08004da5 	.word	0x08004da5
 8004d20:	08004d6d 	.word	0x08004d6d
 8004d24:	08004da5 	.word	0x08004da5
 8004d28:	08004da5 	.word	0x08004da5
 8004d2c:	08004da5 	.word	0x08004da5
 8004d30:	08004d89 	.word	0x08004d89
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe fbff 	bl	800354c <HAL_DMA_Abort_IT>
      break;
 8004d4e:	e02a      	b.n	8004da6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe fbf1 	bl	800354c <HAL_DMA_Abort_IT>
      break;
 8004d6a:	e01c      	b.n	8004da6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fbe3 	bl	800354c <HAL_DMA_Abort_IT>
      break;
 8004d86:	e00e      	b.n	8004da6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe fbd5 	bl	800354c <HAL_DMA_Abort_IT>
      break;
 8004da2:	e000      	b.n	8004da6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8004da4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fd86 	bl	80058c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2e      	ldr	r2, [pc, #184]	; (8004e74 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_TIM_PWM_Stop_DMA+0xe0>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <HAL_TIM_PWM_Stop_DMA+0x190>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_PWM_Stop_DMA+0xe4>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_TIM_PWM_Stop_DMA+0xe6>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d017      	beq.n	8004e02 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a1a      	ldr	r2, [r3, #32]
 8004dd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10f      	bne.n	8004e02 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	f240 4344 	movw	r3, #1092	; 0x444
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d107      	bne.n	8004e02 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10f      	bne.n	8004e32 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	f240 4344 	movw	r3, #1092	; 0x444
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d107      	bne.n	8004e32 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_PWM_Stop_DMA+0x15a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e40:	e013      	b.n	8004e6a <HAL_TIM_PWM_Stop_DMA+0x182>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_PWM_Stop_DMA+0x16a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e50:	e00b      	b.n	8004e6a <HAL_TIM_PWM_Stop_DMA+0x182>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d104      	bne.n	8004e62 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e60:	e003      	b.n	8004e6a <HAL_TIM_PWM_Stop_DMA+0x182>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40013400 	.word	0x40013400

08004e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0ac      	b.n	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	f200 809f 	bhi.w	8004fe4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004fe5 	.word	0x08004fe5
 8004eb4:	08004fe5 	.word	0x08004fe5
 8004eb8:	08004fe5 	.word	0x08004fe5
 8004ebc:	08004f21 	.word	0x08004f21
 8004ec0:	08004fe5 	.word	0x08004fe5
 8004ec4:	08004fe5 	.word	0x08004fe5
 8004ec8:	08004fe5 	.word	0x08004fe5
 8004ecc:	08004f63 	.word	0x08004f63
 8004ed0:	08004fe5 	.word	0x08004fe5
 8004ed4:	08004fe5 	.word	0x08004fe5
 8004ed8:	08004fe5 	.word	0x08004fe5
 8004edc:	08004fa3 	.word	0x08004fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 faa8 	bl	800543c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0208 	orr.w	r2, r2, #8
 8004efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0204 	bic.w	r2, r2, #4
 8004f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6999      	ldr	r1, [r3, #24]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	619a      	str	r2, [r3, #24]
      break;
 8004f1e:	e062      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 faf8 	bl	800551c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6999      	ldr	r1, [r3, #24]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	021a      	lsls	r2, r3, #8
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	619a      	str	r2, [r3, #24]
      break;
 8004f60:	e041      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fb4b 	bl	8005604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0208 	orr.w	r2, r2, #8
 8004f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0204 	bic.w	r2, r2, #4
 8004f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69d9      	ldr	r1, [r3, #28]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	61da      	str	r2, [r3, #28]
      break;
 8004fa0:	e021      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fb9f 	bl	80056ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	61da      	str	r2, [r3, #28]
      break;
 8004fe2:	e000      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004fe4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIM_ConfigClockSource+0x18>
 800500c:	2302      	movs	r3, #2
 800500e:	e0b3      	b.n	8005178 <HAL_TIM_ConfigClockSource+0x180>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800502e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005036:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005048:	d03e      	beq.n	80050c8 <HAL_TIM_ConfigClockSource+0xd0>
 800504a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504e:	f200 8087 	bhi.w	8005160 <HAL_TIM_ConfigClockSource+0x168>
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	f000 8085 	beq.w	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505e:	d87f      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x168>
 8005060:	2b70      	cmp	r3, #112	; 0x70
 8005062:	d01a      	beq.n	800509a <HAL_TIM_ConfigClockSource+0xa2>
 8005064:	2b70      	cmp	r3, #112	; 0x70
 8005066:	d87b      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x168>
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d050      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x116>
 800506c:	2b60      	cmp	r3, #96	; 0x60
 800506e:	d877      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x168>
 8005070:	2b50      	cmp	r3, #80	; 0x50
 8005072:	d03c      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0xf6>
 8005074:	2b50      	cmp	r3, #80	; 0x50
 8005076:	d873      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x168>
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d058      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x136>
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d86f      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x168>
 8005080:	2b30      	cmp	r3, #48	; 0x30
 8005082:	d064      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x156>
 8005084:	2b30      	cmp	r3, #48	; 0x30
 8005086:	d86b      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x168>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d060      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x156>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d867      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x168>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d05c      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x156>
 8005094:	2b10      	cmp	r3, #16
 8005096:	d05a      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005098:	e062      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6899      	ldr	r1, [r3, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f000 fbea 	bl	8005882 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	609a      	str	r2, [r3, #8]
      break;
 80050c6:	e04e      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6899      	ldr	r1, [r3, #8]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f000 fbd3 	bl	8005882 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ea:	609a      	str	r2, [r3, #8]
      break;
 80050ec:	e03b      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fb4a 	bl	8005794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2150      	movs	r1, #80	; 0x50
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fba1 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 800510c:	e02b      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	461a      	mov	r2, r3
 800511c:	f000 fb68 	bl	80057f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2160      	movs	r1, #96	; 0x60
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fb91 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 800512c:	e01b      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fb2a 	bl	8005794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2140      	movs	r1, #64	; 0x40
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb81 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 800514c:	e00b      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f000 fb78 	bl	800584e <TIM_ITRx_SetConfig>
        break;
 800515e:	e002      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005160:	bf00      	nop
 8005162:	e000      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005164:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d107      	bne.n	80051cc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ca:	e02a      	b.n	8005222 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d107      	bne.n	80051e6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2202      	movs	r2, #2
 80051da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e4:	e01d      	b.n	8005222 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d107      	bne.n	8005200 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2204      	movs	r2, #4
 80051f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fe:	e010      	b.n	8005222 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	429a      	cmp	r2, r3
 8005208:	d107      	bne.n	800521a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2208      	movs	r2, #8
 800520e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005218:	e003      	b.n	8005222 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff ffb5 	bl	8005192 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	771a      	strb	r2, [r3, #28]
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	429a      	cmp	r2, r3
 800524c:	d10b      	bne.n	8005266 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d136      	bne.n	80052ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005264:	e031      	b.n	80052ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d10b      	bne.n	8005288 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2202      	movs	r2, #2
 8005274:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d125      	bne.n	80052ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005286:	e020      	b.n	80052ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	d10b      	bne.n	80052aa <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2204      	movs	r2, #4
 8005296:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d114      	bne.n	80052ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a8:	e00f      	b.n	80052ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d10a      	bne.n	80052ca <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2208      	movs	r2, #8
 80052b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7fc fa84 	bl	80017d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	771a      	strb	r2, [r3, #28]
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d103      	bne.n	80052fe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	771a      	strb	r2, [r3, #28]
 80052fc:	e019      	b.n	8005332 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d103      	bne.n	8005310 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2202      	movs	r2, #2
 800530c:	771a      	strb	r2, [r3, #28]
 800530e:	e010      	b.n	8005332 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d103      	bne.n	8005322 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2204      	movs	r2, #4
 800531e:	771a      	strb	r2, [r3, #28]
 8005320:	e007      	b.n	8005332 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	429a      	cmp	r2, r3
 800532a:	d102      	bne.n	8005332 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2208      	movs	r2, #8
 8005330:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f7ff ff24 	bl	8005180 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	771a      	strb	r2, [r3, #28]
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a33      	ldr	r2, [pc, #204]	; (8005428 <TIM_Base_SetConfig+0xe0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a32      	ldr	r2, [pc, #200]	; (800542c <TIM_Base_SetConfig+0xe4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00f      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536e:	d00b      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a2f      	ldr	r2, [pc, #188]	; (8005430 <TIM_Base_SetConfig+0xe8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a2e      	ldr	r2, [pc, #184]	; (8005434 <TIM_Base_SetConfig+0xec>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <TIM_Base_SetConfig+0xf0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d108      	bne.n	800539a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a22      	ldr	r2, [pc, #136]	; (8005428 <TIM_Base_SetConfig+0xe0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <TIM_Base_SetConfig+0x82>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a21      	ldr	r2, [pc, #132]	; (800542c <TIM_Base_SetConfig+0xe4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00f      	beq.n	80053ca <TIM_Base_SetConfig+0x82>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b0:	d00b      	beq.n	80053ca <TIM_Base_SetConfig+0x82>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <TIM_Base_SetConfig+0xe8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <TIM_Base_SetConfig+0x82>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <TIM_Base_SetConfig+0xec>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0x82>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <TIM_Base_SetConfig+0xf0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a09      	ldr	r2, [pc, #36]	; (8005428 <TIM_Base_SetConfig+0xe0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_Base_SetConfig+0xc8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a08      	ldr	r2, [pc, #32]	; (800542c <TIM_Base_SetConfig+0xe4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d103      	bne.n	8005418 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	615a      	str	r2, [r3, #20]
}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40013400 	.word	0x40013400
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40000c00 	.word	0x40000c00

0800543c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 0302 	bic.w	r3, r3, #2
 8005484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a20      	ldr	r2, [pc, #128]	; (8005514 <TIM_OC1_SetConfig+0xd8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_OC1_SetConfig+0x64>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a1f      	ldr	r2, [pc, #124]	; (8005518 <TIM_OC1_SetConfig+0xdc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d10c      	bne.n	80054ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f023 0308 	bic.w	r3, r3, #8
 80054a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a15      	ldr	r2, [pc, #84]	; (8005514 <TIM_OC1_SetConfig+0xd8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_OC1_SetConfig+0x8e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a14      	ldr	r2, [pc, #80]	; (8005518 <TIM_OC1_SetConfig+0xdc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d111      	bne.n	80054ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	621a      	str	r2, [r3, #32]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40013400 	.word	0x40013400

0800551c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0210 	bic.w	r2, r3, #16
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f023 0320 	bic.w	r3, r3, #32
 8005566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a21      	ldr	r2, [pc, #132]	; (80055fc <TIM_OC2_SetConfig+0xe0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_OC2_SetConfig+0x68>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a20      	ldr	r2, [pc, #128]	; (8005600 <TIM_OC2_SetConfig+0xe4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d10d      	bne.n	80055a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800558a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a16      	ldr	r2, [pc, #88]	; (80055fc <TIM_OC2_SetConfig+0xe0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC2_SetConfig+0x94>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <TIM_OC2_SetConfig+0xe4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d113      	bne.n	80055d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40013400 	.word	0x40013400

08005604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800564c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a21      	ldr	r2, [pc, #132]	; (80056e4 <TIM_OC3_SetConfig+0xe0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_OC3_SetConfig+0x66>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a20      	ldr	r2, [pc, #128]	; (80056e8 <TIM_OC3_SetConfig+0xe4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d10d      	bne.n	8005686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a16      	ldr	r2, [pc, #88]	; (80056e4 <TIM_OC3_SetConfig+0xe0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_OC3_SetConfig+0x92>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a15      	ldr	r2, [pc, #84]	; (80056e8 <TIM_OC3_SetConfig+0xe4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d113      	bne.n	80056be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	621a      	str	r2, [r3, #32]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40013400 	.word	0x40013400

080056ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a11      	ldr	r2, [pc, #68]	; (800578c <TIM_OC4_SetConfig+0xa0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_OC4_SetConfig+0x68>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a10      	ldr	r2, [pc, #64]	; (8005790 <TIM_OC4_SetConfig+0xa4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d109      	bne.n	8005768 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800575a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	019b      	lsls	r3, r3, #6
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40013400 	.word	0x40013400

08005794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f023 0201 	bic.w	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 030a 	bic.w	r3, r3, #10
 80057d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 0210 	bic.w	r2, r3, #16
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800581a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	031b      	lsls	r3, r3, #12
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800582c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	f043 0307 	orr.w	r3, r3, #7
 8005870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr

08005882 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005882:	b480      	push	{r7}
 8005884:	b087      	sub	sp, #28
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	021a      	lsls	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	609a      	str	r2, [r3, #8]
}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2201      	movs	r2, #1
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1a      	ldr	r2, [r3, #32]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	401a      	ands	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	fa01 f303 	lsl.w	r3, r1, r3
 80058f8:	431a      	orrs	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800591c:	2302      	movs	r3, #2
 800591e:	e050      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a14      	ldr	r2, [pc, #80]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a12      	ldr	r2, [pc, #72]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40013400 	.word	0x40013400
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00

080059e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e03d      	b.n	8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
	...

08005a84 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	f023 0101 	bic.w	r1, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d102      	bne.n	8005ab4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005aae:	2340      	movs	r3, #64	; 0x40
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e001      	b.n	8005ab8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005ac4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005aca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005ad0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005ad6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005adc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005ae2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005ae8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005aee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005af4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <FSMC_NORSRAM_Init+0xd0>)
 8005b14:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b1c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005b24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	ea02 0103 	and.w	r1, r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4319      	orrs	r1, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	0008fb7f 	.word	0x0008fb7f

08005b58 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	051b      	lsls	r3, r3, #20
 8005b96:	431a      	orrs	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	3b02      	subs	r3, #2
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	3201      	adds	r2, #1
 8005bac:	4319      	orrs	r1, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bd4:	d11d      	bne.n	8005c12 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	6811      	ldr	r1, [r2, #0]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	6852      	ldr	r2, [r2, #4]
 8005bea:	0112      	lsls	r2, r2, #4
 8005bec:	4311      	orrs	r1, r2
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	6892      	ldr	r2, [r2, #8]
 8005bf2:	0212      	lsls	r2, r2, #8
 8005bf4:	4311      	orrs	r1, r2
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	6992      	ldr	r2, [r2, #24]
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	68d2      	ldr	r2, [r2, #12]
 8005c00:	0412      	lsls	r2, r2, #16
 8005c02:	430a      	orrs	r2, r1
 8005c04:	ea43 0102 	orr.w	r1, r3, r2
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005c10:	e005      	b.n	8005c1e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	cff00000 	.word	0xcff00000

08005c30 <tan>:
 8005c30:	b530      	push	{r4, r5, lr}
 8005c32:	4a12      	ldr	r2, [pc, #72]	; (8005c7c <tan+0x4c>)
 8005c34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	dc06      	bgt.n	8005c4c <tan+0x1c>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	2200      	movs	r2, #0
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	f000 fd5b 	bl	8006700 <__kernel_tan>
 8005c4a:	e006      	b.n	8005c5a <tan+0x2a>
 8005c4c:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <tan+0x50>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	dd05      	ble.n	8005c5e <tan+0x2e>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	f7fa faeb 	bl	8000230 <__aeabi_dsub>
 8005c5a:	b007      	add	sp, #28
 8005c5c:	bd30      	pop	{r4, r5, pc}
 8005c5e:	aa02      	add	r2, sp, #8
 8005c60:	f000 f812 	bl	8005c88 <__ieee754_rem_pio2>
 8005c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c68:	0040      	lsls	r0, r0, #1
 8005c6a:	f000 0002 	and.w	r0, r0, #2
 8005c6e:	f1c0 0001 	rsb	r0, r0, #1
 8005c72:	9000      	str	r0, [sp, #0]
 8005c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c78:	e7e5      	b.n	8005c46 <tan+0x16>
 8005c7a:	bf00      	nop
 8005c7c:	3fe921fb 	.word	0x3fe921fb
 8005c80:	7fefffff 	.word	0x7fefffff
 8005c84:	00000000 	.word	0x00000000

08005c88 <__ieee754_rem_pio2>:
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	4ac4      	ldr	r2, [pc, #784]	; (8005fa0 <__ieee754_rem_pio2+0x318>)
 8005c90:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005c94:	b08d      	sub	sp, #52	; 0x34
 8005c96:	4592      	cmp	sl, r2
 8005c98:	9104      	str	r1, [sp, #16]
 8005c9a:	dc07      	bgt.n	8005cac <__ieee754_rem_pio2+0x24>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e9c4 0100 	strd	r0, r1, [r4]
 8005ca4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005ca8:	2500      	movs	r5, #0
 8005caa:	e024      	b.n	8005cf6 <__ieee754_rem_pio2+0x6e>
 8005cac:	4abd      	ldr	r2, [pc, #756]	; (8005fa4 <__ieee754_rem_pio2+0x31c>)
 8005cae:	4592      	cmp	sl, r2
 8005cb0:	dc72      	bgt.n	8005d98 <__ieee754_rem_pio2+0x110>
 8005cb2:	9b04      	ldr	r3, [sp, #16]
 8005cb4:	4dbc      	ldr	r5, [pc, #752]	; (8005fa8 <__ieee754_rem_pio2+0x320>)
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	a3ab      	add	r3, pc, #684	; (adr r3, 8005f68 <__ieee754_rem_pio2+0x2e0>)
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	dd36      	ble.n	8005d2e <__ieee754_rem_pio2+0xa6>
 8005cc0:	f7fa fab6 	bl	8000230 <__aeabi_dsub>
 8005cc4:	45aa      	cmp	sl, r5
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	460f      	mov	r7, r1
 8005cca:	d018      	beq.n	8005cfe <__ieee754_rem_pio2+0x76>
 8005ccc:	a3a8      	add	r3, pc, #672	; (adr r3, 8005f70 <__ieee754_rem_pio2+0x2e8>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa faad 	bl	8000230 <__aeabi_dsub>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4630      	mov	r0, r6
 8005cdc:	e9c4 2300 	strd	r2, r3, [r4]
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	f7fa faa5 	bl	8000230 <__aeabi_dsub>
 8005ce6:	a3a2      	add	r3, pc, #648	; (adr r3, 8005f70 <__ieee754_rem_pio2+0x2e8>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa faa0 	bl	8000230 <__aeabi_dsub>
 8005cf0:	2501      	movs	r5, #1
 8005cf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	b00d      	add	sp, #52	; 0x34
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfe:	a39e      	add	r3, pc, #632	; (adr r3, 8005f78 <__ieee754_rem_pio2+0x2f0>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fa94 	bl	8000230 <__aeabi_dsub>
 8005d08:	a39d      	add	r3, pc, #628	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x2f8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460f      	mov	r7, r1
 8005d12:	f7fa fa8d 	bl	8000230 <__aeabi_dsub>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	e9c4 2300 	strd	r2, r3, [r4]
 8005d20:	4639      	mov	r1, r7
 8005d22:	f7fa fa85 	bl	8000230 <__aeabi_dsub>
 8005d26:	a396      	add	r3, pc, #600	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x2f8>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	e7de      	b.n	8005cec <__ieee754_rem_pio2+0x64>
 8005d2e:	f7fa fa81 	bl	8000234 <__adddf3>
 8005d32:	45aa      	cmp	sl, r5
 8005d34:	4606      	mov	r6, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	d016      	beq.n	8005d68 <__ieee754_rem_pio2+0xe0>
 8005d3a:	a38d      	add	r3, pc, #564	; (adr r3, 8005f70 <__ieee754_rem_pio2+0x2e8>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fa78 	bl	8000234 <__adddf3>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4630      	mov	r0, r6
 8005d4a:	e9c4 2300 	strd	r2, r3, [r4]
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa fa6e 	bl	8000230 <__aeabi_dsub>
 8005d54:	a386      	add	r3, pc, #536	; (adr r3, 8005f70 <__ieee754_rem_pio2+0x2e8>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa fa6b 	bl	8000234 <__adddf3>
 8005d5e:	f04f 35ff 	mov.w	r5, #4294967295
 8005d62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d66:	e7c6      	b.n	8005cf6 <__ieee754_rem_pio2+0x6e>
 8005d68:	a383      	add	r3, pc, #524	; (adr r3, 8005f78 <__ieee754_rem_pio2+0x2f0>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fa61 	bl	8000234 <__adddf3>
 8005d72:	a383      	add	r3, pc, #524	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x2f8>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	4606      	mov	r6, r0
 8005d7a:	460f      	mov	r7, r1
 8005d7c:	f7fa fa5a 	bl	8000234 <__adddf3>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4630      	mov	r0, r6
 8005d86:	e9c4 2300 	strd	r2, r3, [r4]
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	f7fa fa50 	bl	8000230 <__aeabi_dsub>
 8005d90:	a37b      	add	r3, pc, #492	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x2f8>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	e7e0      	b.n	8005d5a <__ieee754_rem_pio2+0xd2>
 8005d98:	4a84      	ldr	r2, [pc, #528]	; (8005fac <__ieee754_rem_pio2+0x324>)
 8005d9a:	4592      	cmp	sl, r2
 8005d9c:	f300 80d5 	bgt.w	8005f4a <__ieee754_rem_pio2+0x2c2>
 8005da0:	f000 feaa 	bl	8006af8 <fabs>
 8005da4:	a378      	add	r3, pc, #480	; (adr r3, 8005f88 <__ieee754_rem_pio2+0x300>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	4606      	mov	r6, r0
 8005dac:	460f      	mov	r7, r1
 8005dae:	f7fa fbf7 	bl	80005a0 <__aeabi_dmul>
 8005db2:	2200      	movs	r2, #0
 8005db4:	4b7e      	ldr	r3, [pc, #504]	; (8005fb0 <__ieee754_rem_pio2+0x328>)
 8005db6:	f7fa fa3d 	bl	8000234 <__adddf3>
 8005dba:	f7fa fe8b 	bl	8000ad4 <__aeabi_d2iz>
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	f7fa fb84 	bl	80004cc <__aeabi_i2d>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dcc:	a366      	add	r3, pc, #408	; (adr r3, 8005f68 <__ieee754_rem_pio2+0x2e0>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fbe5 	bl	80005a0 <__aeabi_dmul>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4639      	mov	r1, r7
 8005dde:	f7fa fa27 	bl	8000230 <__aeabi_dsub>
 8005de2:	a363      	add	r3, pc, #396	; (adr r3, 8005f70 <__ieee754_rem_pio2+0x2e8>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	4680      	mov	r8, r0
 8005dea:	4689      	mov	r9, r1
 8005dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005df0:	f7fa fbd6 	bl	80005a0 <__aeabi_dmul>
 8005df4:	2d1f      	cmp	r5, #31
 8005df6:	4606      	mov	r6, r0
 8005df8:	460f      	mov	r7, r1
 8005dfa:	dc0e      	bgt.n	8005e1a <__ieee754_rem_pio2+0x192>
 8005dfc:	4b6d      	ldr	r3, [pc, #436]	; (8005fb4 <__ieee754_rem_pio2+0x32c>)
 8005dfe:	1e6a      	subs	r2, r5, #1
 8005e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e04:	4553      	cmp	r3, sl
 8005e06:	d008      	beq.n	8005e1a <__ieee754_rem_pio2+0x192>
 8005e08:	4632      	mov	r2, r6
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f7fa fa0e 	bl	8000230 <__aeabi_dsub>
 8005e14:	e9c4 0100 	strd	r0, r1, [r4]
 8005e18:	e013      	b.n	8005e42 <__ieee754_rem_pio2+0x1ba>
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	4640      	mov	r0, r8
 8005e20:	4649      	mov	r1, r9
 8005e22:	f7fa fa05 	bl	8000230 <__aeabi_dsub>
 8005e26:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005e2a:	9305      	str	r3, [sp, #20]
 8005e2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e30:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005e34:	f1ba 0f10 	cmp.w	sl, #16
 8005e38:	dc1f      	bgt.n	8005e7a <__ieee754_rem_pio2+0x1f2>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	e9c4 2300 	strd	r2, r3, [r4]
 8005e42:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005e46:	4640      	mov	r0, r8
 8005e48:	4653      	mov	r3, sl
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	f7fa f9f0 	bl	8000230 <__aeabi_dsub>
 8005e50:	4632      	mov	r2, r6
 8005e52:	463b      	mov	r3, r7
 8005e54:	f7fa f9ec 	bl	8000230 <__aeabi_dsub>
 8005e58:	460b      	mov	r3, r1
 8005e5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e5e:	9904      	ldr	r1, [sp, #16]
 8005e60:	4602      	mov	r2, r0
 8005e62:	2900      	cmp	r1, #0
 8005e64:	f6bf af47 	bge.w	8005cf6 <__ieee754_rem_pio2+0x6e>
 8005e68:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8005e6c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005e70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e74:	60e3      	str	r3, [r4, #12]
 8005e76:	426d      	negs	r5, r5
 8005e78:	e73d      	b.n	8005cf6 <__ieee754_rem_pio2+0x6e>
 8005e7a:	a33f      	add	r3, pc, #252	; (adr r3, 8005f78 <__ieee754_rem_pio2+0x2f0>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e84:	f7fa fb8c 	bl	80005a0 <__aeabi_dmul>
 8005e88:	4606      	mov	r6, r0
 8005e8a:	460f      	mov	r7, r1
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa f9cc 	bl	8000230 <__aeabi_dsub>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	468b      	mov	fp, r1
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	f7fa f9c4 	bl	8000230 <__aeabi_dsub>
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	463b      	mov	r3, r7
 8005eac:	f7fa f9c0 	bl	8000230 <__aeabi_dsub>
 8005eb0:	a333      	add	r3, pc, #204	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x2f8>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ebe:	f7fa fb6f 	bl	80005a0 <__aeabi_dmul>
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	f7fa f9b3 	bl	8000230 <__aeabi_dsub>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460f      	mov	r7, r1
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	4659      	mov	r1, fp
 8005ed6:	f7fa f9ab 	bl	8000230 <__aeabi_dsub>
 8005eda:	9a05      	ldr	r2, [sp, #20]
 8005edc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b31      	cmp	r3, #49	; 0x31
 8005ee4:	dc06      	bgt.n	8005ef4 <__ieee754_rem_pio2+0x26c>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	46d0      	mov	r8, sl
 8005eec:	46d9      	mov	r9, fp
 8005eee:	e9c4 2300 	strd	r2, r3, [r4]
 8005ef2:	e7a6      	b.n	8005e42 <__ieee754_rem_pio2+0x1ba>
 8005ef4:	a326      	add	r3, pc, #152	; (adr r3, 8005f90 <__ieee754_rem_pio2+0x308>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005efe:	f7fa fb4f 	bl	80005a0 <__aeabi_dmul>
 8005f02:	4606      	mov	r6, r0
 8005f04:	460f      	mov	r7, r1
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	f7fa f98f 	bl	8000230 <__aeabi_dsub>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4680      	mov	r8, r0
 8005f18:	4689      	mov	r9, r1
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	4659      	mov	r1, fp
 8005f1e:	f7fa f987 	bl	8000230 <__aeabi_dsub>
 8005f22:	4632      	mov	r2, r6
 8005f24:	463b      	mov	r3, r7
 8005f26:	f7fa f983 	bl	8000230 <__aeabi_dsub>
 8005f2a:	a31b      	add	r3, pc, #108	; (adr r3, 8005f98 <__ieee754_rem_pio2+0x310>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f38:	f7fa fb32 	bl	80005a0 <__aeabi_dmul>
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	463b      	mov	r3, r7
 8005f40:	f7fa f976 	bl	8000230 <__aeabi_dsub>
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	e75e      	b.n	8005e08 <__ieee754_rem_pio2+0x180>
 8005f4a:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <__ieee754_rem_pio2+0x330>)
 8005f4c:	4592      	cmp	sl, r2
 8005f4e:	dd35      	ble.n	8005fbc <__ieee754_rem_pio2+0x334>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	f7fa f96c 	bl	8000230 <__aeabi_dsub>
 8005f58:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f5c:	e9c4 0100 	strd	r0, r1, [r4]
 8005f60:	e6a2      	b.n	8005ca8 <__ieee754_rem_pio2+0x20>
 8005f62:	bf00      	nop
 8005f64:	f3af 8000 	nop.w
 8005f68:	54400000 	.word	0x54400000
 8005f6c:	3ff921fb 	.word	0x3ff921fb
 8005f70:	1a626331 	.word	0x1a626331
 8005f74:	3dd0b461 	.word	0x3dd0b461
 8005f78:	1a600000 	.word	0x1a600000
 8005f7c:	3dd0b461 	.word	0x3dd0b461
 8005f80:	2e037073 	.word	0x2e037073
 8005f84:	3ba3198a 	.word	0x3ba3198a
 8005f88:	6dc9c883 	.word	0x6dc9c883
 8005f8c:	3fe45f30 	.word	0x3fe45f30
 8005f90:	2e000000 	.word	0x2e000000
 8005f94:	3ba3198a 	.word	0x3ba3198a
 8005f98:	252049c1 	.word	0x252049c1
 8005f9c:	397b839a 	.word	0x397b839a
 8005fa0:	3fe921fb 	.word	0x3fe921fb
 8005fa4:	4002d97b 	.word	0x4002d97b
 8005fa8:	3ff921fb 	.word	0x3ff921fb
 8005fac:	413921fb 	.word	0x413921fb
 8005fb0:	3fe00000 	.word	0x3fe00000
 8005fb4:	08007d3c 	.word	0x08007d3c
 8005fb8:	7fefffff 	.word	0x7fefffff
 8005fbc:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005fc0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005fc4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005fc8:	460f      	mov	r7, r1
 8005fca:	4606      	mov	r6, r0
 8005fcc:	f7fa fd82 	bl	8000ad4 <__aeabi_d2iz>
 8005fd0:	f7fa fa7c 	bl	80004cc <__aeabi_i2d>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005fe0:	f7fa f926 	bl	8000230 <__aeabi_dsub>
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4b22      	ldr	r3, [pc, #136]	; (8006070 <__ieee754_rem_pio2+0x3e8>)
 8005fe8:	f7fa fada 	bl	80005a0 <__aeabi_dmul>
 8005fec:	460f      	mov	r7, r1
 8005fee:	4606      	mov	r6, r0
 8005ff0:	f7fa fd70 	bl	8000ad4 <__aeabi_d2iz>
 8005ff4:	f7fa fa6a 	bl	80004cc <__aeabi_i2d>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4639      	mov	r1, r7
 8006000:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006004:	f7fa f914 	bl	8000230 <__aeabi_dsub>
 8006008:	2200      	movs	r2, #0
 800600a:	4b19      	ldr	r3, [pc, #100]	; (8006070 <__ieee754_rem_pio2+0x3e8>)
 800600c:	f7fa fac8 	bl	80005a0 <__aeabi_dmul>
 8006010:	f04f 0803 	mov.w	r8, #3
 8006014:	2600      	movs	r6, #0
 8006016:	2700      	movs	r7, #0
 8006018:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800601c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8006020:	4632      	mov	r2, r6
 8006022:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8006026:	463b      	mov	r3, r7
 8006028:	46c2      	mov	sl, r8
 800602a:	f108 38ff 	add.w	r8, r8, #4294967295
 800602e:	f7fa fd1f 	bl	8000a70 <__aeabi_dcmpeq>
 8006032:	2800      	cmp	r0, #0
 8006034:	d1f4      	bne.n	8006020 <__ieee754_rem_pio2+0x398>
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <__ieee754_rem_pio2+0x3ec>)
 8006038:	462a      	mov	r2, r5
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	2302      	movs	r3, #2
 800603e:	4621      	mov	r1, r4
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	a806      	add	r0, sp, #24
 8006044:	4653      	mov	r3, sl
 8006046:	f000 f817 	bl	8006078 <__kernel_rem_pio2>
 800604a:	9b04      	ldr	r3, [sp, #16]
 800604c:	4605      	mov	r5, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	f6bf ae51 	bge.w	8005cf6 <__ieee754_rem_pio2+0x6e>
 8006054:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006058:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800605c:	e9c4 2300 	strd	r2, r3, [r4]
 8006060:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006068:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800606c:	e703      	b.n	8005e76 <__ieee754_rem_pio2+0x1ee>
 800606e:	bf00      	nop
 8006070:	41700000 	.word	0x41700000
 8006074:	08007dbc 	.word	0x08007dbc

08006078 <__kernel_rem_pio2>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006080:	9308      	str	r3, [sp, #32]
 8006082:	9106      	str	r1, [sp, #24]
 8006084:	4bb6      	ldr	r3, [pc, #728]	; (8006360 <__kernel_rem_pio2+0x2e8>)
 8006086:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006088:	f112 0f14 	cmn.w	r2, #20
 800608c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006090:	bfa8      	it	ge
 8006092:	1ed4      	subge	r4, r2, #3
 8006094:	9302      	str	r3, [sp, #8]
 8006096:	9b08      	ldr	r3, [sp, #32]
 8006098:	bfb8      	it	lt
 800609a:	2400      	movlt	r4, #0
 800609c:	f103 33ff 	add.w	r3, r3, #4294967295
 80060a0:	9307      	str	r3, [sp, #28]
 80060a2:	bfa4      	itt	ge
 80060a4:	2318      	movge	r3, #24
 80060a6:	fb94 f4f3 	sdivge	r4, r4, r3
 80060aa:	f06f 0317 	mvn.w	r3, #23
 80060ae:	fb04 3303 	mla	r3, r4, r3, r3
 80060b2:	eb03 0b02 	add.w	fp, r3, r2
 80060b6:	9a07      	ldr	r2, [sp, #28]
 80060b8:	9b02      	ldr	r3, [sp, #8]
 80060ba:	1aa7      	subs	r7, r4, r2
 80060bc:	eb03 0802 	add.w	r8, r3, r2
 80060c0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80060c2:	2500      	movs	r5, #0
 80060c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80060c8:	2200      	movs	r2, #0
 80060ca:	2300      	movs	r3, #0
 80060cc:	9009      	str	r0, [sp, #36]	; 0x24
 80060ce:	ae20      	add	r6, sp, #128	; 0x80
 80060d0:	4545      	cmp	r5, r8
 80060d2:	dd14      	ble.n	80060fe <__kernel_rem_pio2+0x86>
 80060d4:	f04f 0800 	mov.w	r8, #0
 80060d8:	9a08      	ldr	r2, [sp, #32]
 80060da:	ab20      	add	r3, sp, #128	; 0x80
 80060dc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80060e0:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80060e4:	9b02      	ldr	r3, [sp, #8]
 80060e6:	4598      	cmp	r8, r3
 80060e8:	dc35      	bgt.n	8006156 <__kernel_rem_pio2+0xde>
 80060ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ec:	2200      	movs	r2, #0
 80060ee:	f1a3 0908 	sub.w	r9, r3, #8
 80060f2:	2300      	movs	r3, #0
 80060f4:	462f      	mov	r7, r5
 80060f6:	2600      	movs	r6, #0
 80060f8:	e9cd 2300 	strd	r2, r3, [sp]
 80060fc:	e01f      	b.n	800613e <__kernel_rem_pio2+0xc6>
 80060fe:	42ef      	cmn	r7, r5
 8006100:	d40b      	bmi.n	800611a <__kernel_rem_pio2+0xa2>
 8006102:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006106:	e9cd 2300 	strd	r2, r3, [sp]
 800610a:	f7fa f9df 	bl	80004cc <__aeabi_i2d>
 800610e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006112:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006116:	3501      	adds	r5, #1
 8006118:	e7da      	b.n	80060d0 <__kernel_rem_pio2+0x58>
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	e7f8      	b.n	8006112 <__kernel_rem_pio2+0x9a>
 8006120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006124:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006128:	f7fa fa3a 	bl	80005a0 <__aeabi_dmul>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006134:	f7fa f87e 	bl	8000234 <__adddf3>
 8006138:	e9cd 0100 	strd	r0, r1, [sp]
 800613c:	3601      	adds	r6, #1
 800613e:	9b07      	ldr	r3, [sp, #28]
 8006140:	3f08      	subs	r7, #8
 8006142:	429e      	cmp	r6, r3
 8006144:	ddec      	ble.n	8006120 <__kernel_rem_pio2+0xa8>
 8006146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800614a:	f108 0801 	add.w	r8, r8, #1
 800614e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8006152:	3508      	adds	r5, #8
 8006154:	e7c6      	b.n	80060e4 <__kernel_rem_pio2+0x6c>
 8006156:	9b02      	ldr	r3, [sp, #8]
 8006158:	aa0c      	add	r2, sp, #48	; 0x30
 800615a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800615e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006160:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006162:	9e02      	ldr	r6, [sp, #8]
 8006164:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006168:	930a      	str	r3, [sp, #40]	; 0x28
 800616a:	ab98      	add	r3, sp, #608	; 0x260
 800616c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006170:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006174:	ab70      	add	r3, sp, #448	; 0x1c0
 8006176:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800617a:	46d0      	mov	r8, sl
 800617c:	46b1      	mov	r9, r6
 800617e:	af0c      	add	r7, sp, #48	; 0x30
 8006180:	9700      	str	r7, [sp, #0]
 8006182:	f1b9 0f00 	cmp.w	r9, #0
 8006186:	f1a8 0808 	sub.w	r8, r8, #8
 800618a:	dc71      	bgt.n	8006270 <__kernel_rem_pio2+0x1f8>
 800618c:	465a      	mov	r2, fp
 800618e:	4620      	mov	r0, r4
 8006190:	4629      	mov	r1, r5
 8006192:	f000 fd35 	bl	8006c00 <scalbn>
 8006196:	2200      	movs	r2, #0
 8006198:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800619c:	4604      	mov	r4, r0
 800619e:	460d      	mov	r5, r1
 80061a0:	f7fa f9fe 	bl	80005a0 <__aeabi_dmul>
 80061a4:	f000 fcac 	bl	8006b00 <floor>
 80061a8:	2200      	movs	r2, #0
 80061aa:	4b6e      	ldr	r3, [pc, #440]	; (8006364 <__kernel_rem_pio2+0x2ec>)
 80061ac:	f7fa f9f8 	bl	80005a0 <__aeabi_dmul>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	f7fa f83a 	bl	8000230 <__aeabi_dsub>
 80061bc:	460d      	mov	r5, r1
 80061be:	4604      	mov	r4, r0
 80061c0:	f7fa fc88 	bl	8000ad4 <__aeabi_d2iz>
 80061c4:	9004      	str	r0, [sp, #16]
 80061c6:	f7fa f981 	bl	80004cc <__aeabi_i2d>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa f82d 	bl	8000230 <__aeabi_dsub>
 80061d6:	f1bb 0f00 	cmp.w	fp, #0
 80061da:	4680      	mov	r8, r0
 80061dc:	4689      	mov	r9, r1
 80061de:	dd70      	ble.n	80062c2 <__kernel_rem_pio2+0x24a>
 80061e0:	1e72      	subs	r2, r6, #1
 80061e2:	ab0c      	add	r3, sp, #48	; 0x30
 80061e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80061e8:	9c04      	ldr	r4, [sp, #16]
 80061ea:	f1cb 0118 	rsb	r1, fp, #24
 80061ee:	fa40 f301 	asr.w	r3, r0, r1
 80061f2:	441c      	add	r4, r3
 80061f4:	408b      	lsls	r3, r1
 80061f6:	1ac0      	subs	r0, r0, r3
 80061f8:	ab0c      	add	r3, sp, #48	; 0x30
 80061fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80061fe:	f1cb 0317 	rsb	r3, fp, #23
 8006202:	9404      	str	r4, [sp, #16]
 8006204:	fa40 f303 	asr.w	r3, r0, r3
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	9b00      	ldr	r3, [sp, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	dd66      	ble.n	80062de <__kernel_rem_pio2+0x266>
 8006210:	2200      	movs	r2, #0
 8006212:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006216:	4614      	mov	r4, r2
 8006218:	9b04      	ldr	r3, [sp, #16]
 800621a:	3301      	adds	r3, #1
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	4296      	cmp	r6, r2
 8006220:	f300 80ac 	bgt.w	800637c <__kernel_rem_pio2+0x304>
 8006224:	f1bb 0f00 	cmp.w	fp, #0
 8006228:	dd07      	ble.n	800623a <__kernel_rem_pio2+0x1c2>
 800622a:	f1bb 0f01 	cmp.w	fp, #1
 800622e:	f000 80b4 	beq.w	800639a <__kernel_rem_pio2+0x322>
 8006232:	f1bb 0f02 	cmp.w	fp, #2
 8006236:	f000 80ba 	beq.w	80063ae <__kernel_rem_pio2+0x336>
 800623a:	9b00      	ldr	r3, [sp, #0]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d14e      	bne.n	80062de <__kernel_rem_pio2+0x266>
 8006240:	4642      	mov	r2, r8
 8006242:	464b      	mov	r3, r9
 8006244:	2000      	movs	r0, #0
 8006246:	4948      	ldr	r1, [pc, #288]	; (8006368 <__kernel_rem_pio2+0x2f0>)
 8006248:	f7f9 fff2 	bl	8000230 <__aeabi_dsub>
 800624c:	4680      	mov	r8, r0
 800624e:	4689      	mov	r9, r1
 8006250:	2c00      	cmp	r4, #0
 8006252:	d044      	beq.n	80062de <__kernel_rem_pio2+0x266>
 8006254:	465a      	mov	r2, fp
 8006256:	2000      	movs	r0, #0
 8006258:	4943      	ldr	r1, [pc, #268]	; (8006368 <__kernel_rem_pio2+0x2f0>)
 800625a:	f000 fcd1 	bl	8006c00 <scalbn>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f7f9 ffe3 	bl	8000230 <__aeabi_dsub>
 800626a:	4680      	mov	r8, r0
 800626c:	4689      	mov	r9, r1
 800626e:	e036      	b.n	80062de <__kernel_rem_pio2+0x266>
 8006270:	2200      	movs	r2, #0
 8006272:	4b3e      	ldr	r3, [pc, #248]	; (800636c <__kernel_rem_pio2+0x2f4>)
 8006274:	4620      	mov	r0, r4
 8006276:	4629      	mov	r1, r5
 8006278:	f7fa f992 	bl	80005a0 <__aeabi_dmul>
 800627c:	f7fa fc2a 	bl	8000ad4 <__aeabi_d2iz>
 8006280:	f7fa f924 	bl	80004cc <__aeabi_i2d>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800628c:	2200      	movs	r2, #0
 800628e:	4b38      	ldr	r3, [pc, #224]	; (8006370 <__kernel_rem_pio2+0x2f8>)
 8006290:	f7fa f986 	bl	80005a0 <__aeabi_dmul>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	f7f9 ffc8 	bl	8000230 <__aeabi_dsub>
 80062a0:	f7fa fc18 	bl	8000ad4 <__aeabi_d2iz>
 80062a4:	9b00      	ldr	r3, [sp, #0]
 80062a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80062aa:	f843 0b04 	str.w	r0, [r3], #4
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80062b8:	f7f9 ffbc 	bl	8000234 <__adddf3>
 80062bc:	4604      	mov	r4, r0
 80062be:	460d      	mov	r5, r1
 80062c0:	e75f      	b.n	8006182 <__kernel_rem_pio2+0x10a>
 80062c2:	d105      	bne.n	80062d0 <__kernel_rem_pio2+0x258>
 80062c4:	1e73      	subs	r3, r6, #1
 80062c6:	aa0c      	add	r2, sp, #48	; 0x30
 80062c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80062cc:	15c3      	asrs	r3, r0, #23
 80062ce:	e79b      	b.n	8006208 <__kernel_rem_pio2+0x190>
 80062d0:	2200      	movs	r2, #0
 80062d2:	4b28      	ldr	r3, [pc, #160]	; (8006374 <__kernel_rem_pio2+0x2fc>)
 80062d4:	f7fa fbea 	bl	8000aac <__aeabi_dcmpge>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d13e      	bne.n	800635a <__kernel_rem_pio2+0x2e2>
 80062dc:	9000      	str	r0, [sp, #0]
 80062de:	2200      	movs	r2, #0
 80062e0:	2300      	movs	r3, #0
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7fa fbc3 	bl	8000a70 <__aeabi_dcmpeq>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	f000 80b1 	beq.w	8006452 <__kernel_rem_pio2+0x3da>
 80062f0:	1e74      	subs	r4, r6, #1
 80062f2:	4623      	mov	r3, r4
 80062f4:	2200      	movs	r2, #0
 80062f6:	9902      	ldr	r1, [sp, #8]
 80062f8:	428b      	cmp	r3, r1
 80062fa:	da5f      	bge.n	80063bc <__kernel_rem_pio2+0x344>
 80062fc:	2a00      	cmp	r2, #0
 80062fe:	d074      	beq.n	80063ea <__kernel_rem_pio2+0x372>
 8006300:	ab0c      	add	r3, sp, #48	; 0x30
 8006302:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006306:	f1ab 0b18 	sub.w	fp, fp, #24
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 809f 	beq.w	800644e <__kernel_rem_pio2+0x3d6>
 8006310:	465a      	mov	r2, fp
 8006312:	2000      	movs	r0, #0
 8006314:	4914      	ldr	r1, [pc, #80]	; (8006368 <__kernel_rem_pio2+0x2f0>)
 8006316:	f000 fc73 	bl	8006c00 <scalbn>
 800631a:	46a2      	mov	sl, r4
 800631c:	4606      	mov	r6, r0
 800631e:	460f      	mov	r7, r1
 8006320:	f04f 0800 	mov.w	r8, #0
 8006324:	ab70      	add	r3, sp, #448	; 0x1c0
 8006326:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800636c <__kernel_rem_pio2+0x2f4>
 800632a:	00e5      	lsls	r5, r4, #3
 800632c:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006330:	f1ba 0f00 	cmp.w	sl, #0
 8006334:	f280 80c3 	bge.w	80064be <__kernel_rem_pio2+0x446>
 8006338:	4626      	mov	r6, r4
 800633a:	2e00      	cmp	r6, #0
 800633c:	f2c0 80f5 	blt.w	800652a <__kernel_rem_pio2+0x4b2>
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <__kernel_rem_pio2+0x300>)
 8006342:	f04f 0a00 	mov.w	sl, #0
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	ab70      	add	r3, sp, #448	; 0x1c0
 800634a:	f04f 0b00 	mov.w	fp, #0
 800634e:	f04f 0800 	mov.w	r8, #0
 8006352:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006356:	1ba7      	subs	r7, r4, r6
 8006358:	e0db      	b.n	8006512 <__kernel_rem_pio2+0x49a>
 800635a:	2302      	movs	r3, #2
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	e757      	b.n	8006210 <__kernel_rem_pio2+0x198>
 8006360:	08007f08 	.word	0x08007f08
 8006364:	40200000 	.word	0x40200000
 8006368:	3ff00000 	.word	0x3ff00000
 800636c:	3e700000 	.word	0x3e700000
 8006370:	41700000 	.word	0x41700000
 8006374:	3fe00000 	.word	0x3fe00000
 8006378:	08007ec8 	.word	0x08007ec8
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	b944      	cbnz	r4, 8006392 <__kernel_rem_pio2+0x31a>
 8006380:	b11b      	cbz	r3, 800638a <__kernel_rem_pio2+0x312>
 8006382:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	2301      	movs	r3, #1
 800638a:	461c      	mov	r4, r3
 800638c:	3201      	adds	r2, #1
 800638e:	3704      	adds	r7, #4
 8006390:	e745      	b.n	800621e <__kernel_rem_pio2+0x1a6>
 8006392:	1acb      	subs	r3, r1, r3
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	4623      	mov	r3, r4
 8006398:	e7f7      	b.n	800638a <__kernel_rem_pio2+0x312>
 800639a:	1e72      	subs	r2, r6, #1
 800639c:	ab0c      	add	r3, sp, #48	; 0x30
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80063a6:	a90c      	add	r1, sp, #48	; 0x30
 80063a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80063ac:	e745      	b.n	800623a <__kernel_rem_pio2+0x1c2>
 80063ae:	1e72      	subs	r2, r6, #1
 80063b0:	ab0c      	add	r3, sp, #48	; 0x30
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80063ba:	e7f4      	b.n	80063a6 <__kernel_rem_pio2+0x32e>
 80063bc:	a90c      	add	r1, sp, #48	; 0x30
 80063be:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	430a      	orrs	r2, r1
 80063c6:	e796      	b.n	80062f6 <__kernel_rem_pio2+0x27e>
 80063c8:	3401      	adds	r4, #1
 80063ca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	d0fa      	beq.n	80063c8 <__kernel_rem_pio2+0x350>
 80063d2:	9b08      	ldr	r3, [sp, #32]
 80063d4:	f106 0801 	add.w	r8, r6, #1
 80063d8:	18f5      	adds	r5, r6, r3
 80063da:	ab20      	add	r3, sp, #128	; 0x80
 80063dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80063e0:	4434      	add	r4, r6
 80063e2:	4544      	cmp	r4, r8
 80063e4:	da04      	bge.n	80063f0 <__kernel_rem_pio2+0x378>
 80063e6:	4626      	mov	r6, r4
 80063e8:	e6bf      	b.n	800616a <__kernel_rem_pio2+0xf2>
 80063ea:	2401      	movs	r4, #1
 80063ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ee:	e7ec      	b.n	80063ca <__kernel_rem_pio2+0x352>
 80063f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f2:	f04f 0900 	mov.w	r9, #0
 80063f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80063fa:	f7fa f867 	bl	80004cc <__aeabi_i2d>
 80063fe:	2600      	movs	r6, #0
 8006400:	2700      	movs	r7, #0
 8006402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006404:	e9c5 0100 	strd	r0, r1, [r5]
 8006408:	3b08      	subs	r3, #8
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	9504      	str	r5, [sp, #16]
 800640e:	9b07      	ldr	r3, [sp, #28]
 8006410:	4599      	cmp	r9, r3
 8006412:	dd05      	ble.n	8006420 <__kernel_rem_pio2+0x3a8>
 8006414:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006418:	f108 0801 	add.w	r8, r8, #1
 800641c:	3508      	adds	r5, #8
 800641e:	e7e0      	b.n	80063e2 <__kernel_rem_pio2+0x36a>
 8006420:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006424:	9900      	ldr	r1, [sp, #0]
 8006426:	f109 0901 	add.w	r9, r9, #1
 800642a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800642e:	9100      	str	r1, [sp, #0]
 8006430:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8006434:	f8cd c010 	str.w	ip, [sp, #16]
 8006438:	f7fa f8b2 	bl	80005a0 <__aeabi_dmul>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7f9 fef6 	bl	8000234 <__adddf3>
 8006448:	4606      	mov	r6, r0
 800644a:	460f      	mov	r7, r1
 800644c:	e7df      	b.n	800640e <__kernel_rem_pio2+0x396>
 800644e:	3c01      	subs	r4, #1
 8006450:	e756      	b.n	8006300 <__kernel_rem_pio2+0x288>
 8006452:	f1cb 0200 	rsb	r2, fp, #0
 8006456:	4640      	mov	r0, r8
 8006458:	4649      	mov	r1, r9
 800645a:	f000 fbd1 	bl	8006c00 <scalbn>
 800645e:	2200      	movs	r2, #0
 8006460:	4ba4      	ldr	r3, [pc, #656]	; (80066f4 <__kernel_rem_pio2+0x67c>)
 8006462:	4604      	mov	r4, r0
 8006464:	460d      	mov	r5, r1
 8006466:	f7fa fb21 	bl	8000aac <__aeabi_dcmpge>
 800646a:	b1f8      	cbz	r0, 80064ac <__kernel_rem_pio2+0x434>
 800646c:	2200      	movs	r2, #0
 800646e:	4ba2      	ldr	r3, [pc, #648]	; (80066f8 <__kernel_rem_pio2+0x680>)
 8006470:	4620      	mov	r0, r4
 8006472:	4629      	mov	r1, r5
 8006474:	f7fa f894 	bl	80005a0 <__aeabi_dmul>
 8006478:	f7fa fb2c 	bl	8000ad4 <__aeabi_d2iz>
 800647c:	4607      	mov	r7, r0
 800647e:	f7fa f825 	bl	80004cc <__aeabi_i2d>
 8006482:	2200      	movs	r2, #0
 8006484:	4b9b      	ldr	r3, [pc, #620]	; (80066f4 <__kernel_rem_pio2+0x67c>)
 8006486:	f7fa f88b 	bl	80005a0 <__aeabi_dmul>
 800648a:	460b      	mov	r3, r1
 800648c:	4602      	mov	r2, r0
 800648e:	4629      	mov	r1, r5
 8006490:	4620      	mov	r0, r4
 8006492:	f7f9 fecd 	bl	8000230 <__aeabi_dsub>
 8006496:	f7fa fb1d 	bl	8000ad4 <__aeabi_d2iz>
 800649a:	1c74      	adds	r4, r6, #1
 800649c:	ab0c      	add	r3, sp, #48	; 0x30
 800649e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80064a2:	f10b 0b18 	add.w	fp, fp, #24
 80064a6:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80064aa:	e731      	b.n	8006310 <__kernel_rem_pio2+0x298>
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7fa fb10 	bl	8000ad4 <__aeabi_d2iz>
 80064b4:	ab0c      	add	r3, sp, #48	; 0x30
 80064b6:	4634      	mov	r4, r6
 80064b8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80064bc:	e728      	b.n	8006310 <__kernel_rem_pio2+0x298>
 80064be:	ab0c      	add	r3, sp, #48	; 0x30
 80064c0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80064c4:	f7fa f802 	bl	80004cc <__aeabi_i2d>
 80064c8:	4632      	mov	r2, r6
 80064ca:	463b      	mov	r3, r7
 80064cc:	f7fa f868 	bl	80005a0 <__aeabi_dmul>
 80064d0:	4642      	mov	r2, r8
 80064d2:	e86b 0102 	strd	r0, r1, [fp], #-8
 80064d6:	464b      	mov	r3, r9
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	f7fa f860 	bl	80005a0 <__aeabi_dmul>
 80064e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064e4:	4606      	mov	r6, r0
 80064e6:	460f      	mov	r7, r1
 80064e8:	e722      	b.n	8006330 <__kernel_rem_pio2+0x2b8>
 80064ea:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80064ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80064f2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80064f6:	f8cd c01c 	str.w	ip, [sp, #28]
 80064fa:	f7fa f851 	bl	80005a0 <__aeabi_dmul>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4650      	mov	r0, sl
 8006504:	4659      	mov	r1, fp
 8006506:	f7f9 fe95 	bl	8000234 <__adddf3>
 800650a:	4682      	mov	sl, r0
 800650c:	468b      	mov	fp, r1
 800650e:	f108 0801 	add.w	r8, r8, #1
 8006512:	9b02      	ldr	r3, [sp, #8]
 8006514:	4598      	cmp	r8, r3
 8006516:	dc01      	bgt.n	800651c <__kernel_rem_pio2+0x4a4>
 8006518:	45b8      	cmp	r8, r7
 800651a:	dde6      	ble.n	80064ea <__kernel_rem_pio2+0x472>
 800651c:	ab48      	add	r3, sp, #288	; 0x120
 800651e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006522:	e9c7 ab00 	strd	sl, fp, [r7]
 8006526:	3e01      	subs	r6, #1
 8006528:	e707      	b.n	800633a <__kernel_rem_pio2+0x2c2>
 800652a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800652c:	2b02      	cmp	r3, #2
 800652e:	dc09      	bgt.n	8006544 <__kernel_rem_pio2+0x4cc>
 8006530:	2b00      	cmp	r3, #0
 8006532:	dc32      	bgt.n	800659a <__kernel_rem_pio2+0x522>
 8006534:	d05a      	beq.n	80065ec <__kernel_rem_pio2+0x574>
 8006536:	9b04      	ldr	r3, [sp, #16]
 8006538:	f003 0007 	and.w	r0, r3, #7
 800653c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006544:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006546:	2b03      	cmp	r3, #3
 8006548:	d1f5      	bne.n	8006536 <__kernel_rem_pio2+0x4be>
 800654a:	ab48      	add	r3, sp, #288	; 0x120
 800654c:	441d      	add	r5, r3
 800654e:	46aa      	mov	sl, r5
 8006550:	46a3      	mov	fp, r4
 8006552:	f1bb 0f00 	cmp.w	fp, #0
 8006556:	dc76      	bgt.n	8006646 <__kernel_rem_pio2+0x5ce>
 8006558:	46aa      	mov	sl, r5
 800655a:	46a3      	mov	fp, r4
 800655c:	f1bb 0f01 	cmp.w	fp, #1
 8006560:	f300 8090 	bgt.w	8006684 <__kernel_rem_pio2+0x60c>
 8006564:	2700      	movs	r7, #0
 8006566:	463e      	mov	r6, r7
 8006568:	2c01      	cmp	r4, #1
 800656a:	f300 80aa 	bgt.w	80066c2 <__kernel_rem_pio2+0x64a>
 800656e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006572:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8006576:	9b00      	ldr	r3, [sp, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 80ac 	bne.w	80066d6 <__kernel_rem_pio2+0x65e>
 800657e:	4603      	mov	r3, r0
 8006580:	462a      	mov	r2, r5
 8006582:	9806      	ldr	r0, [sp, #24]
 8006584:	e9c0 2300 	strd	r2, r3, [r0]
 8006588:	4622      	mov	r2, r4
 800658a:	460b      	mov	r3, r1
 800658c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006590:	463a      	mov	r2, r7
 8006592:	4633      	mov	r3, r6
 8006594:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006598:	e7cd      	b.n	8006536 <__kernel_rem_pio2+0x4be>
 800659a:	2000      	movs	r0, #0
 800659c:	46a0      	mov	r8, r4
 800659e:	4601      	mov	r1, r0
 80065a0:	ab48      	add	r3, sp, #288	; 0x120
 80065a2:	441d      	add	r5, r3
 80065a4:	f1b8 0f00 	cmp.w	r8, #0
 80065a8:	da3a      	bge.n	8006620 <__kernel_rem_pio2+0x5a8>
 80065aa:	9b00      	ldr	r3, [sp, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d03e      	beq.n	800662e <__kernel_rem_pio2+0x5b6>
 80065b0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80065b4:	4602      	mov	r2, r0
 80065b6:	462b      	mov	r3, r5
 80065b8:	9d06      	ldr	r5, [sp, #24]
 80065ba:	2601      	movs	r6, #1
 80065bc:	e9c5 2300 	strd	r2, r3, [r5]
 80065c0:	460b      	mov	r3, r1
 80065c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80065c6:	f7f9 fe33 	bl	8000230 <__aeabi_dsub>
 80065ca:	4684      	mov	ip, r0
 80065cc:	460f      	mov	r7, r1
 80065ce:	ad48      	add	r5, sp, #288	; 0x120
 80065d0:	42b4      	cmp	r4, r6
 80065d2:	f105 0508 	add.w	r5, r5, #8
 80065d6:	da2c      	bge.n	8006632 <__kernel_rem_pio2+0x5ba>
 80065d8:	9b00      	ldr	r3, [sp, #0]
 80065da:	b10b      	cbz	r3, 80065e0 <__kernel_rem_pio2+0x568>
 80065dc:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80065e0:	4662      	mov	r2, ip
 80065e2:	463b      	mov	r3, r7
 80065e4:	9906      	ldr	r1, [sp, #24]
 80065e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80065ea:	e7a4      	b.n	8006536 <__kernel_rem_pio2+0x4be>
 80065ec:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80065ee:	ab48      	add	r3, sp, #288	; 0x120
 80065f0:	4637      	mov	r7, r6
 80065f2:	441d      	add	r5, r3
 80065f4:	2c00      	cmp	r4, #0
 80065f6:	da09      	bge.n	800660c <__kernel_rem_pio2+0x594>
 80065f8:	9b00      	ldr	r3, [sp, #0]
 80065fa:	b10b      	cbz	r3, 8006600 <__kernel_rem_pio2+0x588>
 80065fc:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006600:	4632      	mov	r2, r6
 8006602:	463b      	mov	r3, r7
 8006604:	9906      	ldr	r1, [sp, #24]
 8006606:	e9c1 2300 	strd	r2, r3, [r1]
 800660a:	e794      	b.n	8006536 <__kernel_rem_pio2+0x4be>
 800660c:	4630      	mov	r0, r6
 800660e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006612:	4639      	mov	r1, r7
 8006614:	f7f9 fe0e 	bl	8000234 <__adddf3>
 8006618:	3c01      	subs	r4, #1
 800661a:	4606      	mov	r6, r0
 800661c:	460f      	mov	r7, r1
 800661e:	e7e9      	b.n	80065f4 <__kernel_rem_pio2+0x57c>
 8006620:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006624:	f7f9 fe06 	bl	8000234 <__adddf3>
 8006628:	f108 38ff 	add.w	r8, r8, #4294967295
 800662c:	e7ba      	b.n	80065a4 <__kernel_rem_pio2+0x52c>
 800662e:	460d      	mov	r5, r1
 8006630:	e7c0      	b.n	80065b4 <__kernel_rem_pio2+0x53c>
 8006632:	4660      	mov	r0, ip
 8006634:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006638:	4639      	mov	r1, r7
 800663a:	f7f9 fdfb 	bl	8000234 <__adddf3>
 800663e:	3601      	adds	r6, #1
 8006640:	4684      	mov	ip, r0
 8006642:	460f      	mov	r7, r1
 8006644:	e7c4      	b.n	80065d0 <__kernel_rem_pio2+0x558>
 8006646:	e9da 6700 	ldrd	r6, r7, [sl]
 800664a:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800664e:	4632      	mov	r2, r6
 8006650:	463b      	mov	r3, r7
 8006652:	4640      	mov	r0, r8
 8006654:	4649      	mov	r1, r9
 8006656:	f7f9 fded 	bl	8000234 <__adddf3>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7f9 fde3 	bl	8000230 <__aeabi_dsub>
 800666a:	4632      	mov	r2, r6
 800666c:	463b      	mov	r3, r7
 800666e:	f7f9 fde1 	bl	8000234 <__adddf3>
 8006672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006676:	e86a 0102 	strd	r0, r1, [sl], #-8
 800667a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800667e:	e9ca 2300 	strd	r2, r3, [sl]
 8006682:	e766      	b.n	8006552 <__kernel_rem_pio2+0x4da>
 8006684:	e9da 8900 	ldrd	r8, r9, [sl]
 8006688:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800668c:	4642      	mov	r2, r8
 800668e:	464b      	mov	r3, r9
 8006690:	4630      	mov	r0, r6
 8006692:	4639      	mov	r1, r7
 8006694:	f7f9 fdce 	bl	8000234 <__adddf3>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a0:	4630      	mov	r0, r6
 80066a2:	4639      	mov	r1, r7
 80066a4:	f7f9 fdc4 	bl	8000230 <__aeabi_dsub>
 80066a8:	4642      	mov	r2, r8
 80066aa:	464b      	mov	r3, r9
 80066ac:	f7f9 fdc2 	bl	8000234 <__adddf3>
 80066b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066b4:	e86a 0102 	strd	r0, r1, [sl], #-8
 80066b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066bc:	e9ca 2300 	strd	r2, r3, [sl]
 80066c0:	e74c      	b.n	800655c <__kernel_rem_pio2+0x4e4>
 80066c2:	4638      	mov	r0, r7
 80066c4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80066c8:	4631      	mov	r1, r6
 80066ca:	f7f9 fdb3 	bl	8000234 <__adddf3>
 80066ce:	3c01      	subs	r4, #1
 80066d0:	4607      	mov	r7, r0
 80066d2:	460e      	mov	r6, r1
 80066d4:	e748      	b.n	8006568 <__kernel_rem_pio2+0x4f0>
 80066d6:	9b06      	ldr	r3, [sp, #24]
 80066d8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80066dc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80066e0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80066e4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80066e8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80066ec:	601d      	str	r5, [r3, #0]
 80066ee:	615e      	str	r6, [r3, #20]
 80066f0:	e721      	b.n	8006536 <__kernel_rem_pio2+0x4be>
 80066f2:	bf00      	nop
 80066f4:	41700000 	.word	0x41700000
 80066f8:	3e700000 	.word	0x3e700000
 80066fc:	00000000 	.word	0x00000000

08006700 <__kernel_tan>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	b08b      	sub	sp, #44	; 0x2c
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	4bd9      	ldr	r3, [pc, #868]	; (8006a70 <__kernel_tan+0x370>)
 800670a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800670e:	429e      	cmp	r6, r3
 8006710:	4604      	mov	r4, r0
 8006712:	460d      	mov	r5, r1
 8006714:	4682      	mov	sl, r0
 8006716:	468b      	mov	fp, r1
 8006718:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800671a:	9202      	str	r2, [sp, #8]
 800671c:	9107      	str	r1, [sp, #28]
 800671e:	dc58      	bgt.n	80067d2 <__kernel_tan+0xd2>
 8006720:	f7fa f9d8 	bl	8000ad4 <__aeabi_d2iz>
 8006724:	4605      	mov	r5, r0
 8006726:	2800      	cmp	r0, #0
 8006728:	d178      	bne.n	800681c <__kernel_tan+0x11c>
 800672a:	1c7b      	adds	r3, r7, #1
 800672c:	4323      	orrs	r3, r4
 800672e:	4333      	orrs	r3, r6
 8006730:	d110      	bne.n	8006754 <__kernel_tan+0x54>
 8006732:	4620      	mov	r0, r4
 8006734:	4659      	mov	r1, fp
 8006736:	f000 f9df 	bl	8006af8 <fabs>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	2000      	movs	r0, #0
 8006740:	49cc      	ldr	r1, [pc, #816]	; (8006a74 <__kernel_tan+0x374>)
 8006742:	f7fa f857 	bl	80007f4 <__aeabi_ddiv>
 8006746:	4682      	mov	sl, r0
 8006748:	468b      	mov	fp, r1
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	b00b      	add	sp, #44	; 0x2c
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	2f01      	cmp	r7, #1
 8006756:	d0f8      	beq.n	800674a <__kernel_tan+0x4a>
 8006758:	4620      	mov	r0, r4
 800675a:	4659      	mov	r1, fp
 800675c:	9a02      	ldr	r2, [sp, #8]
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	f7f9 fd68 	bl	8000234 <__adddf3>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	460f      	mov	r7, r1
 800676a:	2000      	movs	r0, #0
 800676c:	49c2      	ldr	r1, [pc, #776]	; (8006a78 <__kernel_tan+0x378>)
 800676e:	f7fa f841 	bl	80007f4 <__aeabi_ddiv>
 8006772:	462e      	mov	r6, r5
 8006774:	4689      	mov	r9, r1
 8006776:	4652      	mov	r2, sl
 8006778:	465b      	mov	r3, fp
 800677a:	4680      	mov	r8, r0
 800677c:	462c      	mov	r4, r5
 800677e:	4630      	mov	r0, r6
 8006780:	460d      	mov	r5, r1
 8006782:	4639      	mov	r1, r7
 8006784:	f7f9 fd54 	bl	8000230 <__aeabi_dsub>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	9802      	ldr	r0, [sp, #8]
 800678e:	9900      	ldr	r1, [sp, #0]
 8006790:	f7f9 fd4e 	bl	8000230 <__aeabi_dsub>
 8006794:	4632      	mov	r2, r6
 8006796:	464b      	mov	r3, r9
 8006798:	f7f9 ff02 	bl	80005a0 <__aeabi_dmul>
 800679c:	4632      	mov	r2, r6
 800679e:	4682      	mov	sl, r0
 80067a0:	468b      	mov	fp, r1
 80067a2:	464b      	mov	r3, r9
 80067a4:	4630      	mov	r0, r6
 80067a6:	4639      	mov	r1, r7
 80067a8:	f7f9 fefa 	bl	80005a0 <__aeabi_dmul>
 80067ac:	2200      	movs	r2, #0
 80067ae:	4bb1      	ldr	r3, [pc, #708]	; (8006a74 <__kernel_tan+0x374>)
 80067b0:	f7f9 fd40 	bl	8000234 <__adddf3>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4650      	mov	r0, sl
 80067ba:	4659      	mov	r1, fp
 80067bc:	f7f9 fd3a 	bl	8000234 <__adddf3>
 80067c0:	4642      	mov	r2, r8
 80067c2:	464b      	mov	r3, r9
 80067c4:	f7f9 feec 	bl	80005a0 <__aeabi_dmul>
 80067c8:	4622      	mov	r2, r4
 80067ca:	462b      	mov	r3, r5
 80067cc:	f7f9 fd32 	bl	8000234 <__adddf3>
 80067d0:	e7b9      	b.n	8006746 <__kernel_tan+0x46>
 80067d2:	4baa      	ldr	r3, [pc, #680]	; (8006a7c <__kernel_tan+0x37c>)
 80067d4:	429e      	cmp	r6, r3
 80067d6:	dd21      	ble.n	800681c <__kernel_tan+0x11c>
 80067d8:	2900      	cmp	r1, #0
 80067da:	da06      	bge.n	80067ea <__kernel_tan+0xea>
 80067dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80067e0:	469b      	mov	fp, r3
 80067e2:	9b00      	ldr	r3, [sp, #0]
 80067e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	4652      	mov	r2, sl
 80067ec:	a182      	add	r1, pc, #520	; (adr r1, 80069f8 <__kernel_tan+0x2f8>)
 80067ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067f2:	465b      	mov	r3, fp
 80067f4:	f7f9 fd1c 	bl	8000230 <__aeabi_dsub>
 80067f8:	4604      	mov	r4, r0
 80067fa:	460d      	mov	r5, r1
 80067fc:	a180      	add	r1, pc, #512	; (adr r1, 8006a00 <__kernel_tan+0x300>)
 80067fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006802:	9a02      	ldr	r2, [sp, #8]
 8006804:	9b00      	ldr	r3, [sp, #0]
 8006806:	f7f9 fd13 	bl	8000230 <__aeabi_dsub>
 800680a:	462b      	mov	r3, r5
 800680c:	4622      	mov	r2, r4
 800680e:	f7f9 fd11 	bl	8000234 <__adddf3>
 8006812:	2300      	movs	r3, #0
 8006814:	4682      	mov	sl, r0
 8006816:	468b      	mov	fp, r1
 8006818:	9302      	str	r3, [sp, #8]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4652      	mov	r2, sl
 800681e:	465b      	mov	r3, fp
 8006820:	4650      	mov	r0, sl
 8006822:	4659      	mov	r1, fp
 8006824:	f7f9 febc 	bl	80005a0 <__aeabi_dmul>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4680      	mov	r8, r0
 800682e:	4689      	mov	r9, r1
 8006830:	f7f9 feb6 	bl	80005a0 <__aeabi_dmul>
 8006834:	4642      	mov	r2, r8
 8006836:	4604      	mov	r4, r0
 8006838:	460d      	mov	r5, r1
 800683a:	464b      	mov	r3, r9
 800683c:	4650      	mov	r0, sl
 800683e:	4659      	mov	r1, fp
 8006840:	f7f9 feae 	bl	80005a0 <__aeabi_dmul>
 8006844:	a370      	add	r3, pc, #448	; (adr r3, 8006a08 <__kernel_tan+0x308>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7f9 fea5 	bl	80005a0 <__aeabi_dmul>
 8006856:	a36e      	add	r3, pc, #440	; (adr r3, 8006a10 <__kernel_tan+0x310>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f7f9 fcea 	bl	8000234 <__adddf3>
 8006860:	4622      	mov	r2, r4
 8006862:	462b      	mov	r3, r5
 8006864:	f7f9 fe9c 	bl	80005a0 <__aeabi_dmul>
 8006868:	a36b      	add	r3, pc, #428	; (adr r3, 8006a18 <__kernel_tan+0x318>)
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f7f9 fce1 	bl	8000234 <__adddf3>
 8006872:	4622      	mov	r2, r4
 8006874:	462b      	mov	r3, r5
 8006876:	f7f9 fe93 	bl	80005a0 <__aeabi_dmul>
 800687a:	a369      	add	r3, pc, #420	; (adr r3, 8006a20 <__kernel_tan+0x320>)
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f7f9 fcd8 	bl	8000234 <__adddf3>
 8006884:	4622      	mov	r2, r4
 8006886:	462b      	mov	r3, r5
 8006888:	f7f9 fe8a 	bl	80005a0 <__aeabi_dmul>
 800688c:	a366      	add	r3, pc, #408	; (adr r3, 8006a28 <__kernel_tan+0x328>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	f7f9 fccf 	bl	8000234 <__adddf3>
 8006896:	4622      	mov	r2, r4
 8006898:	462b      	mov	r3, r5
 800689a:	f7f9 fe81 	bl	80005a0 <__aeabi_dmul>
 800689e:	a364      	add	r3, pc, #400	; (adr r3, 8006a30 <__kernel_tan+0x330>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fcc6 	bl	8000234 <__adddf3>
 80068a8:	4642      	mov	r2, r8
 80068aa:	464b      	mov	r3, r9
 80068ac:	f7f9 fe78 	bl	80005a0 <__aeabi_dmul>
 80068b0:	a361      	add	r3, pc, #388	; (adr r3, 8006a38 <__kernel_tan+0x338>)
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068ba:	4620      	mov	r0, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	f7f9 fe6f 	bl	80005a0 <__aeabi_dmul>
 80068c2:	a35f      	add	r3, pc, #380	; (adr r3, 8006a40 <__kernel_tan+0x340>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f7f9 fcb4 	bl	8000234 <__adddf3>
 80068cc:	4622      	mov	r2, r4
 80068ce:	462b      	mov	r3, r5
 80068d0:	f7f9 fe66 	bl	80005a0 <__aeabi_dmul>
 80068d4:	a35c      	add	r3, pc, #368	; (adr r3, 8006a48 <__kernel_tan+0x348>)
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	f7f9 fcab 	bl	8000234 <__adddf3>
 80068de:	4622      	mov	r2, r4
 80068e0:	462b      	mov	r3, r5
 80068e2:	f7f9 fe5d 	bl	80005a0 <__aeabi_dmul>
 80068e6:	a35a      	add	r3, pc, #360	; (adr r3, 8006a50 <__kernel_tan+0x350>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f7f9 fca2 	bl	8000234 <__adddf3>
 80068f0:	4622      	mov	r2, r4
 80068f2:	462b      	mov	r3, r5
 80068f4:	f7f9 fe54 	bl	80005a0 <__aeabi_dmul>
 80068f8:	a357      	add	r3, pc, #348	; (adr r3, 8006a58 <__kernel_tan+0x358>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fc99 	bl	8000234 <__adddf3>
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f7f9 fe4b 	bl	80005a0 <__aeabi_dmul>
 800690a:	a355      	add	r3, pc, #340	; (adr r3, 8006a60 <__kernel_tan+0x360>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f7f9 fc90 	bl	8000234 <__adddf3>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800691c:	f7f9 fc8a 	bl	8000234 <__adddf3>
 8006920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006924:	f7f9 fe3c 	bl	80005a0 <__aeabi_dmul>
 8006928:	9a02      	ldr	r2, [sp, #8]
 800692a:	9b00      	ldr	r3, [sp, #0]
 800692c:	f7f9 fc82 	bl	8000234 <__adddf3>
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	f7f9 fe34 	bl	80005a0 <__aeabi_dmul>
 8006938:	9a02      	ldr	r2, [sp, #8]
 800693a:	9b00      	ldr	r3, [sp, #0]
 800693c:	f7f9 fc7a 	bl	8000234 <__adddf3>
 8006940:	a349      	add	r3, pc, #292	; (adr r3, 8006a68 <__kernel_tan+0x368>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	4604      	mov	r4, r0
 8006948:	460d      	mov	r5, r1
 800694a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800694e:	f7f9 fe27 	bl	80005a0 <__aeabi_dmul>
 8006952:	4622      	mov	r2, r4
 8006954:	462b      	mov	r3, r5
 8006956:	f7f9 fc6d 	bl	8000234 <__adddf3>
 800695a:	460b      	mov	r3, r1
 800695c:	e9cd 0100 	strd	r0, r1, [sp]
 8006960:	4602      	mov	r2, r0
 8006962:	4659      	mov	r1, fp
 8006964:	4650      	mov	r0, sl
 8006966:	f7f9 fc65 	bl	8000234 <__adddf3>
 800696a:	4b44      	ldr	r3, [pc, #272]	; (8006a7c <__kernel_tan+0x37c>)
 800696c:	4604      	mov	r4, r0
 800696e:	429e      	cmp	r6, r3
 8006970:	460d      	mov	r5, r1
 8006972:	f340 8085 	ble.w	8006a80 <__kernel_tan+0x380>
 8006976:	4638      	mov	r0, r7
 8006978:	f7f9 fda8 	bl	80004cc <__aeabi_i2d>
 800697c:	4622      	mov	r2, r4
 800697e:	4680      	mov	r8, r0
 8006980:	4689      	mov	r9, r1
 8006982:	462b      	mov	r3, r5
 8006984:	4620      	mov	r0, r4
 8006986:	4629      	mov	r1, r5
 8006988:	f7f9 fe0a 	bl	80005a0 <__aeabi_dmul>
 800698c:	4642      	mov	r2, r8
 800698e:	4606      	mov	r6, r0
 8006990:	460f      	mov	r7, r1
 8006992:	464b      	mov	r3, r9
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7f9 fc4c 	bl	8000234 <__adddf3>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7f9 ff26 	bl	80007f4 <__aeabi_ddiv>
 80069a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ac:	f7f9 fc40 	bl	8000230 <__aeabi_dsub>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7f9 fc3a 	bl	8000230 <__aeabi_dsub>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	f7f9 fc38 	bl	8000234 <__adddf3>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4640      	mov	r0, r8
 80069ca:	4649      	mov	r1, r9
 80069cc:	f7f9 fc30 	bl	8000230 <__aeabi_dsub>
 80069d0:	9b07      	ldr	r3, [sp, #28]
 80069d2:	4604      	mov	r4, r0
 80069d4:	179b      	asrs	r3, r3, #30
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	f1c3 0001 	rsb	r0, r3, #1
 80069de:	460d      	mov	r5, r1
 80069e0:	f7f9 fd74 	bl	80004cc <__aeabi_i2d>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4620      	mov	r0, r4
 80069ea:	4629      	mov	r1, r5
 80069ec:	f7f9 fdd8 	bl	80005a0 <__aeabi_dmul>
 80069f0:	e6a9      	b.n	8006746 <__kernel_tan+0x46>
 80069f2:	bf00      	nop
 80069f4:	f3af 8000 	nop.w
 80069f8:	54442d18 	.word	0x54442d18
 80069fc:	3fe921fb 	.word	0x3fe921fb
 8006a00:	33145c07 	.word	0x33145c07
 8006a04:	3c81a626 	.word	0x3c81a626
 8006a08:	74bf7ad4 	.word	0x74bf7ad4
 8006a0c:	3efb2a70 	.word	0x3efb2a70
 8006a10:	32f0a7e9 	.word	0x32f0a7e9
 8006a14:	3f12b80f 	.word	0x3f12b80f
 8006a18:	1a8d1068 	.word	0x1a8d1068
 8006a1c:	3f3026f7 	.word	0x3f3026f7
 8006a20:	fee08315 	.word	0xfee08315
 8006a24:	3f57dbc8 	.word	0x3f57dbc8
 8006a28:	e96e8493 	.word	0xe96e8493
 8006a2c:	3f8226e3 	.word	0x3f8226e3
 8006a30:	1bb341fe 	.word	0x1bb341fe
 8006a34:	3faba1ba 	.word	0x3faba1ba
 8006a38:	db605373 	.word	0xdb605373
 8006a3c:	bef375cb 	.word	0xbef375cb
 8006a40:	a03792a6 	.word	0xa03792a6
 8006a44:	3f147e88 	.word	0x3f147e88
 8006a48:	f2f26501 	.word	0xf2f26501
 8006a4c:	3f4344d8 	.word	0x3f4344d8
 8006a50:	c9560328 	.word	0xc9560328
 8006a54:	3f6d6d22 	.word	0x3f6d6d22
 8006a58:	8406d637 	.word	0x8406d637
 8006a5c:	3f9664f4 	.word	0x3f9664f4
 8006a60:	1110fe7a 	.word	0x1110fe7a
 8006a64:	3fc11111 	.word	0x3fc11111
 8006a68:	55555563 	.word	0x55555563
 8006a6c:	3fd55555 	.word	0x3fd55555
 8006a70:	3e2fffff 	.word	0x3e2fffff
 8006a74:	3ff00000 	.word	0x3ff00000
 8006a78:	bff00000 	.word	0xbff00000
 8006a7c:	3fe59427 	.word	0x3fe59427
 8006a80:	2f01      	cmp	r7, #1
 8006a82:	d031      	beq.n	8006ae8 <__kernel_tan+0x3e8>
 8006a84:	460f      	mov	r7, r1
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	4918      	ldr	r1, [pc, #96]	; (8006af0 <__kernel_tan+0x3f0>)
 8006a8e:	f7f9 feb1 	bl	80007f4 <__aeabi_ddiv>
 8006a92:	2600      	movs	r6, #0
 8006a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a9c:	4652      	mov	r2, sl
 8006a9e:	465b      	mov	r3, fp
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	f7f9 fbc4 	bl	8000230 <__aeabi_dsub>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ab0:	f7f9 fbbe 	bl	8000230 <__aeabi_dsub>
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	f7f9 fd72 	bl	80005a0 <__aeabi_dmul>
 8006abc:	4632      	mov	r2, r6
 8006abe:	4682      	mov	sl, r0
 8006ac0:	468b      	mov	fp, r1
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	f7f9 fd6a 	bl	80005a0 <__aeabi_dmul>
 8006acc:	2200      	movs	r2, #0
 8006ace:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <__kernel_tan+0x3f4>)
 8006ad0:	f7f9 fbb0 	bl	8000234 <__adddf3>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4650      	mov	r0, sl
 8006ada:	4659      	mov	r1, fp
 8006adc:	f7f9 fbaa 	bl	8000234 <__adddf3>
 8006ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ae4:	4634      	mov	r4, r6
 8006ae6:	e66d      	b.n	80067c4 <__kernel_tan+0xc4>
 8006ae8:	4682      	mov	sl, r0
 8006aea:	468b      	mov	fp, r1
 8006aec:	e62d      	b.n	800674a <__kernel_tan+0x4a>
 8006aee:	bf00      	nop
 8006af0:	bff00000 	.word	0xbff00000
 8006af4:	3ff00000 	.word	0x3ff00000

08006af8 <fabs>:
 8006af8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006afc:	4770      	bx	lr
	...

08006b00 <floor>:
 8006b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b04:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006b08:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006b0c:	2e13      	cmp	r6, #19
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4607      	mov	r7, r0
 8006b14:	460c      	mov	r4, r1
 8006b16:	4605      	mov	r5, r0
 8006b18:	dc33      	bgt.n	8006b82 <floor+0x82>
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	da14      	bge.n	8006b48 <floor+0x48>
 8006b1e:	a334      	add	r3, pc, #208	; (adr r3, 8006bf0 <floor+0xf0>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fb86 	bl	8000234 <__adddf3>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f7f9 ffc8 	bl	8000ac0 <__aeabi_dcmpgt>
 8006b30:	b138      	cbz	r0, 8006b42 <floor+0x42>
 8006b32:	2c00      	cmp	r4, #0
 8006b34:	da58      	bge.n	8006be8 <floor+0xe8>
 8006b36:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006b3a:	431d      	orrs	r5, r3
 8006b3c:	d001      	beq.n	8006b42 <floor+0x42>
 8006b3e:	2500      	movs	r5, #0
 8006b40:	4c2d      	ldr	r4, [pc, #180]	; (8006bf8 <floor+0xf8>)
 8006b42:	4623      	mov	r3, r4
 8006b44:	462f      	mov	r7, r5
 8006b46:	e025      	b.n	8006b94 <floor+0x94>
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <floor+0xfc>)
 8006b4a:	fa42 f806 	asr.w	r8, r2, r6
 8006b4e:	ea01 0208 	and.w	r2, r1, r8
 8006b52:	4302      	orrs	r2, r0
 8006b54:	d01e      	beq.n	8006b94 <floor+0x94>
 8006b56:	a326      	add	r3, pc, #152	; (adr r3, 8006bf0 <floor+0xf0>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f7f9 fb6a 	bl	8000234 <__adddf3>
 8006b60:	2200      	movs	r2, #0
 8006b62:	2300      	movs	r3, #0
 8006b64:	f7f9 ffac 	bl	8000ac0 <__aeabi_dcmpgt>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d0ea      	beq.n	8006b42 <floor+0x42>
 8006b6c:	2c00      	cmp	r4, #0
 8006b6e:	bfbe      	ittt	lt
 8006b70:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006b74:	fa43 f606 	asrlt.w	r6, r3, r6
 8006b78:	19a4      	addlt	r4, r4, r6
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	ea24 0408 	bic.w	r4, r4, r8
 8006b80:	e7df      	b.n	8006b42 <floor+0x42>
 8006b82:	2e33      	cmp	r6, #51	; 0x33
 8006b84:	dd0a      	ble.n	8006b9c <floor+0x9c>
 8006b86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006b8a:	d103      	bne.n	8006b94 <floor+0x94>
 8006b8c:	f7f9 fb52 	bl	8000234 <__adddf3>
 8006b90:	4607      	mov	r7, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4638      	mov	r0, r7
 8006b96:	4619      	mov	r1, r3
 8006b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006ba4:	fa22 f808 	lsr.w	r8, r2, r8
 8006ba8:	ea18 0f00 	tst.w	r8, r0
 8006bac:	d0f2      	beq.n	8006b94 <floor+0x94>
 8006bae:	a310      	add	r3, pc, #64	; (adr r3, 8006bf0 <floor+0xf0>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f7f9 fb3e 	bl	8000234 <__adddf3>
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f7f9 ff80 	bl	8000ac0 <__aeabi_dcmpgt>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d0be      	beq.n	8006b42 <floor+0x42>
 8006bc4:	2c00      	cmp	r4, #0
 8006bc6:	da02      	bge.n	8006bce <floor+0xce>
 8006bc8:	2e14      	cmp	r6, #20
 8006bca:	d103      	bne.n	8006bd4 <floor+0xd4>
 8006bcc:	3401      	adds	r4, #1
 8006bce:	ea25 0508 	bic.w	r5, r5, r8
 8006bd2:	e7b6      	b.n	8006b42 <floor+0x42>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006bda:	fa03 f606 	lsl.w	r6, r3, r6
 8006bde:	4435      	add	r5, r6
 8006be0:	42bd      	cmp	r5, r7
 8006be2:	bf38      	it	cc
 8006be4:	18e4      	addcc	r4, r4, r3
 8006be6:	e7f2      	b.n	8006bce <floor+0xce>
 8006be8:	2500      	movs	r5, #0
 8006bea:	462c      	mov	r4, r5
 8006bec:	e7a9      	b.n	8006b42 <floor+0x42>
 8006bee:	bf00      	nop
 8006bf0:	8800759c 	.word	0x8800759c
 8006bf4:	7e37e43c 	.word	0x7e37e43c
 8006bf8:	bff00000 	.word	0xbff00000
 8006bfc:	000fffff 	.word	0x000fffff

08006c00 <scalbn>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006c06:	4604      	mov	r4, r0
 8006c08:	460d      	mov	r5, r1
 8006c0a:	4617      	mov	r7, r2
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	b996      	cbnz	r6, 8006c36 <scalbn+0x36>
 8006c10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c14:	4303      	orrs	r3, r0
 8006c16:	d039      	beq.n	8006c8c <scalbn+0x8c>
 8006c18:	4b33      	ldr	r3, [pc, #204]	; (8006ce8 <scalbn+0xe8>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f7f9 fcc0 	bl	80005a0 <__aeabi_dmul>
 8006c20:	4b32      	ldr	r3, [pc, #200]	; (8006cec <scalbn+0xec>)
 8006c22:	4604      	mov	r4, r0
 8006c24:	429f      	cmp	r7, r3
 8006c26:	460d      	mov	r5, r1
 8006c28:	da0f      	bge.n	8006c4a <scalbn+0x4a>
 8006c2a:	a32b      	add	r3, pc, #172	; (adr r3, 8006cd8 <scalbn+0xd8>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f7f9 fcb6 	bl	80005a0 <__aeabi_dmul>
 8006c34:	e006      	b.n	8006c44 <scalbn+0x44>
 8006c36:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006c3a:	4296      	cmp	r6, r2
 8006c3c:	d10a      	bne.n	8006c54 <scalbn+0x54>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	f7f9 faf8 	bl	8000234 <__adddf3>
 8006c44:	4604      	mov	r4, r0
 8006c46:	460d      	mov	r5, r1
 8006c48:	e020      	b.n	8006c8c <scalbn+0x8c>
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c50:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006c54:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006c58:	19b9      	adds	r1, r7, r6
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	dd0e      	ble.n	8006c7c <scalbn+0x7c>
 8006c5e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006c62:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006c66:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006c6a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006c6e:	4820      	ldr	r0, [pc, #128]	; (8006cf0 <scalbn+0xf0>)
 8006c70:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006c74:	a31a      	add	r3, pc, #104	; (adr r3, 8006ce0 <scalbn+0xe0>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	e7d9      	b.n	8006c30 <scalbn+0x30>
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	dd08      	ble.n	8006c92 <scalbn+0x92>
 8006c80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4629      	mov	r1, r5
 8006c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c92:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006c96:	da12      	bge.n	8006cbe <scalbn+0xbe>
 8006c98:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c9c:	429f      	cmp	r7, r3
 8006c9e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006ca2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006ca6:	dcdc      	bgt.n	8006c62 <scalbn+0x62>
 8006ca8:	a30b      	add	r3, pc, #44	; (adr r3, 8006cd8 <scalbn+0xd8>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006cb2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006cb6:	480f      	ldr	r0, [pc, #60]	; (8006cf4 <scalbn+0xf4>)
 8006cb8:	f041 011f 	orr.w	r1, r1, #31
 8006cbc:	e7b8      	b.n	8006c30 <scalbn+0x30>
 8006cbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cc2:	3136      	adds	r1, #54	; 0x36
 8006cc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cc8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <scalbn+0xf8>)
 8006cd4:	e7ac      	b.n	8006c30 <scalbn+0x30>
 8006cd6:	bf00      	nop
 8006cd8:	c2f8f359 	.word	0xc2f8f359
 8006cdc:	01a56e1f 	.word	0x01a56e1f
 8006ce0:	8800759c 	.word	0x8800759c
 8006ce4:	7e37e43c 	.word	0x7e37e43c
 8006ce8:	43500000 	.word	0x43500000
 8006cec:	ffff3cb0 	.word	0xffff3cb0
 8006cf0:	8800759c 	.word	0x8800759c
 8006cf4:	c2f8f359 	.word	0xc2f8f359
 8006cf8:	3c900000 	.word	0x3c900000

08006cfc <__errno>:
 8006cfc:	4b01      	ldr	r3, [pc, #4]	; (8006d04 <__errno+0x8>)
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2000000c 	.word	0x2000000c

08006d08 <__libc_init_array>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	4d0c      	ldr	r5, [pc, #48]	; (8006d40 <__libc_init_array+0x38>)
 8006d0e:	4c0d      	ldr	r4, [pc, #52]	; (8006d44 <__libc_init_array+0x3c>)
 8006d10:	1b64      	subs	r4, r4, r5
 8006d12:	10a4      	asrs	r4, r4, #2
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	d109      	bne.n	8006d2c <__libc_init_array+0x24>
 8006d18:	f000 fc9c 	bl	8007654 <_init>
 8006d1c:	2600      	movs	r6, #0
 8006d1e:	4d0a      	ldr	r5, [pc, #40]	; (8006d48 <__libc_init_array+0x40>)
 8006d20:	4c0a      	ldr	r4, [pc, #40]	; (8006d4c <__libc_init_array+0x44>)
 8006d22:	1b64      	subs	r4, r4, r5
 8006d24:	10a4      	asrs	r4, r4, #2
 8006d26:	42a6      	cmp	r6, r4
 8006d28:	d105      	bne.n	8006d36 <__libc_init_array+0x2e>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d30:	4798      	blx	r3
 8006d32:	3601      	adds	r6, #1
 8006d34:	e7ee      	b.n	8006d14 <__libc_init_array+0xc>
 8006d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3a:	4798      	blx	r3
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	e7f2      	b.n	8006d26 <__libc_init_array+0x1e>
 8006d40:	08007f4c 	.word	0x08007f4c
 8006d44:	08007f4c 	.word	0x08007f4c
 8006d48:	08007f4c 	.word	0x08007f4c
 8006d4c:	08007f58 	.word	0x08007f58

08006d50 <memset>:
 8006d50:	4603      	mov	r3, r0
 8006d52:	4402      	add	r2, r0
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d100      	bne.n	8006d5a <memset+0xa>
 8006d58:	4770      	bx	lr
 8006d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5e:	e7f9      	b.n	8006d54 <memset+0x4>

08006d60 <siprintf>:
 8006d60:	b40e      	push	{r1, r2, r3}
 8006d62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d66:	b500      	push	{lr}
 8006d68:	b09c      	sub	sp, #112	; 0x70
 8006d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d6c:	9002      	str	r0, [sp, #8]
 8006d6e:	9006      	str	r0, [sp, #24]
 8006d70:	9107      	str	r1, [sp, #28]
 8006d72:	9104      	str	r1, [sp, #16]
 8006d74:	4808      	ldr	r0, [pc, #32]	; (8006d98 <siprintf+0x38>)
 8006d76:	4909      	ldr	r1, [pc, #36]	; (8006d9c <siprintf+0x3c>)
 8006d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d7c:	9105      	str	r1, [sp, #20]
 8006d7e:	6800      	ldr	r0, [r0, #0]
 8006d80:	a902      	add	r1, sp, #8
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	f000 f868 	bl	8006e58 <_svfiprintf_r>
 8006d88:	2200      	movs	r2, #0
 8006d8a:	9b02      	ldr	r3, [sp, #8]
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	b01c      	add	sp, #112	; 0x70
 8006d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d94:	b003      	add	sp, #12
 8006d96:	4770      	bx	lr
 8006d98:	2000000c 	.word	0x2000000c
 8006d9c:	ffff0208 	.word	0xffff0208

08006da0 <__ssputs_r>:
 8006da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	688e      	ldr	r6, [r1, #8]
 8006da6:	4682      	mov	sl, r0
 8006da8:	429e      	cmp	r6, r3
 8006daa:	460c      	mov	r4, r1
 8006dac:	4690      	mov	r8, r2
 8006dae:	461f      	mov	r7, r3
 8006db0:	d838      	bhi.n	8006e24 <__ssputs_r+0x84>
 8006db2:	898a      	ldrh	r2, [r1, #12]
 8006db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006db8:	d032      	beq.n	8006e20 <__ssputs_r+0x80>
 8006dba:	6825      	ldr	r5, [r4, #0]
 8006dbc:	6909      	ldr	r1, [r1, #16]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	eba5 0901 	sub.w	r9, r5, r1
 8006dc4:	6965      	ldr	r5, [r4, #20]
 8006dc6:	444b      	add	r3, r9
 8006dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dd0:	106d      	asrs	r5, r5, #1
 8006dd2:	429d      	cmp	r5, r3
 8006dd4:	bf38      	it	cc
 8006dd6:	461d      	movcc	r5, r3
 8006dd8:	0553      	lsls	r3, r2, #21
 8006dda:	d531      	bpl.n	8006e40 <__ssputs_r+0xa0>
 8006ddc:	4629      	mov	r1, r5
 8006dde:	f000 fb6f 	bl	80074c0 <_malloc_r>
 8006de2:	4606      	mov	r6, r0
 8006de4:	b950      	cbnz	r0, 8006dfc <__ssputs_r+0x5c>
 8006de6:	230c      	movs	r3, #12
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dec:	f8ca 3000 	str.w	r3, [sl]
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfc:	464a      	mov	r2, r9
 8006dfe:	6921      	ldr	r1, [r4, #16]
 8006e00:	f000 face 	bl	80073a0 <memcpy>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	6126      	str	r6, [r4, #16]
 8006e12:	444e      	add	r6, r9
 8006e14:	6026      	str	r6, [r4, #0]
 8006e16:	463e      	mov	r6, r7
 8006e18:	6165      	str	r5, [r4, #20]
 8006e1a:	eba5 0509 	sub.w	r5, r5, r9
 8006e1e:	60a5      	str	r5, [r4, #8]
 8006e20:	42be      	cmp	r6, r7
 8006e22:	d900      	bls.n	8006e26 <__ssputs_r+0x86>
 8006e24:	463e      	mov	r6, r7
 8006e26:	4632      	mov	r2, r6
 8006e28:	4641      	mov	r1, r8
 8006e2a:	6820      	ldr	r0, [r4, #0]
 8006e2c:	f000 fac6 	bl	80073bc <memmove>
 8006e30:	68a3      	ldr	r3, [r4, #8]
 8006e32:	2000      	movs	r0, #0
 8006e34:	1b9b      	subs	r3, r3, r6
 8006e36:	60a3      	str	r3, [r4, #8]
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	4433      	add	r3, r6
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	e7db      	b.n	8006df8 <__ssputs_r+0x58>
 8006e40:	462a      	mov	r2, r5
 8006e42:	f000 fbb1 	bl	80075a8 <_realloc_r>
 8006e46:	4606      	mov	r6, r0
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d1e1      	bne.n	8006e10 <__ssputs_r+0x70>
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	6921      	ldr	r1, [r4, #16]
 8006e50:	f000 face 	bl	80073f0 <_free_r>
 8006e54:	e7c7      	b.n	8006de6 <__ssputs_r+0x46>
	...

08006e58 <_svfiprintf_r>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	4698      	mov	r8, r3
 8006e5e:	898b      	ldrh	r3, [r1, #12]
 8006e60:	4607      	mov	r7, r0
 8006e62:	061b      	lsls	r3, r3, #24
 8006e64:	460d      	mov	r5, r1
 8006e66:	4614      	mov	r4, r2
 8006e68:	b09d      	sub	sp, #116	; 0x74
 8006e6a:	d50e      	bpl.n	8006e8a <_svfiprintf_r+0x32>
 8006e6c:	690b      	ldr	r3, [r1, #16]
 8006e6e:	b963      	cbnz	r3, 8006e8a <_svfiprintf_r+0x32>
 8006e70:	2140      	movs	r1, #64	; 0x40
 8006e72:	f000 fb25 	bl	80074c0 <_malloc_r>
 8006e76:	6028      	str	r0, [r5, #0]
 8006e78:	6128      	str	r0, [r5, #16]
 8006e7a:	b920      	cbnz	r0, 8006e86 <_svfiprintf_r+0x2e>
 8006e7c:	230c      	movs	r3, #12
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295
 8006e84:	e0d1      	b.n	800702a <_svfiprintf_r+0x1d2>
 8006e86:	2340      	movs	r3, #64	; 0x40
 8006e88:	616b      	str	r3, [r5, #20]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8e:	2320      	movs	r3, #32
 8006e90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e94:	2330      	movs	r3, #48	; 0x30
 8006e96:	f04f 0901 	mov.w	r9, #1
 8006e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007044 <_svfiprintf_r+0x1ec>
 8006ea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ea6:	4623      	mov	r3, r4
 8006ea8:	469a      	mov	sl, r3
 8006eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eae:	b10a      	cbz	r2, 8006eb4 <_svfiprintf_r+0x5c>
 8006eb0:	2a25      	cmp	r2, #37	; 0x25
 8006eb2:	d1f9      	bne.n	8006ea8 <_svfiprintf_r+0x50>
 8006eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8006eb8:	d00b      	beq.n	8006ed2 <_svfiprintf_r+0x7a>
 8006eba:	465b      	mov	r3, fp
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f7ff ff6d 	bl	8006da0 <__ssputs_r>
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	f000 80aa 	beq.w	8007020 <_svfiprintf_r+0x1c8>
 8006ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ece:	445a      	add	r2, fp
 8006ed0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 80a2 	beq.w	8007020 <_svfiprintf_r+0x1c8>
 8006edc:	2300      	movs	r3, #0
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ee6:	f10a 0a01 	add.w	sl, sl, #1
 8006eea:	9304      	str	r3, [sp, #16]
 8006eec:	9307      	str	r3, [sp, #28]
 8006eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ef4:	4654      	mov	r4, sl
 8006ef6:	2205      	movs	r2, #5
 8006ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006efc:	4851      	ldr	r0, [pc, #324]	; (8007044 <_svfiprintf_r+0x1ec>)
 8006efe:	f000 fa41 	bl	8007384 <memchr>
 8006f02:	9a04      	ldr	r2, [sp, #16]
 8006f04:	b9d8      	cbnz	r0, 8006f3e <_svfiprintf_r+0xe6>
 8006f06:	06d0      	lsls	r0, r2, #27
 8006f08:	bf44      	itt	mi
 8006f0a:	2320      	movmi	r3, #32
 8006f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f10:	0711      	lsls	r1, r2, #28
 8006f12:	bf44      	itt	mi
 8006f14:	232b      	movmi	r3, #43	; 0x2b
 8006f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f20:	d015      	beq.n	8006f4e <_svfiprintf_r+0xf6>
 8006f22:	4654      	mov	r4, sl
 8006f24:	2000      	movs	r0, #0
 8006f26:	f04f 0c0a 	mov.w	ip, #10
 8006f2a:	9a07      	ldr	r2, [sp, #28]
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f32:	3b30      	subs	r3, #48	; 0x30
 8006f34:	2b09      	cmp	r3, #9
 8006f36:	d94e      	bls.n	8006fd6 <_svfiprintf_r+0x17e>
 8006f38:	b1b0      	cbz	r0, 8006f68 <_svfiprintf_r+0x110>
 8006f3a:	9207      	str	r2, [sp, #28]
 8006f3c:	e014      	b.n	8006f68 <_svfiprintf_r+0x110>
 8006f3e:	eba0 0308 	sub.w	r3, r0, r8
 8006f42:	fa09 f303 	lsl.w	r3, r9, r3
 8006f46:	4313      	orrs	r3, r2
 8006f48:	46a2      	mov	sl, r4
 8006f4a:	9304      	str	r3, [sp, #16]
 8006f4c:	e7d2      	b.n	8006ef4 <_svfiprintf_r+0x9c>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	1d19      	adds	r1, r3, #4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	9103      	str	r1, [sp, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bfbb      	ittet	lt
 8006f5a:	425b      	neglt	r3, r3
 8006f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f60:	9307      	strge	r3, [sp, #28]
 8006f62:	9307      	strlt	r3, [sp, #28]
 8006f64:	bfb8      	it	lt
 8006f66:	9204      	strlt	r2, [sp, #16]
 8006f68:	7823      	ldrb	r3, [r4, #0]
 8006f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f6c:	d10c      	bne.n	8006f88 <_svfiprintf_r+0x130>
 8006f6e:	7863      	ldrb	r3, [r4, #1]
 8006f70:	2b2a      	cmp	r3, #42	; 0x2a
 8006f72:	d135      	bne.n	8006fe0 <_svfiprintf_r+0x188>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	3402      	adds	r4, #2
 8006f78:	1d1a      	adds	r2, r3, #4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	9203      	str	r2, [sp, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfb8      	it	lt
 8006f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f86:	9305      	str	r3, [sp, #20]
 8006f88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007048 <_svfiprintf_r+0x1f0>
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	4650      	mov	r0, sl
 8006f90:	7821      	ldrb	r1, [r4, #0]
 8006f92:	f000 f9f7 	bl	8007384 <memchr>
 8006f96:	b140      	cbz	r0, 8006faa <_svfiprintf_r+0x152>
 8006f98:	2340      	movs	r3, #64	; 0x40
 8006f9a:	eba0 000a 	sub.w	r0, r0, sl
 8006f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	3401      	adds	r4, #1
 8006fa6:	4303      	orrs	r3, r0
 8006fa8:	9304      	str	r3, [sp, #16]
 8006faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fae:	2206      	movs	r2, #6
 8006fb0:	4826      	ldr	r0, [pc, #152]	; (800704c <_svfiprintf_r+0x1f4>)
 8006fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fb6:	f000 f9e5 	bl	8007384 <memchr>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d038      	beq.n	8007030 <_svfiprintf_r+0x1d8>
 8006fbe:	4b24      	ldr	r3, [pc, #144]	; (8007050 <_svfiprintf_r+0x1f8>)
 8006fc0:	bb1b      	cbnz	r3, 800700a <_svfiprintf_r+0x1b2>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	3307      	adds	r3, #7
 8006fc6:	f023 0307 	bic.w	r3, r3, #7
 8006fca:	3308      	adds	r3, #8
 8006fcc:	9303      	str	r3, [sp, #12]
 8006fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd0:	4433      	add	r3, r6
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	e767      	b.n	8006ea6 <_svfiprintf_r+0x4e>
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	2001      	movs	r0, #1
 8006fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fde:	e7a5      	b.n	8006f2c <_svfiprintf_r+0xd4>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f04f 0c0a 	mov.w	ip, #10
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	3401      	adds	r4, #1
 8006fea:	9305      	str	r3, [sp, #20]
 8006fec:	4620      	mov	r0, r4
 8006fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff2:	3a30      	subs	r2, #48	; 0x30
 8006ff4:	2a09      	cmp	r2, #9
 8006ff6:	d903      	bls.n	8007000 <_svfiprintf_r+0x1a8>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0c5      	beq.n	8006f88 <_svfiprintf_r+0x130>
 8006ffc:	9105      	str	r1, [sp, #20]
 8006ffe:	e7c3      	b.n	8006f88 <_svfiprintf_r+0x130>
 8007000:	4604      	mov	r4, r0
 8007002:	2301      	movs	r3, #1
 8007004:	fb0c 2101 	mla	r1, ip, r1, r2
 8007008:	e7f0      	b.n	8006fec <_svfiprintf_r+0x194>
 800700a:	ab03      	add	r3, sp, #12
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	462a      	mov	r2, r5
 8007010:	4638      	mov	r0, r7
 8007012:	4b10      	ldr	r3, [pc, #64]	; (8007054 <_svfiprintf_r+0x1fc>)
 8007014:	a904      	add	r1, sp, #16
 8007016:	f3af 8000 	nop.w
 800701a:	1c42      	adds	r2, r0, #1
 800701c:	4606      	mov	r6, r0
 800701e:	d1d6      	bne.n	8006fce <_svfiprintf_r+0x176>
 8007020:	89ab      	ldrh	r3, [r5, #12]
 8007022:	065b      	lsls	r3, r3, #25
 8007024:	f53f af2c 	bmi.w	8006e80 <_svfiprintf_r+0x28>
 8007028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702a:	b01d      	add	sp, #116	; 0x74
 800702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	462a      	mov	r2, r5
 8007036:	4638      	mov	r0, r7
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <_svfiprintf_r+0x1fc>)
 800703a:	a904      	add	r1, sp, #16
 800703c:	f000 f87c 	bl	8007138 <_printf_i>
 8007040:	e7eb      	b.n	800701a <_svfiprintf_r+0x1c2>
 8007042:	bf00      	nop
 8007044:	08007f18 	.word	0x08007f18
 8007048:	08007f1e 	.word	0x08007f1e
 800704c:	08007f22 	.word	0x08007f22
 8007050:	00000000 	.word	0x00000000
 8007054:	08006da1 	.word	0x08006da1

08007058 <_printf_common>:
 8007058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	4616      	mov	r6, r2
 800705e:	4699      	mov	r9, r3
 8007060:	688a      	ldr	r2, [r1, #8]
 8007062:	690b      	ldr	r3, [r1, #16]
 8007064:	4607      	mov	r7, r0
 8007066:	4293      	cmp	r3, r2
 8007068:	bfb8      	it	lt
 800706a:	4613      	movlt	r3, r2
 800706c:	6033      	str	r3, [r6, #0]
 800706e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007072:	460c      	mov	r4, r1
 8007074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007078:	b10a      	cbz	r2, 800707e <_printf_common+0x26>
 800707a:	3301      	adds	r3, #1
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	0699      	lsls	r1, r3, #26
 8007082:	bf42      	ittt	mi
 8007084:	6833      	ldrmi	r3, [r6, #0]
 8007086:	3302      	addmi	r3, #2
 8007088:	6033      	strmi	r3, [r6, #0]
 800708a:	6825      	ldr	r5, [r4, #0]
 800708c:	f015 0506 	ands.w	r5, r5, #6
 8007090:	d106      	bne.n	80070a0 <_printf_common+0x48>
 8007092:	f104 0a19 	add.w	sl, r4, #25
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	6832      	ldr	r2, [r6, #0]
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	42ab      	cmp	r3, r5
 800709e:	dc28      	bgt.n	80070f2 <_printf_common+0x9a>
 80070a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070a4:	1e13      	subs	r3, r2, #0
 80070a6:	6822      	ldr	r2, [r4, #0]
 80070a8:	bf18      	it	ne
 80070aa:	2301      	movne	r3, #1
 80070ac:	0692      	lsls	r2, r2, #26
 80070ae:	d42d      	bmi.n	800710c <_printf_common+0xb4>
 80070b0:	4649      	mov	r1, r9
 80070b2:	4638      	mov	r0, r7
 80070b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b8:	47c0      	blx	r8
 80070ba:	3001      	adds	r0, #1
 80070bc:	d020      	beq.n	8007100 <_printf_common+0xa8>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	68e5      	ldr	r5, [r4, #12]
 80070c2:	f003 0306 	and.w	r3, r3, #6
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	bf18      	it	ne
 80070ca:	2500      	movne	r5, #0
 80070cc:	6832      	ldr	r2, [r6, #0]
 80070ce:	f04f 0600 	mov.w	r6, #0
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	bf08      	it	eq
 80070d6:	1aad      	subeq	r5, r5, r2
 80070d8:	6922      	ldr	r2, [r4, #16]
 80070da:	bf08      	it	eq
 80070dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e0:	4293      	cmp	r3, r2
 80070e2:	bfc4      	itt	gt
 80070e4:	1a9b      	subgt	r3, r3, r2
 80070e6:	18ed      	addgt	r5, r5, r3
 80070e8:	341a      	adds	r4, #26
 80070ea:	42b5      	cmp	r5, r6
 80070ec:	d11a      	bne.n	8007124 <_printf_common+0xcc>
 80070ee:	2000      	movs	r0, #0
 80070f0:	e008      	b.n	8007104 <_printf_common+0xac>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4652      	mov	r2, sl
 80070f6:	4649      	mov	r1, r9
 80070f8:	4638      	mov	r0, r7
 80070fa:	47c0      	blx	r8
 80070fc:	3001      	adds	r0, #1
 80070fe:	d103      	bne.n	8007108 <_printf_common+0xb0>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007108:	3501      	adds	r5, #1
 800710a:	e7c4      	b.n	8007096 <_printf_common+0x3e>
 800710c:	2030      	movs	r0, #48	; 0x30
 800710e:	18e1      	adds	r1, r4, r3
 8007110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800711a:	4422      	add	r2, r4
 800711c:	3302      	adds	r3, #2
 800711e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007122:	e7c5      	b.n	80070b0 <_printf_common+0x58>
 8007124:	2301      	movs	r3, #1
 8007126:	4622      	mov	r2, r4
 8007128:	4649      	mov	r1, r9
 800712a:	4638      	mov	r0, r7
 800712c:	47c0      	blx	r8
 800712e:	3001      	adds	r0, #1
 8007130:	d0e6      	beq.n	8007100 <_printf_common+0xa8>
 8007132:	3601      	adds	r6, #1
 8007134:	e7d9      	b.n	80070ea <_printf_common+0x92>
	...

08007138 <_printf_i>:
 8007138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	7e0f      	ldrb	r7, [r1, #24]
 800713e:	4691      	mov	r9, r2
 8007140:	2f78      	cmp	r7, #120	; 0x78
 8007142:	4680      	mov	r8, r0
 8007144:	460c      	mov	r4, r1
 8007146:	469a      	mov	sl, r3
 8007148:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800714a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800714e:	d807      	bhi.n	8007160 <_printf_i+0x28>
 8007150:	2f62      	cmp	r7, #98	; 0x62
 8007152:	d80a      	bhi.n	800716a <_printf_i+0x32>
 8007154:	2f00      	cmp	r7, #0
 8007156:	f000 80d9 	beq.w	800730c <_printf_i+0x1d4>
 800715a:	2f58      	cmp	r7, #88	; 0x58
 800715c:	f000 80a4 	beq.w	80072a8 <_printf_i+0x170>
 8007160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007168:	e03a      	b.n	80071e0 <_printf_i+0xa8>
 800716a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800716e:	2b15      	cmp	r3, #21
 8007170:	d8f6      	bhi.n	8007160 <_printf_i+0x28>
 8007172:	a101      	add	r1, pc, #4	; (adr r1, 8007178 <_printf_i+0x40>)
 8007174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007178:	080071d1 	.word	0x080071d1
 800717c:	080071e5 	.word	0x080071e5
 8007180:	08007161 	.word	0x08007161
 8007184:	08007161 	.word	0x08007161
 8007188:	08007161 	.word	0x08007161
 800718c:	08007161 	.word	0x08007161
 8007190:	080071e5 	.word	0x080071e5
 8007194:	08007161 	.word	0x08007161
 8007198:	08007161 	.word	0x08007161
 800719c:	08007161 	.word	0x08007161
 80071a0:	08007161 	.word	0x08007161
 80071a4:	080072f3 	.word	0x080072f3
 80071a8:	08007215 	.word	0x08007215
 80071ac:	080072d5 	.word	0x080072d5
 80071b0:	08007161 	.word	0x08007161
 80071b4:	08007161 	.word	0x08007161
 80071b8:	08007315 	.word	0x08007315
 80071bc:	08007161 	.word	0x08007161
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007161 	.word	0x08007161
 80071c8:	08007161 	.word	0x08007161
 80071cc:	080072dd 	.word	0x080072dd
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	1d1a      	adds	r2, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	602a      	str	r2, [r5, #0]
 80071d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0a4      	b.n	800732e <_printf_i+0x1f6>
 80071e4:	6820      	ldr	r0, [r4, #0]
 80071e6:	6829      	ldr	r1, [r5, #0]
 80071e8:	0606      	lsls	r6, r0, #24
 80071ea:	f101 0304 	add.w	r3, r1, #4
 80071ee:	d50a      	bpl.n	8007206 <_printf_i+0xce>
 80071f0:	680e      	ldr	r6, [r1, #0]
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	2e00      	cmp	r6, #0
 80071f6:	da03      	bge.n	8007200 <_printf_i+0xc8>
 80071f8:	232d      	movs	r3, #45	; 0x2d
 80071fa:	4276      	negs	r6, r6
 80071fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007200:	230a      	movs	r3, #10
 8007202:	485e      	ldr	r0, [pc, #376]	; (800737c <_printf_i+0x244>)
 8007204:	e019      	b.n	800723a <_printf_i+0x102>
 8007206:	680e      	ldr	r6, [r1, #0]
 8007208:	f010 0f40 	tst.w	r0, #64	; 0x40
 800720c:	602b      	str	r3, [r5, #0]
 800720e:	bf18      	it	ne
 8007210:	b236      	sxthne	r6, r6
 8007212:	e7ef      	b.n	80071f4 <_printf_i+0xbc>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	1d19      	adds	r1, r3, #4
 800721a:	6029      	str	r1, [r5, #0]
 800721c:	0601      	lsls	r1, r0, #24
 800721e:	d501      	bpl.n	8007224 <_printf_i+0xec>
 8007220:	681e      	ldr	r6, [r3, #0]
 8007222:	e002      	b.n	800722a <_printf_i+0xf2>
 8007224:	0646      	lsls	r6, r0, #25
 8007226:	d5fb      	bpl.n	8007220 <_printf_i+0xe8>
 8007228:	881e      	ldrh	r6, [r3, #0]
 800722a:	2f6f      	cmp	r7, #111	; 0x6f
 800722c:	bf0c      	ite	eq
 800722e:	2308      	moveq	r3, #8
 8007230:	230a      	movne	r3, #10
 8007232:	4852      	ldr	r0, [pc, #328]	; (800737c <_printf_i+0x244>)
 8007234:	2100      	movs	r1, #0
 8007236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800723a:	6865      	ldr	r5, [r4, #4]
 800723c:	2d00      	cmp	r5, #0
 800723e:	bfa8      	it	ge
 8007240:	6821      	ldrge	r1, [r4, #0]
 8007242:	60a5      	str	r5, [r4, #8]
 8007244:	bfa4      	itt	ge
 8007246:	f021 0104 	bicge.w	r1, r1, #4
 800724a:	6021      	strge	r1, [r4, #0]
 800724c:	b90e      	cbnz	r6, 8007252 <_printf_i+0x11a>
 800724e:	2d00      	cmp	r5, #0
 8007250:	d04d      	beq.n	80072ee <_printf_i+0x1b6>
 8007252:	4615      	mov	r5, r2
 8007254:	fbb6 f1f3 	udiv	r1, r6, r3
 8007258:	fb03 6711 	mls	r7, r3, r1, r6
 800725c:	5dc7      	ldrb	r7, [r0, r7]
 800725e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007262:	4637      	mov	r7, r6
 8007264:	42bb      	cmp	r3, r7
 8007266:	460e      	mov	r6, r1
 8007268:	d9f4      	bls.n	8007254 <_printf_i+0x11c>
 800726a:	2b08      	cmp	r3, #8
 800726c:	d10b      	bne.n	8007286 <_printf_i+0x14e>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	07de      	lsls	r6, r3, #31
 8007272:	d508      	bpl.n	8007286 <_printf_i+0x14e>
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	6861      	ldr	r1, [r4, #4]
 8007278:	4299      	cmp	r1, r3
 800727a:	bfde      	ittt	le
 800727c:	2330      	movle	r3, #48	; 0x30
 800727e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007282:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007286:	1b52      	subs	r2, r2, r5
 8007288:	6122      	str	r2, [r4, #16]
 800728a:	464b      	mov	r3, r9
 800728c:	4621      	mov	r1, r4
 800728e:	4640      	mov	r0, r8
 8007290:	f8cd a000 	str.w	sl, [sp]
 8007294:	aa03      	add	r2, sp, #12
 8007296:	f7ff fedf 	bl	8007058 <_printf_common>
 800729a:	3001      	adds	r0, #1
 800729c:	d14c      	bne.n	8007338 <_printf_i+0x200>
 800729e:	f04f 30ff 	mov.w	r0, #4294967295
 80072a2:	b004      	add	sp, #16
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	4834      	ldr	r0, [pc, #208]	; (800737c <_printf_i+0x244>)
 80072aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072ae:	6829      	ldr	r1, [r5, #0]
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80072b6:	6029      	str	r1, [r5, #0]
 80072b8:	061d      	lsls	r5, r3, #24
 80072ba:	d514      	bpl.n	80072e6 <_printf_i+0x1ae>
 80072bc:	07df      	lsls	r7, r3, #31
 80072be:	bf44      	itt	mi
 80072c0:	f043 0320 	orrmi.w	r3, r3, #32
 80072c4:	6023      	strmi	r3, [r4, #0]
 80072c6:	b91e      	cbnz	r6, 80072d0 <_printf_i+0x198>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	f023 0320 	bic.w	r3, r3, #32
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	2310      	movs	r3, #16
 80072d2:	e7af      	b.n	8007234 <_printf_i+0xfc>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	f043 0320 	orr.w	r3, r3, #32
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	2378      	movs	r3, #120	; 0x78
 80072de:	4828      	ldr	r0, [pc, #160]	; (8007380 <_printf_i+0x248>)
 80072e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072e4:	e7e3      	b.n	80072ae <_printf_i+0x176>
 80072e6:	0659      	lsls	r1, r3, #25
 80072e8:	bf48      	it	mi
 80072ea:	b2b6      	uxthmi	r6, r6
 80072ec:	e7e6      	b.n	80072bc <_printf_i+0x184>
 80072ee:	4615      	mov	r5, r2
 80072f0:	e7bb      	b.n	800726a <_printf_i+0x132>
 80072f2:	682b      	ldr	r3, [r5, #0]
 80072f4:	6826      	ldr	r6, [r4, #0]
 80072f6:	1d18      	adds	r0, r3, #4
 80072f8:	6961      	ldr	r1, [r4, #20]
 80072fa:	6028      	str	r0, [r5, #0]
 80072fc:	0635      	lsls	r5, r6, #24
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	d501      	bpl.n	8007306 <_printf_i+0x1ce>
 8007302:	6019      	str	r1, [r3, #0]
 8007304:	e002      	b.n	800730c <_printf_i+0x1d4>
 8007306:	0670      	lsls	r0, r6, #25
 8007308:	d5fb      	bpl.n	8007302 <_printf_i+0x1ca>
 800730a:	8019      	strh	r1, [r3, #0]
 800730c:	2300      	movs	r3, #0
 800730e:	4615      	mov	r5, r2
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	e7ba      	b.n	800728a <_printf_i+0x152>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	2100      	movs	r1, #0
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	602a      	str	r2, [r5, #0]
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	4628      	mov	r0, r5
 8007322:	f000 f82f 	bl	8007384 <memchr>
 8007326:	b108      	cbz	r0, 800732c <_printf_i+0x1f4>
 8007328:	1b40      	subs	r0, r0, r5
 800732a:	6060      	str	r0, [r4, #4]
 800732c:	6863      	ldr	r3, [r4, #4]
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	2300      	movs	r3, #0
 8007332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007336:	e7a8      	b.n	800728a <_printf_i+0x152>
 8007338:	462a      	mov	r2, r5
 800733a:	4649      	mov	r1, r9
 800733c:	4640      	mov	r0, r8
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	47d0      	blx	sl
 8007342:	3001      	adds	r0, #1
 8007344:	d0ab      	beq.n	800729e <_printf_i+0x166>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	079b      	lsls	r3, r3, #30
 800734a:	d413      	bmi.n	8007374 <_printf_i+0x23c>
 800734c:	68e0      	ldr	r0, [r4, #12]
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	4298      	cmp	r0, r3
 8007352:	bfb8      	it	lt
 8007354:	4618      	movlt	r0, r3
 8007356:	e7a4      	b.n	80072a2 <_printf_i+0x16a>
 8007358:	2301      	movs	r3, #1
 800735a:	4632      	mov	r2, r6
 800735c:	4649      	mov	r1, r9
 800735e:	4640      	mov	r0, r8
 8007360:	47d0      	blx	sl
 8007362:	3001      	adds	r0, #1
 8007364:	d09b      	beq.n	800729e <_printf_i+0x166>
 8007366:	3501      	adds	r5, #1
 8007368:	68e3      	ldr	r3, [r4, #12]
 800736a:	9903      	ldr	r1, [sp, #12]
 800736c:	1a5b      	subs	r3, r3, r1
 800736e:	42ab      	cmp	r3, r5
 8007370:	dcf2      	bgt.n	8007358 <_printf_i+0x220>
 8007372:	e7eb      	b.n	800734c <_printf_i+0x214>
 8007374:	2500      	movs	r5, #0
 8007376:	f104 0619 	add.w	r6, r4, #25
 800737a:	e7f5      	b.n	8007368 <_printf_i+0x230>
 800737c:	08007f29 	.word	0x08007f29
 8007380:	08007f3a 	.word	0x08007f3a

08007384 <memchr>:
 8007384:	4603      	mov	r3, r0
 8007386:	b510      	push	{r4, lr}
 8007388:	b2c9      	uxtb	r1, r1
 800738a:	4402      	add	r2, r0
 800738c:	4293      	cmp	r3, r2
 800738e:	4618      	mov	r0, r3
 8007390:	d101      	bne.n	8007396 <memchr+0x12>
 8007392:	2000      	movs	r0, #0
 8007394:	e003      	b.n	800739e <memchr+0x1a>
 8007396:	7804      	ldrb	r4, [r0, #0]
 8007398:	3301      	adds	r3, #1
 800739a:	428c      	cmp	r4, r1
 800739c:	d1f6      	bne.n	800738c <memchr+0x8>
 800739e:	bd10      	pop	{r4, pc}

080073a0 <memcpy>:
 80073a0:	440a      	add	r2, r1
 80073a2:	4291      	cmp	r1, r2
 80073a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073a8:	d100      	bne.n	80073ac <memcpy+0xc>
 80073aa:	4770      	bx	lr
 80073ac:	b510      	push	{r4, lr}
 80073ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b2:	4291      	cmp	r1, r2
 80073b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b8:	d1f9      	bne.n	80073ae <memcpy+0xe>
 80073ba:	bd10      	pop	{r4, pc}

080073bc <memmove>:
 80073bc:	4288      	cmp	r0, r1
 80073be:	b510      	push	{r4, lr}
 80073c0:	eb01 0402 	add.w	r4, r1, r2
 80073c4:	d902      	bls.n	80073cc <memmove+0x10>
 80073c6:	4284      	cmp	r4, r0
 80073c8:	4623      	mov	r3, r4
 80073ca:	d807      	bhi.n	80073dc <memmove+0x20>
 80073cc:	1e43      	subs	r3, r0, #1
 80073ce:	42a1      	cmp	r1, r4
 80073d0:	d008      	beq.n	80073e4 <memmove+0x28>
 80073d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073da:	e7f8      	b.n	80073ce <memmove+0x12>
 80073dc:	4601      	mov	r1, r0
 80073de:	4402      	add	r2, r0
 80073e0:	428a      	cmp	r2, r1
 80073e2:	d100      	bne.n	80073e6 <memmove+0x2a>
 80073e4:	bd10      	pop	{r4, pc}
 80073e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ee:	e7f7      	b.n	80073e0 <memmove+0x24>

080073f0 <_free_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4605      	mov	r5, r0
 80073f4:	2900      	cmp	r1, #0
 80073f6:	d040      	beq.n	800747a <_free_r+0x8a>
 80073f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fc:	1f0c      	subs	r4, r1, #4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfb8      	it	lt
 8007402:	18e4      	addlt	r4, r4, r3
 8007404:	f000 f910 	bl	8007628 <__malloc_lock>
 8007408:	4a1c      	ldr	r2, [pc, #112]	; (800747c <_free_r+0x8c>)
 800740a:	6813      	ldr	r3, [r2, #0]
 800740c:	b933      	cbnz	r3, 800741c <_free_r+0x2c>
 800740e:	6063      	str	r3, [r4, #4]
 8007410:	6014      	str	r4, [r2, #0]
 8007412:	4628      	mov	r0, r5
 8007414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007418:	f000 b90c 	b.w	8007634 <__malloc_unlock>
 800741c:	42a3      	cmp	r3, r4
 800741e:	d908      	bls.n	8007432 <_free_r+0x42>
 8007420:	6820      	ldr	r0, [r4, #0]
 8007422:	1821      	adds	r1, r4, r0
 8007424:	428b      	cmp	r3, r1
 8007426:	bf01      	itttt	eq
 8007428:	6819      	ldreq	r1, [r3, #0]
 800742a:	685b      	ldreq	r3, [r3, #4]
 800742c:	1809      	addeq	r1, r1, r0
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	e7ed      	b.n	800740e <_free_r+0x1e>
 8007432:	461a      	mov	r2, r3
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	b10b      	cbz	r3, 800743c <_free_r+0x4c>
 8007438:	42a3      	cmp	r3, r4
 800743a:	d9fa      	bls.n	8007432 <_free_r+0x42>
 800743c:	6811      	ldr	r1, [r2, #0]
 800743e:	1850      	adds	r0, r2, r1
 8007440:	42a0      	cmp	r0, r4
 8007442:	d10b      	bne.n	800745c <_free_r+0x6c>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	4401      	add	r1, r0
 8007448:	1850      	adds	r0, r2, r1
 800744a:	4283      	cmp	r3, r0
 800744c:	6011      	str	r1, [r2, #0]
 800744e:	d1e0      	bne.n	8007412 <_free_r+0x22>
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	4401      	add	r1, r0
 8007456:	6011      	str	r1, [r2, #0]
 8007458:	6053      	str	r3, [r2, #4]
 800745a:	e7da      	b.n	8007412 <_free_r+0x22>
 800745c:	d902      	bls.n	8007464 <_free_r+0x74>
 800745e:	230c      	movs	r3, #12
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	e7d6      	b.n	8007412 <_free_r+0x22>
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	1821      	adds	r1, r4, r0
 8007468:	428b      	cmp	r3, r1
 800746a:	bf01      	itttt	eq
 800746c:	6819      	ldreq	r1, [r3, #0]
 800746e:	685b      	ldreq	r3, [r3, #4]
 8007470:	1809      	addeq	r1, r1, r0
 8007472:	6021      	streq	r1, [r4, #0]
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	6054      	str	r4, [r2, #4]
 8007478:	e7cb      	b.n	8007412 <_free_r+0x22>
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20000244 	.word	0x20000244

08007480 <sbrk_aligned>:
 8007480:	b570      	push	{r4, r5, r6, lr}
 8007482:	4e0e      	ldr	r6, [pc, #56]	; (80074bc <sbrk_aligned+0x3c>)
 8007484:	460c      	mov	r4, r1
 8007486:	6831      	ldr	r1, [r6, #0]
 8007488:	4605      	mov	r5, r0
 800748a:	b911      	cbnz	r1, 8007492 <sbrk_aligned+0x12>
 800748c:	f000 f8bc 	bl	8007608 <_sbrk_r>
 8007490:	6030      	str	r0, [r6, #0]
 8007492:	4621      	mov	r1, r4
 8007494:	4628      	mov	r0, r5
 8007496:	f000 f8b7 	bl	8007608 <_sbrk_r>
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	d00a      	beq.n	80074b4 <sbrk_aligned+0x34>
 800749e:	1cc4      	adds	r4, r0, #3
 80074a0:	f024 0403 	bic.w	r4, r4, #3
 80074a4:	42a0      	cmp	r0, r4
 80074a6:	d007      	beq.n	80074b8 <sbrk_aligned+0x38>
 80074a8:	1a21      	subs	r1, r4, r0
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 f8ac 	bl	8007608 <_sbrk_r>
 80074b0:	3001      	adds	r0, #1
 80074b2:	d101      	bne.n	80074b8 <sbrk_aligned+0x38>
 80074b4:	f04f 34ff 	mov.w	r4, #4294967295
 80074b8:	4620      	mov	r0, r4
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	20000248 	.word	0x20000248

080074c0 <_malloc_r>:
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c4:	1ccd      	adds	r5, r1, #3
 80074c6:	f025 0503 	bic.w	r5, r5, #3
 80074ca:	3508      	adds	r5, #8
 80074cc:	2d0c      	cmp	r5, #12
 80074ce:	bf38      	it	cc
 80074d0:	250c      	movcc	r5, #12
 80074d2:	2d00      	cmp	r5, #0
 80074d4:	4607      	mov	r7, r0
 80074d6:	db01      	blt.n	80074dc <_malloc_r+0x1c>
 80074d8:	42a9      	cmp	r1, r5
 80074da:	d905      	bls.n	80074e8 <_malloc_r+0x28>
 80074dc:	230c      	movs	r3, #12
 80074de:	2600      	movs	r6, #0
 80074e0:	603b      	str	r3, [r7, #0]
 80074e2:	4630      	mov	r0, r6
 80074e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e8:	4e2e      	ldr	r6, [pc, #184]	; (80075a4 <_malloc_r+0xe4>)
 80074ea:	f000 f89d 	bl	8007628 <__malloc_lock>
 80074ee:	6833      	ldr	r3, [r6, #0]
 80074f0:	461c      	mov	r4, r3
 80074f2:	bb34      	cbnz	r4, 8007542 <_malloc_r+0x82>
 80074f4:	4629      	mov	r1, r5
 80074f6:	4638      	mov	r0, r7
 80074f8:	f7ff ffc2 	bl	8007480 <sbrk_aligned>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	4604      	mov	r4, r0
 8007500:	d14d      	bne.n	800759e <_malloc_r+0xde>
 8007502:	6834      	ldr	r4, [r6, #0]
 8007504:	4626      	mov	r6, r4
 8007506:	2e00      	cmp	r6, #0
 8007508:	d140      	bne.n	800758c <_malloc_r+0xcc>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	4631      	mov	r1, r6
 800750e:	4638      	mov	r0, r7
 8007510:	eb04 0803 	add.w	r8, r4, r3
 8007514:	f000 f878 	bl	8007608 <_sbrk_r>
 8007518:	4580      	cmp	r8, r0
 800751a:	d13a      	bne.n	8007592 <_malloc_r+0xd2>
 800751c:	6821      	ldr	r1, [r4, #0]
 800751e:	3503      	adds	r5, #3
 8007520:	1a6d      	subs	r5, r5, r1
 8007522:	f025 0503 	bic.w	r5, r5, #3
 8007526:	3508      	adds	r5, #8
 8007528:	2d0c      	cmp	r5, #12
 800752a:	bf38      	it	cc
 800752c:	250c      	movcc	r5, #12
 800752e:	4638      	mov	r0, r7
 8007530:	4629      	mov	r1, r5
 8007532:	f7ff ffa5 	bl	8007480 <sbrk_aligned>
 8007536:	3001      	adds	r0, #1
 8007538:	d02b      	beq.n	8007592 <_malloc_r+0xd2>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	442b      	add	r3, r5
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	e00e      	b.n	8007560 <_malloc_r+0xa0>
 8007542:	6822      	ldr	r2, [r4, #0]
 8007544:	1b52      	subs	r2, r2, r5
 8007546:	d41e      	bmi.n	8007586 <_malloc_r+0xc6>
 8007548:	2a0b      	cmp	r2, #11
 800754a:	d916      	bls.n	800757a <_malloc_r+0xba>
 800754c:	1961      	adds	r1, r4, r5
 800754e:	42a3      	cmp	r3, r4
 8007550:	6025      	str	r5, [r4, #0]
 8007552:	bf18      	it	ne
 8007554:	6059      	strne	r1, [r3, #4]
 8007556:	6863      	ldr	r3, [r4, #4]
 8007558:	bf08      	it	eq
 800755a:	6031      	streq	r1, [r6, #0]
 800755c:	5162      	str	r2, [r4, r5]
 800755e:	604b      	str	r3, [r1, #4]
 8007560:	4638      	mov	r0, r7
 8007562:	f104 060b 	add.w	r6, r4, #11
 8007566:	f000 f865 	bl	8007634 <__malloc_unlock>
 800756a:	f026 0607 	bic.w	r6, r6, #7
 800756e:	1d23      	adds	r3, r4, #4
 8007570:	1af2      	subs	r2, r6, r3
 8007572:	d0b6      	beq.n	80074e2 <_malloc_r+0x22>
 8007574:	1b9b      	subs	r3, r3, r6
 8007576:	50a3      	str	r3, [r4, r2]
 8007578:	e7b3      	b.n	80074e2 <_malloc_r+0x22>
 800757a:	6862      	ldr	r2, [r4, #4]
 800757c:	42a3      	cmp	r3, r4
 800757e:	bf0c      	ite	eq
 8007580:	6032      	streq	r2, [r6, #0]
 8007582:	605a      	strne	r2, [r3, #4]
 8007584:	e7ec      	b.n	8007560 <_malloc_r+0xa0>
 8007586:	4623      	mov	r3, r4
 8007588:	6864      	ldr	r4, [r4, #4]
 800758a:	e7b2      	b.n	80074f2 <_malloc_r+0x32>
 800758c:	4634      	mov	r4, r6
 800758e:	6876      	ldr	r6, [r6, #4]
 8007590:	e7b9      	b.n	8007506 <_malloc_r+0x46>
 8007592:	230c      	movs	r3, #12
 8007594:	4638      	mov	r0, r7
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	f000 f84c 	bl	8007634 <__malloc_unlock>
 800759c:	e7a1      	b.n	80074e2 <_malloc_r+0x22>
 800759e:	6025      	str	r5, [r4, #0]
 80075a0:	e7de      	b.n	8007560 <_malloc_r+0xa0>
 80075a2:	bf00      	nop
 80075a4:	20000244 	.word	0x20000244

080075a8 <_realloc_r>:
 80075a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	4680      	mov	r8, r0
 80075ae:	4614      	mov	r4, r2
 80075b0:	460e      	mov	r6, r1
 80075b2:	b921      	cbnz	r1, 80075be <_realloc_r+0x16>
 80075b4:	4611      	mov	r1, r2
 80075b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	f7ff bf81 	b.w	80074c0 <_malloc_r>
 80075be:	b92a      	cbnz	r2, 80075cc <_realloc_r+0x24>
 80075c0:	f7ff ff16 	bl	80073f0 <_free_r>
 80075c4:	4625      	mov	r5, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075cc:	f000 f838 	bl	8007640 <_malloc_usable_size_r>
 80075d0:	4284      	cmp	r4, r0
 80075d2:	4607      	mov	r7, r0
 80075d4:	d802      	bhi.n	80075dc <_realloc_r+0x34>
 80075d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075da:	d812      	bhi.n	8007602 <_realloc_r+0x5a>
 80075dc:	4621      	mov	r1, r4
 80075de:	4640      	mov	r0, r8
 80075e0:	f7ff ff6e 	bl	80074c0 <_malloc_r>
 80075e4:	4605      	mov	r5, r0
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d0ed      	beq.n	80075c6 <_realloc_r+0x1e>
 80075ea:	42bc      	cmp	r4, r7
 80075ec:	4622      	mov	r2, r4
 80075ee:	4631      	mov	r1, r6
 80075f0:	bf28      	it	cs
 80075f2:	463a      	movcs	r2, r7
 80075f4:	f7ff fed4 	bl	80073a0 <memcpy>
 80075f8:	4631      	mov	r1, r6
 80075fa:	4640      	mov	r0, r8
 80075fc:	f7ff fef8 	bl	80073f0 <_free_r>
 8007600:	e7e1      	b.n	80075c6 <_realloc_r+0x1e>
 8007602:	4635      	mov	r5, r6
 8007604:	e7df      	b.n	80075c6 <_realloc_r+0x1e>
	...

08007608 <_sbrk_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	2300      	movs	r3, #0
 800760c:	4d05      	ldr	r5, [pc, #20]	; (8007624 <_sbrk_r+0x1c>)
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	f7fb fcce 	bl	8002fb4 <_sbrk>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d102      	bne.n	8007622 <_sbrk_r+0x1a>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b103      	cbz	r3, 8007622 <_sbrk_r+0x1a>
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	2000024c 	.word	0x2000024c

08007628 <__malloc_lock>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__malloc_lock+0x8>)
 800762a:	f000 b811 	b.w	8007650 <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	20000250 	.word	0x20000250

08007634 <__malloc_unlock>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__malloc_unlock+0x8>)
 8007636:	f000 b80c 	b.w	8007652 <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	20000250 	.word	0x20000250

08007640 <_malloc_usable_size_r>:
 8007640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007644:	1f18      	subs	r0, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfbc      	itt	lt
 800764a:	580b      	ldrlt	r3, [r1, r0]
 800764c:	18c0      	addlt	r0, r0, r3
 800764e:	4770      	bx	lr

08007650 <__retarget_lock_acquire_recursive>:
 8007650:	4770      	bx	lr

08007652 <__retarget_lock_release_recursive>:
 8007652:	4770      	bx	lr

08007654 <_init>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr

08007660 <_fini>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr
